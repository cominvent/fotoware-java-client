/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cominvent.fotoware.api;

import com.cominvent.fotoware.client.ApiClient;
import com.cominvent.fotoware.client.ApiException;
import com.cominvent.fotoware.client.ApiResponse;
import com.cominvent.fotoware.client.Pair;

import com.cominvent.fotoware.model.CollectionInfo;
import com.cominvent.fotoware.model.PeopleList;
import com.cominvent.fotoware.model.Sharing;
import com.cominvent.fotoware.model.SharingLinkList;
import com.cominvent.fotoware.model.SharingUpdate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AlbumsSharingApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AlbumsSharingApi() {
    this(new ApiClient());
  }

  public AlbumsSharingApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Search among the users and groups you have permission to share albums with
   * 
   * @param q Query for user(s) and group(s), e.g. q&#x3D;consumer  (required)
   * @return PeopleList
   * @throws ApiException if fails to make API call
   */
  public PeopleList fotowebMePeopleGet(String q) throws ApiException {
    ApiResponse<PeopleList> localVarResponse = fotowebMePeopleGetWithHttpInfo(q);
    return localVarResponse.getData();
  }

  /**
   * Search among the users and groups you have permission to share albums with
   * 
   * @param q Query for user(s) and group(s), e.g. q&#x3D;consumer  (required)
   * @return ApiResponse&lt;PeopleList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PeopleList> fotowebMePeopleGetWithHttpInfo(String q) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebMePeopleGetRequestBuilder(q);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebMePeopleGet", localVarResponse);
        }
        return new ApiResponse<PeopleList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PeopleList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebMePeopleGetRequestBuilder(String q) throws ApiException {
    // verify the required parameter 'q' is set
    if (q == null) {
      throw new ApiException(400, "Missing the required parameter 'q' when calling fotowebMePeopleGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/me/people/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "q";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.people-list+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all information for an album for a specfic user; including properties, assets in the album etc.
   * 
   * @param userid Unique ID of the user (required)
   * @param albumid Unique ID of the album (required)
   * @return CollectionInfo
   * @throws ApiException if fails to make API call
   */
  public CollectionInfo fotowebUsersUseridAlbumsAlbumidGet(String userid, String albumid) throws ApiException {
    ApiResponse<CollectionInfo> localVarResponse = fotowebUsersUseridAlbumsAlbumidGetWithHttpInfo(userid, albumid);
    return localVarResponse.getData();
  }

  /**
   * Get all information for an album for a specfic user; including properties, assets in the album etc.
   * 
   * @param userid Unique ID of the user (required)
   * @param albumid Unique ID of the album (required)
   * @return ApiResponse&lt;CollectionInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CollectionInfo> fotowebUsersUseridAlbumsAlbumidGetWithHttpInfo(String userid, String albumid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebUsersUseridAlbumsAlbumidGetRequestBuilder(userid, albumid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebUsersUseridAlbumsAlbumidGet", localVarResponse);
        }
        return new ApiResponse<CollectionInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CollectionInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebUsersUseridAlbumsAlbumidGetRequestBuilder(String userid, String albumid) throws ApiException {
    // verify the required parameter 'userid' is set
    if (userid == null) {
      throw new ApiException(400, "Missing the required parameter 'userid' when calling fotowebUsersUseridAlbumsAlbumidGet");
    }
    // verify the required parameter 'albumid' is set
    if (albumid == null) {
      throw new ApiException(400, "Missing the required parameter 'albumid' when calling fotowebUsersUseridAlbumsAlbumidGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/users/{userid}/albums/{albumid}/"
        .replace("{userid}", ApiClient.urlEncode(userid.toString()))
        .replace("{albumid}", ApiClient.urlEncode(albumid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.collectioninfo+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets sharing details for an album for a specfic user; including any shares, public link and user/groups shares
   * 
   * @param userid Unique ID of the user (required)
   * @param albumid Unique ID of the album (required)
   * @return Sharing
   * @throws ApiException if fails to make API call
   */
  public Sharing fotowebUsersUseridAlbumsAlbumidSharesGet(String userid, String albumid) throws ApiException {
    ApiResponse<Sharing> localVarResponse = fotowebUsersUseridAlbumsAlbumidSharesGetWithHttpInfo(userid, albumid);
    return localVarResponse.getData();
  }

  /**
   * Gets sharing details for an album for a specfic user; including any shares, public link and user/groups shares
   * 
   * @param userid Unique ID of the user (required)
   * @param albumid Unique ID of the album (required)
   * @return ApiResponse&lt;Sharing&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Sharing> fotowebUsersUseridAlbumsAlbumidSharesGetWithHttpInfo(String userid, String albumid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebUsersUseridAlbumsAlbumidSharesGetRequestBuilder(userid, albumid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebUsersUseridAlbumsAlbumidSharesGet", localVarResponse);
        }
        return new ApiResponse<Sharing>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Sharing>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebUsersUseridAlbumsAlbumidSharesGetRequestBuilder(String userid, String albumid) throws ApiException {
    // verify the required parameter 'userid' is set
    if (userid == null) {
      throw new ApiException(400, "Missing the required parameter 'userid' when calling fotowebUsersUseridAlbumsAlbumidSharesGet");
    }
    // verify the required parameter 'albumid' is set
    if (albumid == null) {
      throw new ApiException(400, "Missing the required parameter 'albumid' when calling fotowebUsersUseridAlbumsAlbumidSharesGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/users/{userid}/albums/{albumid}/.shares/"
        .replace("{userid}", ApiClient.urlEncode(userid.toString()))
        .replace("{albumid}", ApiClient.urlEncode(albumid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.sharing+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Make updates to album sharing for an album.
   * This is mainly used for enabling/disabling Download permissions on public sharing link 
   * @param userid Unique ID of the user (required)
   * @param albumid Unique ID of the album (required)
   * @param sharingUpdate  (optional)
   * @return SharingLinkList
   * @throws ApiException if fails to make API call
   */
  public SharingLinkList fotowebUsersUseridAlbumsAlbumidSharesPatch(String userid, String albumid, SharingUpdate sharingUpdate) throws ApiException {
    ApiResponse<SharingLinkList> localVarResponse = fotowebUsersUseridAlbumsAlbumidSharesPatchWithHttpInfo(userid, albumid, sharingUpdate);
    return localVarResponse.getData();
  }

  /**
   * Make updates to album sharing for an album.
   * This is mainly used for enabling/disabling Download permissions on public sharing link 
   * @param userid Unique ID of the user (required)
   * @param albumid Unique ID of the album (required)
   * @param sharingUpdate  (optional)
   * @return ApiResponse&lt;SharingLinkList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SharingLinkList> fotowebUsersUseridAlbumsAlbumidSharesPatchWithHttpInfo(String userid, String albumid, SharingUpdate sharingUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebUsersUseridAlbumsAlbumidSharesPatchRequestBuilder(userid, albumid, sharingUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebUsersUseridAlbumsAlbumidSharesPatch", localVarResponse);
        }
        return new ApiResponse<SharingLinkList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SharingLinkList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebUsersUseridAlbumsAlbumidSharesPatchRequestBuilder(String userid, String albumid, SharingUpdate sharingUpdate) throws ApiException {
    // verify the required parameter 'userid' is set
    if (userid == null) {
      throw new ApiException(400, "Missing the required parameter 'userid' when calling fotowebUsersUseridAlbumsAlbumidSharesPatch");
    }
    // verify the required parameter 'albumid' is set
    if (albumid == null) {
      throw new ApiException(400, "Missing the required parameter 'albumid' when calling fotowebUsersUseridAlbumsAlbumidSharesPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/users/{userid}/albums/{albumid}/.shares/"
        .replace("{userid}", ApiClient.urlEncode(userid.toString()))
        .replace("{albumid}", ApiClient.urlEncode(albumid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/vnd.fotoware.sharing-update+json");
    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.sharing-link-list+json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sharingUpdate);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
