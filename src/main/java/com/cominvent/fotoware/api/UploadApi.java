/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cominvent.fotoware.api;

import com.cominvent.fotoware.client.ApiClient;
import com.cominvent.fotoware.client.ApiException;
import com.cominvent.fotoware.client.ApiResponse;
import com.cominvent.fotoware.client.Pair;

import com.cominvent.fotoware.model.BatchUploadCreate;
import com.cominvent.fotoware.model.BatchUploadInfo;
import com.cominvent.fotoware.model.BatchUploadStatus;
import com.cominvent.fotoware.model.CollectionList;
import java.io.File;
import com.cominvent.fotoware.model.UploadResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UploadApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public UploadApi() {
    this(new ApiClient());
  }

  public UploadApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a new upload task 
   * This initial upload request begins the process for uploading a single asset by setting up an upload task with a unique Upload ID which is used in all following API requests. 
   * @param batchUploadCreate  (optional)
   * @return BatchUploadInfo
   * @throws ApiException if fails to make API call
   * Send initial upload request
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Upload_API#1._Send_initial_upload_request">Create a new upload task  Documentation</a>
   */
  public BatchUploadInfo fotowebApiUploadsPost(BatchUploadCreate batchUploadCreate) throws ApiException {
    ApiResponse<BatchUploadInfo> localVarResponse = fotowebApiUploadsPostWithHttpInfo(batchUploadCreate);
    return localVarResponse.getData();
  }

  /**
   * Create a new upload task 
   * This initial upload request begins the process for uploading a single asset by setting up an upload task with a unique Upload ID which is used in all following API requests. 
   * @param batchUploadCreate  (optional)
   * @return ApiResponse&lt;BatchUploadInfo&gt;
   * @throws ApiException if fails to make API call
   * Send initial upload request
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Upload_API#1._Send_initial_upload_request">Create a new upload task  Documentation</a>
   */
  public ApiResponse<BatchUploadInfo> fotowebApiUploadsPostWithHttpInfo(BatchUploadCreate batchUploadCreate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiUploadsPostRequestBuilder(batchUploadCreate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiUploadsPost", localVarResponse);
        }
        return new ApiResponse<BatchUploadInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BatchUploadInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiUploadsPostRequestBuilder(BatchUploadCreate batchUploadCreate) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/uploads";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(batchUploadCreate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Upload a chunk to an upload task 
   * This request uploads a chunk of the file being uploaded. The chunk size and number of chunks to upload is returned in the response to the create upload task call. 
   * @param uploadId Unique ID of the upload task (required)
   * @param chunkIndex Numeric index of the uploaded chunk (required)
   * @param fileName  (optional)
   * @throws ApiException if fails to make API call
   * Send file data
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Upload_API#2._Send_file_data">Upload a chunk to an upload task  Documentation</a>
   */
  public void fotowebApiUploadsUploadIdChunksChunkIndexPost(String uploadId, Integer chunkIndex, File fileName) throws ApiException {
    fotowebApiUploadsUploadIdChunksChunkIndexPostWithHttpInfo(uploadId, chunkIndex, fileName);
  }

  /**
   * Upload a chunk to an upload task 
   * This request uploads a chunk of the file being uploaded. The chunk size and number of chunks to upload is returned in the response to the create upload task call. 
   * @param uploadId Unique ID of the upload task (required)
   * @param chunkIndex Numeric index of the uploaded chunk (required)
   * @param fileName  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   * Send file data
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Upload_API#2._Send_file_data">Upload a chunk to an upload task  Documentation</a>
   */
  public ApiResponse<Void> fotowebApiUploadsUploadIdChunksChunkIndexPostWithHttpInfo(String uploadId, Integer chunkIndex, File fileName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiUploadsUploadIdChunksChunkIndexPostRequestBuilder(uploadId, chunkIndex, fileName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiUploadsUploadIdChunksChunkIndexPost", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiUploadsUploadIdChunksChunkIndexPostRequestBuilder(String uploadId, Integer chunkIndex, File fileName) throws ApiException {
    // verify the required parameter 'uploadId' is set
    if (uploadId == null) {
      throw new ApiException(400, "Missing the required parameter 'uploadId' when calling fotowebApiUploadsUploadIdChunksChunkIndexPost");
    }
    // verify the required parameter 'chunkIndex' is set
    if (chunkIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'chunkIndex' when calling fotowebApiUploadsUploadIdChunksChunkIndexPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/uploads/{uploadId}/chunks/{chunkIndex}"
        .replace("{uploadId}", ApiClient.urlEncode(uploadId.toString()))
        .replace("{chunkIndex}", ApiClient.urlEncode(chunkIndex.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    MultipartEntityBuilder multiPartBuilder = MultipartEntityBuilder.create();
    boolean hasFiles = false;
    multiPartBuilder.addBinaryBody("fileName", fileName);
    hasFiles = true;
    HttpEntity entity = multiPartBuilder.build();
    HttpRequest.BodyPublisher formDataPublisher;
    if (hasFiles) {
        Pipe pipe;
        try {
            pipe = Pipe.open();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        new Thread(() -> {
            try (OutputStream outputStream = Channels.newOutputStream(pipe.sink())) {
                entity.writeTo(outputStream);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
        formDataPublisher = HttpRequest.BodyPublishers.ofInputStream(() -> Channels.newInputStream(pipe.source()));
    } else {
        ByteArrayOutputStream formOutputStream = new ByteArrayOutputStream();
        try {
            entity.writeTo(formOutputStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        formDataPublisher = HttpRequest.BodyPublishers
            .ofInputStream(() -> new ByteArrayInputStream(formOutputStream.toByteArray()));
    }
    localVarRequestBuilder
        .header("Content-Type", entity.getContentType().getValue())
        .method("POST", formDataPublisher);
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the upload task status 
   * This request is made to poll the status of an upload task. 
   * @param uploadId Unique ID of the upload task (required)
   * @return BatchUploadStatus
   * @throws ApiException if fails to make API call
   * Poll status for completion
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Upload_API#4._Poll_status_for_completion">Get the upload task status  Documentation</a>
   */
  public BatchUploadStatus fotowebApiUploadsUploadIdStatusGet(String uploadId) throws ApiException {
    ApiResponse<BatchUploadStatus> localVarResponse = fotowebApiUploadsUploadIdStatusGetWithHttpInfo(uploadId);
    return localVarResponse.getData();
  }

  /**
   * Get the upload task status 
   * This request is made to poll the status of an upload task. 
   * @param uploadId Unique ID of the upload task (required)
   * @return ApiResponse&lt;BatchUploadStatus&gt;
   * @throws ApiException if fails to make API call
   * Poll status for completion
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Upload_API#4._Poll_status_for_completion">Get the upload task status  Documentation</a>
   */
  public ApiResponse<BatchUploadStatus> fotowebApiUploadsUploadIdStatusGetWithHttpInfo(String uploadId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiUploadsUploadIdStatusGetRequestBuilder(uploadId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiUploadsUploadIdStatusGet", localVarResponse);
        }
        return new ApiResponse<BatchUploadStatus>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BatchUploadStatus>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiUploadsUploadIdStatusGetRequestBuilder(String uploadId) throws ApiException {
    // verify the required parameter 'uploadId' is set
    if (uploadId == null) {
      throw new ApiException(400, "Missing the required parameter 'uploadId' when calling fotowebApiUploadsUploadIdStatusGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/uploads/{uploadId}/status"
        .replace("{uploadId}", ApiClient.urlEncode(uploadId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Upload the XMP file to an upload task 
   * This is an optional request to upload an XMP sidecar file that contains the metadata of the asset file. XMP sidecars are assumed to be  small, so they can be uploaded in one request. If a file has an XMP sidecar, then the initial upload request must declare it. 
   * @param uploadId Unique ID of the upload task (required)
   * @param fileName  (optional)
   * @throws ApiException if fails to make API call
   * Send XMP sidecar file (if required)
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Upload_API#3._Send_XMP_sidecar_file_(if_required)">Upload the XMP file to an upload task  Documentation</a>
   */
  public void fotowebApiUploadsUploadIdXmpPost(String uploadId, File fileName) throws ApiException {
    fotowebApiUploadsUploadIdXmpPostWithHttpInfo(uploadId, fileName);
  }

  /**
   * Upload the XMP file to an upload task 
   * This is an optional request to upload an XMP sidecar file that contains the metadata of the asset file. XMP sidecars are assumed to be  small, so they can be uploaded in one request. If a file has an XMP sidecar, then the initial upload request must declare it. 
   * @param uploadId Unique ID of the upload task (required)
   * @param fileName  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   * Send XMP sidecar file (if required)
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Upload_API#3._Send_XMP_sidecar_file_(if_required)">Upload the XMP file to an upload task  Documentation</a>
   */
  public ApiResponse<Void> fotowebApiUploadsUploadIdXmpPostWithHttpInfo(String uploadId, File fileName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiUploadsUploadIdXmpPostRequestBuilder(uploadId, fileName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiUploadsUploadIdXmpPost", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiUploadsUploadIdXmpPostRequestBuilder(String uploadId, File fileName) throws ApiException {
    // verify the required parameter 'uploadId' is set
    if (uploadId == null) {
      throw new ApiException(400, "Missing the required parameter 'uploadId' when calling fotowebApiUploadsUploadIdXmpPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/uploads/{uploadId}/xmp"
        .replace("{uploadId}", ApiClient.urlEncode(uploadId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    MultipartEntityBuilder multiPartBuilder = MultipartEntityBuilder.create();
    boolean hasFiles = false;
    multiPartBuilder.addBinaryBody("fileName", fileName);
    hasFiles = true;
    HttpEntity entity = multiPartBuilder.build();
    HttpRequest.BodyPublisher formDataPublisher;
    if (hasFiles) {
        Pipe pipe;
        try {
            pipe = Pipe.open();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        new Thread(() -> {
            try (OutputStream outputStream = Channels.newOutputStream(pipe.sink())) {
                entity.writeTo(outputStream);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
        formDataPublisher = HttpRequest.BodyPublishers.ofInputStream(() -> Channels.newInputStream(pipe.source()));
    } else {
        ByteArrayOutputStream formOutputStream = new ByteArrayOutputStream();
        try {
            entity.writeTo(formOutputStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        formDataPublisher = HttpRequest.BodyPublishers
            .ofInputStream(() -> new ByteArrayInputStream(formOutputStream.toByteArray()));
    }
    localVarRequestBuilder
        .header("Content-Type", entity.getContentType().getValue())
        .method("POST", formDataPublisher);
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Assets are uploaded by making a POST request to the URL of the archive. Each request can contain one or more assets. Upload uses HTTP Multipart requests, as defined in RFC1341. It is also possible to create a new folder (or a hierarchy of nested folders) and upload assets to the new folder. 
   * Note:   * The upload location URL (upload_location_url) must be the URL found in the href attribute of the archive representation. Please do not hard-code upload location URLs.   * To get the upload request URL of an already known archive (with a known API URL), first request the archive representation of the archive, then use the value of the href-attribute for the upload request   * If the archive has a custom input folder, then assets can only be uploaded to the root URL of the archive. It is not possible to upload to a specific sub folder or to create a new sub folder during upload. 
   * @param archiveHREF The url to the archive (required)
   * @param contentType Ignored by FotoWeb. Should match the MIME type of the file, but can safely be set to application/octet-stream regardless of file type.  (optional)
   * @return UploadResponse
   * @throws ApiException if fails to make API call
   * Upload assets using the API
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Uploading_assets_using_the_API">Assets are uploaded by making a POST request to the URL of the archive. Each request can contain one or more assets. Upload uses HTTP Multipart requests, as defined in RFC1341. It is also possible to create a new folder (or a hierarchy of nested folders) and upload assets to the new folder.  Documentation</a>
   */
  public UploadResponse fotowebArchivesArchiveHREFPost(String archiveHREF, String contentType) throws ApiException {
    ApiResponse<UploadResponse> localVarResponse = fotowebArchivesArchiveHREFPostWithHttpInfo(archiveHREF, contentType);
    return localVarResponse.getData();
  }

  /**
   * Assets are uploaded by making a POST request to the URL of the archive. Each request can contain one or more assets. Upload uses HTTP Multipart requests, as defined in RFC1341. It is also possible to create a new folder (or a hierarchy of nested folders) and upload assets to the new folder. 
   * Note:   * The upload location URL (upload_location_url) must be the URL found in the href attribute of the archive representation. Please do not hard-code upload location URLs.   * To get the upload request URL of an already known archive (with a known API URL), first request the archive representation of the archive, then use the value of the href-attribute for the upload request   * If the archive has a custom input folder, then assets can only be uploaded to the root URL of the archive. It is not possible to upload to a specific sub folder or to create a new sub folder during upload. 
   * @param archiveHREF The url to the archive (required)
   * @param contentType Ignored by FotoWeb. Should match the MIME type of the file, but can safely be set to application/octet-stream regardless of file type.  (optional)
   * @return ApiResponse&lt;UploadResponse&gt;
   * @throws ApiException if fails to make API call
   * Upload assets using the API
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Uploading_assets_using_the_API">Assets are uploaded by making a POST request to the URL of the archive. Each request can contain one or more assets. Upload uses HTTP Multipart requests, as defined in RFC1341. It is also possible to create a new folder (or a hierarchy of nested folders) and upload assets to the new folder.  Documentation</a>
   */
  public ApiResponse<UploadResponse> fotowebArchivesArchiveHREFPostWithHttpInfo(String archiveHREF, String contentType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebArchivesArchiveHREFPostRequestBuilder(archiveHREF, contentType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebArchivesArchiveHREFPost", localVarResponse);
        }
        return new ApiResponse<UploadResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UploadResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebArchivesArchiveHREFPostRequestBuilder(String archiveHREF, String contentType) throws ApiException {
    // verify the required parameter 'archiveHREF' is set
    if (archiveHREF == null) {
      throw new ApiException(400, "Missing the required parameter 'archiveHREF' when calling fotowebArchivesArchiveHREFPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/archives/{archiveHREF}/"
        .replace("{archiveHREF}", ApiClient.urlEncode(archiveHREF.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentType != null) {
      localVarRequestBuilder.header("Content-Type", contentType.toString());
    }
    localVarRequestBuilder.header("Accept", "application/vnd.fotoware.upload-response+json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List of collections that are available to be uploaded to
   * 
   * @return CollectionList
   * @throws ApiException if fails to make API call
   * Detailed info on ingestion
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Ingestion">List of collections that are available to be uploaded to Documentation</a>
   */
  public CollectionList fotowebMeUploadToGet() throws ApiException {
    ApiResponse<CollectionList> localVarResponse = fotowebMeUploadToGetWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List of collections that are available to be uploaded to
   * 
   * @return ApiResponse&lt;CollectionList&gt;
   * @throws ApiException if fails to make API call
   * Detailed info on ingestion
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Ingestion">List of collections that are available to be uploaded to Documentation</a>
   */
  public ApiResponse<CollectionList> fotowebMeUploadToGetWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebMeUploadToGetRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebMeUploadToGet", localVarResponse);
        }
        return new ApiResponse<CollectionList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CollectionList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebMeUploadToGetRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/me/upload-to/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.collectionlist+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
