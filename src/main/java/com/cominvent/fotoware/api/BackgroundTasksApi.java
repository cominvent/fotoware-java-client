/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cominvent.fotoware.api;

import com.cominvent.fotoware.client.ApiClient;
import com.cominvent.fotoware.client.ApiException;
import com.cominvent.fotoware.client.ApiResponse;
import com.cominvent.fotoware.client.Pair;

import com.cominvent.fotoware.model.ActionRequest;
import com.cominvent.fotoware.model.ActionResponse;
import com.cominvent.fotoware.model.CopyRequest;
import com.cominvent.fotoware.model.CopyResponse;
import com.cominvent.fotoware.model.DeleteRequest;
import com.cominvent.fotoware.model.DeleteResponse;
import com.cominvent.fotoware.model.DuplicateRequest;
import com.cominvent.fotoware.model.DuplicateResponse;
import com.cominvent.fotoware.model.ErrorMessage;
import com.cominvent.fotoware.model.MarkerRequest;
import com.cominvent.fotoware.model.MarkerResponse;
import com.cominvent.fotoware.model.MetadataEditRequest;
import com.cominvent.fotoware.model.MetadataEditResponse;
import com.cominvent.fotoware.model.MoveRequest;
import com.cominvent.fotoware.model.MoveResponse;
import com.cominvent.fotoware.model.RenameRequest;
import com.cominvent.fotoware.model.RenameResponse;
import com.cominvent.fotoware.model.RotateRequest;
import com.cominvent.fotoware.model.RotateResponse;
import com.cominvent.fotoware.model.TaskStatus;
import com.cominvent.fotoware.model.UploadStatus;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-20T14:14:21.267957+01:00[Europe/Oslo]")
public class BackgroundTasksApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public BackgroundTasksApi() {
    this(new ApiClient());
  }

  public BackgroundTasksApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Polls the status of a tasks
   * Gives you the status and info of a submitted background task
   * @param id Unique id of the background tasks (required)
   * @return UploadStatus
   * @throws ApiException if fails to make API call
   */
  public UploadStatus fotowebMeBackgroundTasksIdGet(String id) throws ApiException {
    ApiResponse<UploadStatus> localVarResponse = fotowebMeBackgroundTasksIdGetWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Polls the status of a tasks
   * Gives you the status and info of a submitted background task
   * @param id Unique id of the background tasks (required)
   * @return ApiResponse&lt;UploadStatus&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UploadStatus> fotowebMeBackgroundTasksIdGetWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebMeBackgroundTasksIdGetRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebMeBackgroundTasksIdGet", localVarResponse);
        }
        return new ApiResponse<UploadStatus>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UploadStatus>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebMeBackgroundTasksIdGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling fotowebMeBackgroundTasksIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/me/background-tasks/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.task-status+json, application/vnd.fotoware.upload-status+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Triggers a background task that runs an operation on an asset
   * FotoWeb uses a system of background tasks for some user-triggered operations. These operations cannot be run in a normal request handler as they would take too long time to finish. These operations include: Download | Metadata updates | Actions and marker actions | General File operations (move, copy, rotate etc) | Upload 
   * @param metadataEditRequest  (optional)
   * @return MetadataEditResponse
   * @throws ApiException if fails to make API call
   */
  public MetadataEditResponse fotowebMeBackgroundTasksPost(MetadataEditRequest metadataEditRequest) throws ApiException {
    ApiResponse<MetadataEditResponse> localVarResponse = fotowebMeBackgroundTasksPostWithHttpInfo(metadataEditRequest);
    return localVarResponse.getData();
  }

  /**
   * Triggers a background task that runs an operation on an asset
   * FotoWeb uses a system of background tasks for some user-triggered operations. These operations cannot be run in a normal request handler as they would take too long time to finish. These operations include: Download | Metadata updates | Actions and marker actions | General File operations (move, copy, rotate etc) | Upload 
   * @param metadataEditRequest  (optional)
   * @return ApiResponse&lt;MetadataEditResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MetadataEditResponse> fotowebMeBackgroundTasksPostWithHttpInfo(MetadataEditRequest metadataEditRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebMeBackgroundTasksPostRequestBuilder(metadataEditRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebMeBackgroundTasksPost", localVarResponse);
        }
        return new ApiResponse<MetadataEditResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MetadataEditResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebMeBackgroundTasksPostRequestBuilder(MetadataEditRequest metadataEditRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/me/background-tasks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/vnd.fotoware.metadata-edit-request+json");
    localVarRequestBuilder.header("Accept", "application/vnd.fotoware.metadata-edit-response+json, application/vnd.fotoware.action-response+json, application/vnd.fotoware.marker-response+json, application/vnd.fotoware.duplicate-response+json, application/vnd.fotoware.delete-response+json, application/vnd.fotoware.rename-response+json, application/vnd.fotoware.move-response+json, application/vnd.fotoware.copy-response+json, application/vnd.fotoware.rotate-response+json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(metadataEditRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
