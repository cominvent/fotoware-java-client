/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cominvent.fotoware.api;

import com.cominvent.fotoware.client.ApiClient;
import com.cominvent.fotoware.client.ApiException;
import com.cominvent.fotoware.client.ApiResponse;
import com.cominvent.fotoware.client.Pair;

import com.cominvent.fotoware.model.Annotation;
import com.cominvent.fotoware.model.AnnotationList;
import com.cominvent.fotoware.model.Count;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AnnotationsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AnnotationsApi() {
    this(new ApiClient());
  }

  public AnnotationsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Delete an annotation from an asset
   * 
   * @param archiveid The id of the archive. (required)
   * @param folderpath The folder path to where the asset is found. (required)
   * @param asset Asset reference. Note that the reference is without the .info postfix. (required)
   * @param annotationid The unique id of the annotation. (required)
   * @throws ApiException if fails to make API call
   */
  public void fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidDelete(String archiveid, String folderpath, String asset, String annotationid) throws ApiException {
    fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidDeleteWithHttpInfo(archiveid, folderpath, asset, annotationid);
  }

  /**
   * Delete an annotation from an asset
   * 
   * @param archiveid The id of the archive. (required)
   * @param folderpath The folder path to where the asset is found. (required)
   * @param asset Asset reference. Note that the reference is without the .info postfix. (required)
   * @param annotationid The unique id of the annotation. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidDeleteWithHttpInfo(String archiveid, String folderpath, String asset, String annotationid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidDeleteRequestBuilder(archiveid, folderpath, asset, annotationid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidDeleteRequestBuilder(String archiveid, String folderpath, String asset, String annotationid) throws ApiException {
    // verify the required parameter 'archiveid' is set
    if (archiveid == null) {
      throw new ApiException(400, "Missing the required parameter 'archiveid' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidDelete");
    }
    // verify the required parameter 'folderpath' is set
    if (folderpath == null) {
      throw new ApiException(400, "Missing the required parameter 'folderpath' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidDelete");
    }
    // verify the required parameter 'asset' is set
    if (asset == null) {
      throw new ApiException(400, "Missing the required parameter 'asset' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidDelete");
    }
    // verify the required parameter 'annotationid' is set
    if (annotationid == null) {
      throw new ApiException(400, "Missing the required parameter 'annotationid' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/archives/{archiveid}/{folderpath}/{asset}.annotations/{annotationid}"
        .replace("{archiveid}", ApiClient.urlEncode(archiveid.toString()))
        .replace("{folderpath}", ApiClient.urlEncode(folderpath.toString()))
        .replace("{asset}", ApiClient.urlEncode(asset.toString()))
        .replace("{annotationid}", ApiClient.urlEncode(annotationid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the annotation for an asset based on the annotation id
   * 
   * @param archiveid The id of the archive. (required)
   * @param folderpath The folder path to where the asset is found. (required)
   * @param asset Asset reference. Note that the reference is without the .info postfix. (required)
   * @param annotationid The unique id of the annotation. (required)
   * @return Annotation
   * @throws ApiException if fails to make API call
   */
  public Annotation fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidGet(String archiveid, String folderpath, String asset, String annotationid) throws ApiException {
    ApiResponse<Annotation> localVarResponse = fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidGetWithHttpInfo(archiveid, folderpath, asset, annotationid);
    return localVarResponse.getData();
  }

  /**
   * Get the annotation for an asset based on the annotation id
   * 
   * @param archiveid The id of the archive. (required)
   * @param folderpath The folder path to where the asset is found. (required)
   * @param asset Asset reference. Note that the reference is without the .info postfix. (required)
   * @param annotationid The unique id of the annotation. (required)
   * @return ApiResponse&lt;Annotation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Annotation> fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidGetWithHttpInfo(String archiveid, String folderpath, String asset, String annotationid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidGetRequestBuilder(archiveid, folderpath, asset, annotationid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidGet", localVarResponse);
        }
        return new ApiResponse<Annotation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Annotation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidGetRequestBuilder(String archiveid, String folderpath, String asset, String annotationid) throws ApiException {
    // verify the required parameter 'archiveid' is set
    if (archiveid == null) {
      throw new ApiException(400, "Missing the required parameter 'archiveid' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidGet");
    }
    // verify the required parameter 'folderpath' is set
    if (folderpath == null) {
      throw new ApiException(400, "Missing the required parameter 'folderpath' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidGet");
    }
    // verify the required parameter 'asset' is set
    if (asset == null) {
      throw new ApiException(400, "Missing the required parameter 'asset' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidGet");
    }
    // verify the required parameter 'annotationid' is set
    if (annotationid == null) {
      throw new ApiException(400, "Missing the required parameter 'annotationid' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/archives/{archiveid}/{folderpath}/{asset}.annotations/{annotationid}"
        .replace("{archiveid}", ApiClient.urlEncode(archiveid.toString()))
        .replace("{folderpath}", ApiClient.urlEncode(folderpath.toString()))
        .replace("{asset}", ApiClient.urlEncode(asset.toString()))
        .replace("{annotationid}", ApiClient.urlEncode(annotationid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.annotation+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Edit an annotation on an asset
   * 
   * @param archiveid The id of the archive. (required)
   * @param folderpath The folder path to where the asset is found. (required)
   * @param asset Asset reference. Note that the reference is without the .info postfix. (required)
   * @param annotationid The unique id of the annotation. (required)
   * @param annotation  (optional)
   * @throws ApiException if fails to make API call
   */
  public void fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidPatch(String archiveid, String folderpath, String asset, String annotationid, Annotation annotation) throws ApiException {
    fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidPatchWithHttpInfo(archiveid, folderpath, asset, annotationid, annotation);
  }

  /**
   * Edit an annotation on an asset
   * 
   * @param archiveid The id of the archive. (required)
   * @param folderpath The folder path to where the asset is found. (required)
   * @param asset Asset reference. Note that the reference is without the .info postfix. (required)
   * @param annotationid The unique id of the annotation. (required)
   * @param annotation  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidPatchWithHttpInfo(String archiveid, String folderpath, String asset, String annotationid, Annotation annotation) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidPatchRequestBuilder(archiveid, folderpath, asset, annotationid, annotation);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidPatch", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidPatchRequestBuilder(String archiveid, String folderpath, String asset, String annotationid, Annotation annotation) throws ApiException {
    // verify the required parameter 'archiveid' is set
    if (archiveid == null) {
      throw new ApiException(400, "Missing the required parameter 'archiveid' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidPatch");
    }
    // verify the required parameter 'folderpath' is set
    if (folderpath == null) {
      throw new ApiException(400, "Missing the required parameter 'folderpath' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidPatch");
    }
    // verify the required parameter 'asset' is set
    if (asset == null) {
      throw new ApiException(400, "Missing the required parameter 'asset' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidPatch");
    }
    // verify the required parameter 'annotationid' is set
    if (annotationid == null) {
      throw new ApiException(400, "Missing the required parameter 'annotationid' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsAnnotationidPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/archives/{archiveid}/{folderpath}/{asset}.annotations/{annotationid}"
        .replace("{archiveid}", ApiClient.urlEncode(archiveid.toString()))
        .replace("{folderpath}", ApiClient.urlEncode(folderpath.toString()))
        .replace("{asset}", ApiClient.urlEncode(asset.toString()))
        .replace("{annotationid}", ApiClient.urlEncode(annotationid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(annotation);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all the annotations for an asset
   * 
   * @param archiveid The id of the archive. (required)
   * @param folderpath The folder path to where the asset is found. (required)
   * @param asset Asset reference. Note that the reference is without the .info postfix. (required)
   * @return AnnotationList
   * @throws ApiException if fails to make API call
   */
  public AnnotationList fotowebArchivesArchiveidFolderpathAssetAnnotationsGet(String archiveid, String folderpath, String asset) throws ApiException {
    ApiResponse<AnnotationList> localVarResponse = fotowebArchivesArchiveidFolderpathAssetAnnotationsGetWithHttpInfo(archiveid, folderpath, asset);
    return localVarResponse.getData();
  }

  /**
   * Get all the annotations for an asset
   * 
   * @param archiveid The id of the archive. (required)
   * @param folderpath The folder path to where the asset is found. (required)
   * @param asset Asset reference. Note that the reference is without the .info postfix. (required)
   * @return ApiResponse&lt;AnnotationList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AnnotationList> fotowebArchivesArchiveidFolderpathAssetAnnotationsGetWithHttpInfo(String archiveid, String folderpath, String asset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebArchivesArchiveidFolderpathAssetAnnotationsGetRequestBuilder(archiveid, folderpath, asset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebArchivesArchiveidFolderpathAssetAnnotationsGet", localVarResponse);
        }
        return new ApiResponse<AnnotationList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AnnotationList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebArchivesArchiveidFolderpathAssetAnnotationsGetRequestBuilder(String archiveid, String folderpath, String asset) throws ApiException {
    // verify the required parameter 'archiveid' is set
    if (archiveid == null) {
      throw new ApiException(400, "Missing the required parameter 'archiveid' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsGet");
    }
    // verify the required parameter 'folderpath' is set
    if (folderpath == null) {
      throw new ApiException(400, "Missing the required parameter 'folderpath' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsGet");
    }
    // verify the required parameter 'asset' is set
    if (asset == null) {
      throw new ApiException(400, "Missing the required parameter 'asset' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/archives/{archiveid}/{folderpath}/{asset}.annotations/"
        .replace("{archiveid}", ApiClient.urlEncode(archiveid.toString()))
        .replace("{folderpath}", ApiClient.urlEncode(folderpath.toString()))
        .replace("{asset}", ApiClient.urlEncode(asset.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.annotation-list+json, application/vnd.fotoware.count+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add a new annotation for an asset
   * 
   * @param archiveid The id of the archive. (required)
   * @param folderpath The folder path to where the asset is found. (required)
   * @param asset Asset reference. Note that the reference is without the .info postfix. (required)
   * @param annotation  (optional)
   * @return Annotation
   * @throws ApiException if fails to make API call
   */
  public Annotation fotowebArchivesArchiveidFolderpathAssetAnnotationsPost(String archiveid, String folderpath, String asset, Annotation annotation) throws ApiException {
    ApiResponse<Annotation> localVarResponse = fotowebArchivesArchiveidFolderpathAssetAnnotationsPostWithHttpInfo(archiveid, folderpath, asset, annotation);
    return localVarResponse.getData();
  }

  /**
   * Add a new annotation for an asset
   * 
   * @param archiveid The id of the archive. (required)
   * @param folderpath The folder path to where the asset is found. (required)
   * @param asset Asset reference. Note that the reference is without the .info postfix. (required)
   * @param annotation  (optional)
   * @return ApiResponse&lt;Annotation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Annotation> fotowebArchivesArchiveidFolderpathAssetAnnotationsPostWithHttpInfo(String archiveid, String folderpath, String asset, Annotation annotation) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebArchivesArchiveidFolderpathAssetAnnotationsPostRequestBuilder(archiveid, folderpath, asset, annotation);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebArchivesArchiveidFolderpathAssetAnnotationsPost", localVarResponse);
        }
        return new ApiResponse<Annotation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Annotation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebArchivesArchiveidFolderpathAssetAnnotationsPostRequestBuilder(String archiveid, String folderpath, String asset, Annotation annotation) throws ApiException {
    // verify the required parameter 'archiveid' is set
    if (archiveid == null) {
      throw new ApiException(400, "Missing the required parameter 'archiveid' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsPost");
    }
    // verify the required parameter 'folderpath' is set
    if (folderpath == null) {
      throw new ApiException(400, "Missing the required parameter 'folderpath' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsPost");
    }
    // verify the required parameter 'asset' is set
    if (asset == null) {
      throw new ApiException(400, "Missing the required parameter 'asset' when calling fotowebArchivesArchiveidFolderpathAssetAnnotationsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/archives/{archiveid}/{folderpath}/{asset}.annotations/"
        .replace("{archiveid}", ApiClient.urlEncode(archiveid.toString()))
        .replace("{folderpath}", ApiClient.urlEncode(folderpath.toString()))
        .replace("{asset}", ApiClient.urlEncode(asset.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.annotation+json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(annotation);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
