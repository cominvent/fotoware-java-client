/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cominvent.fotoware.api;

import com.cominvent.fotoware.client.ApiClient;
import com.cominvent.fotoware.client.ApiException;
import com.cominvent.fotoware.client.ApiResponse;
import com.cominvent.fotoware.client.Pair;

import com.cominvent.fotoware.model.Asset;
import com.cominvent.fotoware.model.MetadataView;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-20T14:14:21.267957+01:00[Europe/Oslo]")
public class AssetsAndMetadataApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AssetsAndMetadataApi() {
    this(new ApiClient());
  }

  public AssetsAndMetadataApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get a metadata view representation
   * Pass in the metadata view id to get the full representation of the view
   * @param viewid Unique ID of the metadata view (required)
   * @return MetadataView
   * @throws ApiException if fails to make API call
   * Metadata Views
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Metadata_Views">Get a metadata view representation Documentation</a>
   */
  public MetadataView fotowebEditorsViewidGet(String viewid) throws ApiException {
    ApiResponse<MetadataView> localVarResponse = fotowebEditorsViewidGetWithHttpInfo(viewid);
    return localVarResponse.getData();
  }

  /**
   * Get a metadata view representation
   * Pass in the metadata view id to get the full representation of the view
   * @param viewid Unique ID of the metadata view (required)
   * @return ApiResponse&lt;MetadataView&gt;
   * @throws ApiException if fails to make API call
   * Metadata Views
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Metadata_Views">Get a metadata view representation Documentation</a>
   */
  public ApiResponse<MetadataView> fotowebEditorsViewidGetWithHttpInfo(String viewid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebEditorsViewidGetRequestBuilder(viewid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebEditorsViewidGet", localVarResponse);
        }
        return new ApiResponse<MetadataView>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MetadataView>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebEditorsViewidGetRequestBuilder(String viewid) throws ApiException {
    // verify the required parameter 'viewid' is set
    if (viewid == null) {
      throw new ApiException(400, "Missing the required parameter 'viewid' when calling fotowebEditorsViewidGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/editors/{viewid}"
        .replace("{viewid}", ApiClient.urlEncode(viewid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.metadata-set+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the json representation of an asset
   * All asset resources have this representation. This includes assets in all kinds of collections, such as archives, albums and search results. Information returned about an asset may vary depending on the user that is making the request. In particular, the permissions and previews fields may contain different values for different users. They reflect the permissions that the requesting user has on the asset and the types of previews (size, watermarked or not watermarked, etc.) that are available to that user. The doctype field determines what subsections are present in the attributes section. For example, if the doctype is \&quot;image\&quot;, then attributes.imageattributes is always present. However, it is recommended to explicitly check for presence of these subsections instead whenever they are used 
   * @param archiveid Unique ID of the archive (required)
   * @param folderid Unique ID of the folder (required)
   * @param asset Unique asset (required)
   * @return Asset
   * @throws ApiException if fails to make API call
   */
  public Asset getAssetDetails(String archiveid, String folderid, String asset) throws ApiException {
    ApiResponse<Asset> localVarResponse = getAssetDetailsWithHttpInfo(archiveid, folderid, asset);
    return localVarResponse.getData();
  }

  /**
   * Get the json representation of an asset
   * All asset resources have this representation. This includes assets in all kinds of collections, such as archives, albums and search results. Information returned about an asset may vary depending on the user that is making the request. In particular, the permissions and previews fields may contain different values for different users. They reflect the permissions that the requesting user has on the asset and the types of previews (size, watermarked or not watermarked, etc.) that are available to that user. The doctype field determines what subsections are present in the attributes section. For example, if the doctype is \&quot;image\&quot;, then attributes.imageattributes is always present. However, it is recommended to explicitly check for presence of these subsections instead whenever they are used 
   * @param archiveid Unique ID of the archive (required)
   * @param folderid Unique ID of the folder (required)
   * @param asset Unique asset (required)
   * @return ApiResponse&lt;Asset&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Asset> getAssetDetailsWithHttpInfo(String archiveid, String folderid, String asset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAssetDetailsRequestBuilder(archiveid, folderid, asset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAssetDetails", localVarResponse);
        }
        return new ApiResponse<Asset>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Asset>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAssetDetailsRequestBuilder(String archiveid, String folderid, String asset) throws ApiException {
    // verify the required parameter 'archiveid' is set
    if (archiveid == null) {
      throw new ApiException(400, "Missing the required parameter 'archiveid' when calling getAssetDetails");
    }
    // verify the required parameter 'folderid' is set
    if (folderid == null) {
      throw new ApiException(400, "Missing the required parameter 'folderid' when calling getAssetDetails");
    }
    // verify the required parameter 'asset' is set
    if (asset == null) {
      throw new ApiException(400, "Missing the required parameter 'asset' when calling getAssetDetails");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/archives/{archiveid}/{folderid}/{asset}"
        .replace("{archiveid}", ApiClient.urlEncode(archiveid.toString()))
        .replace("{folderid}", ApiClient.urlEncode(folderid.toString()))
        .replace("{asset}", ApiClient.urlEncode(asset.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.asset+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update metadata on an asset
   * Use patch on an asset to update the metadata. The metadata to update is defined in the request body. Required permissions - Edit Metadata on the archive containing the asset.
   * @param archiveid Unique ID of the archive (required)
   * @param folderid Unique ID of the folder (required)
   * @param asset Unique asset (required)
   * @param body  (optional)
   * @return Asset
   * @throws ApiException if fails to make API call
   * Updating metadata on an asset
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Updating_metadata_on_an_asset">Update metadata on an asset Documentation</a>
   */
  public Asset patchMetadata(String archiveid, String folderid, String asset, Object body) throws ApiException {
    ApiResponse<Asset> localVarResponse = patchMetadataWithHttpInfo(archiveid, folderid, asset, body);
    return localVarResponse.getData();
  }

  /**
   * Update metadata on an asset
   * Use patch on an asset to update the metadata. The metadata to update is defined in the request body. Required permissions - Edit Metadata on the archive containing the asset.
   * @param archiveid Unique ID of the archive (required)
   * @param folderid Unique ID of the folder (required)
   * @param asset Unique asset (required)
   * @param body  (optional)
   * @return ApiResponse&lt;Asset&gt;
   * @throws ApiException if fails to make API call
   * Updating metadata on an asset
   * @see <a href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Updating_metadata_on_an_asset">Update metadata on an asset Documentation</a>
   */
  public ApiResponse<Asset> patchMetadataWithHttpInfo(String archiveid, String folderid, String asset, Object body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchMetadataRequestBuilder(archiveid, folderid, asset, body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchMetadata", localVarResponse);
        }
        return new ApiResponse<Asset>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Asset>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchMetadataRequestBuilder(String archiveid, String folderid, String asset, Object body) throws ApiException {
    // verify the required parameter 'archiveid' is set
    if (archiveid == null) {
      throw new ApiException(400, "Missing the required parameter 'archiveid' when calling patchMetadata");
    }
    // verify the required parameter 'folderid' is set
    if (folderid == null) {
      throw new ApiException(400, "Missing the required parameter 'folderid' when calling patchMetadata");
    }
    // verify the required parameter 'asset' is set
    if (asset == null) {
      throw new ApiException(400, "Missing the required parameter 'asset' when calling patchMetadata");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/archives/{archiveid}/{folderid}/{asset}"
        .replace("{archiveid}", ApiClient.urlEncode(archiveid.toString()))
        .replace("{folderid}", ApiClient.urlEncode(folderid.toString()))
        .replace("{asset}", ApiClient.urlEncode(asset.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/vnd.fotoware.assetupdate+json");
    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.asset+json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
