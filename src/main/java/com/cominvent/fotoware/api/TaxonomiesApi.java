/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cominvent.fotoware.api;

import com.cominvent.fotoware.client.ApiClient;
import com.cominvent.fotoware.client.ApiException;
import com.cominvent.fotoware.client.ApiResponse;
import com.cominvent.fotoware.client.Pair;

import com.cominvent.fotoware.model.Taxonomy;
import com.cominvent.fotoware.model.TaxonomyCreationInfo;
import com.cominvent.fotoware.model.TaxonomyInfo;
import com.cominvent.fotoware.model.TaxonomyItem;
import com.cominvent.fotoware.model.TaxonomyItemCreationInfo;
import com.cominvent.fotoware.model.TaxonomyItemInfo;
import com.cominvent.fotoware.model.TaxonomyItemList;
import com.cominvent.fotoware.model.TaxonomyItemUpdate;
import com.cominvent.fotoware.model.TaxonomyList;
import com.cominvent.fotoware.model.TaxonomyUpdate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TaxonomiesApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public TaxonomiesApi() {
    this(new ApiClient());
  }

  public TaxonomiesApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get all the taxonomies for an archive
   * Returns a list of taxonomy fields with root items for the archive id that is passed as a parameter. 
   * @param archiveID Numeric ID of the archive (required)
   * @return List&lt;Taxonomy&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Taxonomy> fotowebApiTaxonomiesArchivesArchiveIDGet(Integer archiveID) throws ApiException {
    ApiResponse<List<Taxonomy>> localVarResponse = fotowebApiTaxonomiesArchivesArchiveIDGetWithHttpInfo(archiveID);
    return localVarResponse.getData();
  }

  /**
   * Get all the taxonomies for an archive
   * Returns a list of taxonomy fields with root items for the archive id that is passed as a parameter. 
   * @param archiveID Numeric ID of the archive (required)
   * @return ApiResponse&lt;List&lt;Taxonomy&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Taxonomy>> fotowebApiTaxonomiesArchivesArchiveIDGetWithHttpInfo(Integer archiveID) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesArchivesArchiveIDGetRequestBuilder(archiveID);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesArchivesArchiveIDGet", localVarResponse);
        }
        return new ApiResponse<List<Taxonomy>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Taxonomy>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesArchivesArchiveIDGetRequestBuilder(Integer archiveID) throws ApiException {
    // verify the required parameter 'archiveID' is set
    if (archiveID == null) {
      throw new ApiException(400, "Missing the required parameter 'archiveID' when calling fotowebApiTaxonomiesArchivesArchiveIDGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/archives/{archiveID}"
        .replace("{archiveID}", ApiClient.urlEncode(archiveID.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a taxonomy
   * 
   * @param fieldId Numeric ID of the metadata field (required)
   * @throws ApiException if fails to make API call
   */
  public void fotowebApiTaxonomiesFieldIdDelete(Integer fieldId) throws ApiException {
    fotowebApiTaxonomiesFieldIdDeleteWithHttpInfo(fieldId);
  }

  /**
   * Delete a taxonomy
   * 
   * @param fieldId Numeric ID of the metadata field (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> fotowebApiTaxonomiesFieldIdDeleteWithHttpInfo(Integer fieldId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesFieldIdDeleteRequestBuilder(fieldId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesFieldIdDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesFieldIdDeleteRequestBuilder(Integer fieldId) throws ApiException {
    // verify the required parameter 'fieldId' is set
    if (fieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldId' when calling fotowebApiTaxonomiesFieldIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/{fieldId}/"
        .replace("{fieldId}", ApiClient.urlEncode(fieldId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get taxonomy of a metadata field, list root items
   * Returns the description of the taxonomy and/or a paged list of top level items in the taxonomy.  The page URLs of this paged list can also be obtained from the paging information of each page.  If a paging parameter is specified, then this request always returns a taxonomy item list, and other content types are not acceptable. 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param q Query string (optional)
   * @return Taxonomy
   * @throws ApiException if fails to make API call
   */
  public Taxonomy fotowebApiTaxonomiesFieldIdGet(Integer fieldId, String q) throws ApiException {
    ApiResponse<Taxonomy> localVarResponse = fotowebApiTaxonomiesFieldIdGetWithHttpInfo(fieldId, q);
    return localVarResponse.getData();
  }

  /**
   * Get taxonomy of a metadata field, list root items
   * Returns the description of the taxonomy and/or a paged list of top level items in the taxonomy.  The page URLs of this paged list can also be obtained from the paging information of each page.  If a paging parameter is specified, then this request always returns a taxonomy item list, and other content types are not acceptable. 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param q Query string (optional)
   * @return ApiResponse&lt;Taxonomy&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Taxonomy> fotowebApiTaxonomiesFieldIdGetWithHttpInfo(Integer fieldId, String q) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesFieldIdGetRequestBuilder(fieldId, q);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesFieldIdGet", localVarResponse);
        }
        return new ApiResponse<Taxonomy>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Taxonomy>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesFieldIdGetRequestBuilder(Integer fieldId, String q) throws ApiException {
    // verify the required parameter 'fieldId' is set
    if (fieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldId' when calling fotowebApiTaxonomiesFieldIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/{fieldId}/"
        .replace("{fieldId}", ApiClient.urlEncode(fieldId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "q";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.taxonomy+json, application/vnd.fotoware.taxonomy-info+json, application/vnd.fotoware.taxonomy-item-list+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a taxonomy item
   * 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param itemId Unique ID of the taxonomy item (required)
   * @throws ApiException if fails to make API call
   */
  public void fotowebApiTaxonomiesFieldIdItemIdDelete(Integer fieldId, String itemId) throws ApiException {
    fotowebApiTaxonomiesFieldIdItemIdDeleteWithHttpInfo(fieldId, itemId);
  }

  /**
   * Delete a taxonomy item
   * 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param itemId Unique ID of the taxonomy item (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> fotowebApiTaxonomiesFieldIdItemIdDeleteWithHttpInfo(Integer fieldId, String itemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesFieldIdItemIdDeleteRequestBuilder(fieldId, itemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesFieldIdItemIdDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesFieldIdItemIdDeleteRequestBuilder(Integer fieldId, String itemId) throws ApiException {
    // verify the required parameter 'fieldId' is set
    if (fieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldId' when calling fotowebApiTaxonomiesFieldIdItemIdDelete");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling fotowebApiTaxonomiesFieldIdItemIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/{fieldId}/{itemId}"
        .replace("{fieldId}", ApiClient.urlEncode(fieldId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get taxonomy item and list children
   * Returns the description of the taxonomy item and a paged list of child items. 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param itemId Unique ID of the taxonomy item (required)
   * @return TaxonomyItem
   * @throws ApiException if fails to make API call
   */
  public TaxonomyItem fotowebApiTaxonomiesFieldIdItemIdGet(Integer fieldId, String itemId) throws ApiException {
    ApiResponse<TaxonomyItem> localVarResponse = fotowebApiTaxonomiesFieldIdItemIdGetWithHttpInfo(fieldId, itemId);
    return localVarResponse.getData();
  }

  /**
   * Get taxonomy item and list children
   * Returns the description of the taxonomy item and a paged list of child items. 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param itemId Unique ID of the taxonomy item (required)
   * @return ApiResponse&lt;TaxonomyItem&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TaxonomyItem> fotowebApiTaxonomiesFieldIdItemIdGetWithHttpInfo(Integer fieldId, String itemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesFieldIdItemIdGetRequestBuilder(fieldId, itemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesFieldIdItemIdGet", localVarResponse);
        }
        return new ApiResponse<TaxonomyItem>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TaxonomyItem>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesFieldIdItemIdGetRequestBuilder(Integer fieldId, String itemId) throws ApiException {
    // verify the required parameter 'fieldId' is set
    if (fieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldId' when calling fotowebApiTaxonomiesFieldIdItemIdGet");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling fotowebApiTaxonomiesFieldIdItemIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/{fieldId}/{itemId}"
        .replace("{fieldId}", ApiClient.urlEncode(fieldId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.taxonomy-item+json, application/vnd.fotoware.taxonomy-item-info+json, application/vnd.fotoware.taxonomy-item-list+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new taxonomy item under an existing item
   * 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param itemId Unique ID of the taxonomy item (required)
   * @param taxonomyItemCreationInfo  (optional)
   * @throws ApiException if fails to make API call
   */
  public void fotowebApiTaxonomiesFieldIdItemIdPost(Integer fieldId, String itemId, TaxonomyItemCreationInfo taxonomyItemCreationInfo) throws ApiException {
    fotowebApiTaxonomiesFieldIdItemIdPostWithHttpInfo(fieldId, itemId, taxonomyItemCreationInfo);
  }

  /**
   * Create a new taxonomy item under an existing item
   * 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param itemId Unique ID of the taxonomy item (required)
   * @param taxonomyItemCreationInfo  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> fotowebApiTaxonomiesFieldIdItemIdPostWithHttpInfo(Integer fieldId, String itemId, TaxonomyItemCreationInfo taxonomyItemCreationInfo) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesFieldIdItemIdPostRequestBuilder(fieldId, itemId, taxonomyItemCreationInfo);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesFieldIdItemIdPost", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesFieldIdItemIdPostRequestBuilder(Integer fieldId, String itemId, TaxonomyItemCreationInfo taxonomyItemCreationInfo) throws ApiException {
    // verify the required parameter 'fieldId' is set
    if (fieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldId' when calling fotowebApiTaxonomiesFieldIdItemIdPost");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling fotowebApiTaxonomiesFieldIdItemIdPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/{fieldId}/{itemId}"
        .replace("{fieldId}", ApiClient.urlEncode(fieldId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(taxonomyItemCreationInfo);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a taxonomy item and list its children
   * Returns the description of the taxonomy item and a paged list of its child items. The URLs of this paged list can also be obtained from the paging information in the result. 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param itemId Unique ID of the taxonomy item (required)
   * @param p Page Number (required)
   * @return TaxonomyItem
   * @throws ApiException if fails to make API call
   */
  public TaxonomyItem fotowebApiTaxonomiesFieldIdItemIdPpGet(Integer fieldId, String itemId, Integer p) throws ApiException {
    ApiResponse<TaxonomyItem> localVarResponse = fotowebApiTaxonomiesFieldIdItemIdPpGetWithHttpInfo(fieldId, itemId, p);
    return localVarResponse.getData();
  }

  /**
   * Get a taxonomy item and list its children
   * Returns the description of the taxonomy item and a paged list of its child items. The URLs of this paged list can also be obtained from the paging information in the result. 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param itemId Unique ID of the taxonomy item (required)
   * @param p Page Number (required)
   * @return ApiResponse&lt;TaxonomyItem&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TaxonomyItem> fotowebApiTaxonomiesFieldIdItemIdPpGetWithHttpInfo(Integer fieldId, String itemId, Integer p) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesFieldIdItemIdPpGetRequestBuilder(fieldId, itemId, p);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesFieldIdItemIdPpGet", localVarResponse);
        }
        return new ApiResponse<TaxonomyItem>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TaxonomyItem>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesFieldIdItemIdPpGetRequestBuilder(Integer fieldId, String itemId, Integer p) throws ApiException {
    // verify the required parameter 'fieldId' is set
    if (fieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldId' when calling fotowebApiTaxonomiesFieldIdItemIdPpGet");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling fotowebApiTaxonomiesFieldIdItemIdPpGet");
    }
    // verify the required parameter 'p' is set
    if (p == null) {
      throw new ApiException(400, "Missing the required parameter 'p' when calling fotowebApiTaxonomiesFieldIdItemIdPpGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/{fieldId}/{itemId}/;p={p}"
        .replace("{fieldId}", ApiClient.urlEncode(fieldId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{p}", ApiClient.urlEncode(p.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.taxonomy-item+json, application/vnd.fotoware.taxonomy-item-info+json, application/vnd.fotoware.taxonomy-item-list+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update the description of a taxonomy item
   * 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param itemId Unique ID of the taxonomy item (required)
   * @param taxonomyItemUpdate  (optional)
   * @throws ApiException if fails to make API call
   */
  public void fotowebApiTaxonomiesFieldIdItemIdPut(Integer fieldId, String itemId, TaxonomyItemUpdate taxonomyItemUpdate) throws ApiException {
    fotowebApiTaxonomiesFieldIdItemIdPutWithHttpInfo(fieldId, itemId, taxonomyItemUpdate);
  }

  /**
   * Update the description of a taxonomy item
   * 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param itemId Unique ID of the taxonomy item (required)
   * @param taxonomyItemUpdate  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> fotowebApiTaxonomiesFieldIdItemIdPutWithHttpInfo(Integer fieldId, String itemId, TaxonomyItemUpdate taxonomyItemUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesFieldIdItemIdPutRequestBuilder(fieldId, itemId, taxonomyItemUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesFieldIdItemIdPut", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesFieldIdItemIdPutRequestBuilder(Integer fieldId, String itemId, TaxonomyItemUpdate taxonomyItemUpdate) throws ApiException {
    // verify the required parameter 'fieldId' is set
    if (fieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldId' when calling fotowebApiTaxonomiesFieldIdItemIdPut");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling fotowebApiTaxonomiesFieldIdItemIdPut");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/{fieldId}/{itemId}"
        .replace("{fieldId}", ApiClient.urlEncode(fieldId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(taxonomyItemUpdate);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new taxonomy item at the root of the taxonomy
   * 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param taxonomyItemCreationInfo  (optional)
   * @throws ApiException if fails to make API call
   */
  public void fotowebApiTaxonomiesFieldIdPost(Integer fieldId, TaxonomyItemCreationInfo taxonomyItemCreationInfo) throws ApiException {
    fotowebApiTaxonomiesFieldIdPostWithHttpInfo(fieldId, taxonomyItemCreationInfo);
  }

  /**
   * Create a new taxonomy item at the root of the taxonomy
   * 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param taxonomyItemCreationInfo  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> fotowebApiTaxonomiesFieldIdPostWithHttpInfo(Integer fieldId, TaxonomyItemCreationInfo taxonomyItemCreationInfo) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesFieldIdPostRequestBuilder(fieldId, taxonomyItemCreationInfo);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesFieldIdPost", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesFieldIdPostRequestBuilder(Integer fieldId, TaxonomyItemCreationInfo taxonomyItemCreationInfo) throws ApiException {
    // verify the required parameter 'fieldId' is set
    if (fieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldId' when calling fotowebApiTaxonomiesFieldIdPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/{fieldId}/"
        .replace("{fieldId}", ApiClient.urlEncode(fieldId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(taxonomyItemCreationInfo);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get taxonomy of a metadata field, list root items
   * Returns the description of the taxonomy and/or a paged list of top level items in the taxonomy.  The page URLs of this paged list can also be obtained from the paging information of each page.  If a paging parameter is specified,then this request always returns a taxonomy item list, and other content types are not acceptable. 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param p Page Number (required)
   * @param q Query string (optional)
   * @return Taxonomy
   * @throws ApiException if fails to make API call
   */
  public Taxonomy fotowebApiTaxonomiesFieldIdPpGet(Integer fieldId, Integer p, String q) throws ApiException {
    ApiResponse<Taxonomy> localVarResponse = fotowebApiTaxonomiesFieldIdPpGetWithHttpInfo(fieldId, p, q);
    return localVarResponse.getData();
  }

  /**
   * Get taxonomy of a metadata field, list root items
   * Returns the description of the taxonomy and/or a paged list of top level items in the taxonomy.  The page URLs of this paged list can also be obtained from the paging information of each page.  If a paging parameter is specified,then this request always returns a taxonomy item list, and other content types are not acceptable. 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param p Page Number (required)
   * @param q Query string (optional)
   * @return ApiResponse&lt;Taxonomy&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Taxonomy> fotowebApiTaxonomiesFieldIdPpGetWithHttpInfo(Integer fieldId, Integer p, String q) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesFieldIdPpGetRequestBuilder(fieldId, p, q);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesFieldIdPpGet", localVarResponse);
        }
        return new ApiResponse<Taxonomy>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Taxonomy>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesFieldIdPpGetRequestBuilder(Integer fieldId, Integer p, String q) throws ApiException {
    // verify the required parameter 'fieldId' is set
    if (fieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldId' when calling fotowebApiTaxonomiesFieldIdPpGet");
    }
    // verify the required parameter 'p' is set
    if (p == null) {
      throw new ApiException(400, "Missing the required parameter 'p' when calling fotowebApiTaxonomiesFieldIdPpGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/{fieldId}/;p={p}"
        .replace("{fieldId}", ApiClient.urlEncode(fieldId.toString()))
        .replace("{p}", ApiClient.urlEncode(p.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "q";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.taxonomy+json, application/vnd.fotoware.taxonomy-info+json, application/vnd.fotoware.taxonomy-item-list+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a taxonomy field
   * 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param taxonomyUpdate  (optional)
   * @throws ApiException if fails to make API call
   */
  public void fotowebApiTaxonomiesFieldIdPut(Integer fieldId, TaxonomyUpdate taxonomyUpdate) throws ApiException {
    fotowebApiTaxonomiesFieldIdPutWithHttpInfo(fieldId, taxonomyUpdate);
  }

  /**
   * Update a taxonomy field
   * 
   * @param fieldId Numeric ID of the metadata field (required)
   * @param taxonomyUpdate  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> fotowebApiTaxonomiesFieldIdPutWithHttpInfo(Integer fieldId, TaxonomyUpdate taxonomyUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesFieldIdPutRequestBuilder(fieldId, taxonomyUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesFieldIdPut", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesFieldIdPutRequestBuilder(Integer fieldId, TaxonomyUpdate taxonomyUpdate) throws ApiException {
    // verify the required parameter 'fieldId' is set
    if (fieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldId' when calling fotowebApiTaxonomiesFieldIdPut");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/{fieldId}/"
        .replace("{fieldId}", ApiClient.urlEncode(fieldId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(taxonomyUpdate);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List all fields with taxonomy enabled
   * A paged list of taxononmies is returned. The list has one item for each metadata field with taxonomy enabled. The page URLs of this paged list can be obtained from the paging information in the result. 
   * @return TaxonomyList
   * @throws ApiException if fails to make API call
   */
  public TaxonomyList fotowebApiTaxonomiesGet() throws ApiException {
    ApiResponse<TaxonomyList> localVarResponse = fotowebApiTaxonomiesGetWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List all fields with taxonomy enabled
   * A paged list of taxononmies is returned. The list has one item for each metadata field with taxonomy enabled. The page URLs of this paged list can be obtained from the paging information in the result. 
   * @return ApiResponse&lt;TaxonomyList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TaxonomyList> fotowebApiTaxonomiesGetWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesGetRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesGet", localVarResponse);
        }
        return new ApiResponse<TaxonomyList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TaxonomyList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesGetRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.taxonomy-list+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a taxonomy item list by passing in an item id list
   * 
   * @param requestBody  (optional
   * @return List&lt;TaxonomyItem&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TaxonomyItem> fotowebApiTaxonomiesInfoPost(List<String> requestBody) throws ApiException {
    ApiResponse<List<TaxonomyItem>> localVarResponse = fotowebApiTaxonomiesInfoPostWithHttpInfo(requestBody);
    return localVarResponse.getData();
  }

  /**
   * Get a taxonomy item list by passing in an item id list
   * 
   * @param requestBody  (optional
   * @return ApiResponse&lt;List&lt;TaxonomyItem&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<TaxonomyItem>> fotowebApiTaxonomiesInfoPostWithHttpInfo(List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesInfoPostRequestBuilder(requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesInfoPost", localVarResponse);
        }
        return new ApiResponse<List<TaxonomyItem>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<TaxonomyItem>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesInfoPostRequestBuilder(List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/info";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new taxonomy
   * Creates a new taxonomy and enables the taxonomy for a field. The url to the new taxonomy is returned in the Location header in the response. 
   * @param taxonomyCreationInfo  (optional)
   * @throws ApiException if fails to make API call
   */
  public void fotowebApiTaxonomiesPost(TaxonomyCreationInfo taxonomyCreationInfo) throws ApiException {
    fotowebApiTaxonomiesPostWithHttpInfo(taxonomyCreationInfo);
  }

  /**
   * Create a new taxonomy
   * Creates a new taxonomy and enables the taxonomy for a field. The url to the new taxonomy is returned in the Location header in the response. 
   * @param taxonomyCreationInfo  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> fotowebApiTaxonomiesPostWithHttpInfo(TaxonomyCreationInfo taxonomyCreationInfo) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesPostRequestBuilder(taxonomyCreationInfo);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesPost", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesPostRequestBuilder(TaxonomyCreationInfo taxonomyCreationInfo) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(taxonomyCreationInfo);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List all fields with taxonomy enabled
   * This request returns a paged list of taxonomies with one item for each metadata field for which taxonomy is enabled. The page URLs of this paged list can also be obtained from the paging information of each page. 
   * @param p Page Number (required)
   * @return TaxonomyList
   * @throws ApiException if fails to make API call
   */
  public TaxonomyList fotowebApiTaxonomiesPpGet(Integer p) throws ApiException {
    ApiResponse<TaxonomyList> localVarResponse = fotowebApiTaxonomiesPpGetWithHttpInfo(p);
    return localVarResponse.getData();
  }

  /**
   * List all fields with taxonomy enabled
   * This request returns a paged list of taxonomies with one item for each metadata field for which taxonomy is enabled. The page URLs of this paged list can also be obtained from the paging information of each page. 
   * @param p Page Number (required)
   * @return ApiResponse&lt;TaxonomyList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TaxonomyList> fotowebApiTaxonomiesPpGetWithHttpInfo(Integer p) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fotowebApiTaxonomiesPpGetRequestBuilder(p);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("fotowebApiTaxonomiesPpGet", localVarResponse);
        }
        return new ApiResponse<TaxonomyList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TaxonomyList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fotowebApiTaxonomiesPpGetRequestBuilder(Integer p) throws ApiException {
    // verify the required parameter 'p' is set
    if (p == null) {
      throw new ApiException(400, "Missing the required parameter 'p' when calling fotowebApiTaxonomiesPpGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/taxonomies/;p={p}"
        .replace("{p}", ApiClient.urlEncode(p.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/vnd.fotoware.taxonomy-list+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
