/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cominvent.fotoware.api;

import com.cominvent.fotoware.client.ApiClient;
import com.cominvent.fotoware.client.ApiException;
import com.cominvent.fotoware.client.ApiResponse;
import com.cominvent.fotoware.client.Pair;

import com.cominvent.fotoware.model.ExternalId;
import com.cominvent.fotoware.model.Group;
import com.cominvent.fotoware.model.MemberIdListModel;
import com.cominvent.fotoware.model.MemberProperty;
import com.cominvent.fotoware.model.MembershipIdListModel;
import java.util.UUID;
import com.cominvent.fotoware.model.User;
import com.cominvent.fotoware.model.ValueModelInteger;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-20T14:14:21.267957+01:00[Europe/Oslo]")
public class GroupManagementBetaApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public GroupManagementBetaApi() {
    this(new ApiClient());
  }

  public GroupManagementBetaApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Add groups to the given group
   * 
   * @param id ID of the group (required)
   * @param members IDs of members (required)
   * @throws ApiException if fails to make API call
   */
  public void groupAddGroupGroupMembers(Integer id, MemberIdListModel members) throws ApiException {
    groupAddGroupGroupMembersWithHttpInfo(id, members);
  }

  /**
   * Add groups to the given group
   * 
   * @param id ID of the group (required)
   * @param members IDs of members (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupAddGroupGroupMembersWithHttpInfo(Integer id, MemberIdListModel members) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupAddGroupGroupMembersRequestBuilder(id, members);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupAddGroupGroupMembers", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupAddGroupGroupMembersRequestBuilder(Integer id, MemberIdListModel members) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupAddGroupGroupMembers");
    }
    // verify the required parameter 'members' is set
    if (members == null) {
      throw new ApiException(400, "Missing the required parameter 'members' when calling groupAddGroupGroupMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/groups"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(members);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add users to the given group
   * 
   * @param id ID of the group (required)
   * @param members IDs of members (required)
   * @throws ApiException if fails to make API call
   */
  public void groupAddGroupMembers(Integer id, MemberIdListModel members) throws ApiException {
    groupAddGroupMembersWithHttpInfo(id, members);
  }

  /**
   * Add users to the given group
   * 
   * @param id ID of the group (required)
   * @param members IDs of members (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupAddGroupMembersWithHttpInfo(Integer id, MemberIdListModel members) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupAddGroupMembersRequestBuilder(id, members);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupAddGroupMembers", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupAddGroupMembersRequestBuilder(Integer id, MemberIdListModel members) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupAddGroupMembers");
    }
    // verify the required parameter 'members' is set
    if (members == null) {
      throw new ApiException(400, "Missing the required parameter 'members' when calling groupAddGroupMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/members"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(members);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add the group to one or more groups
   * 
   * @param id ID of group (required)
   * @param groups IDs of groups (required)
   * @throws ApiException if fails to make API call
   */
  public void groupAddGroupMemberships(Integer id, MembershipIdListModel groups) throws ApiException {
    groupAddGroupMembershipsWithHttpInfo(id, groups);
  }

  /**
   * Add the group to one or more groups
   * 
   * @param id ID of group (required)
   * @param groups IDs of groups (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupAddGroupMembershipsWithHttpInfo(Integer id, MembershipIdListModel groups) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupAddGroupMembershipsRequestBuilder(id, groups);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupAddGroupMemberships", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupAddGroupMembershipsRequestBuilder(Integer id, MembershipIdListModel groups) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupAddGroupMemberships");
    }
    // verify the required parameter 'groups' is set
    if (groups == null) {
      throw new ApiException(400, "Missing the required parameter 'groups' when calling groupAddGroupMemberships");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/member-of"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(groups);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add users to the given group
   * 
   * @param id ID of the group (required)
   * @param members IDs of members (required)
   * @throws ApiException if fails to make API call
   */
  public void groupAddGroupUserMembers(Integer id, MemberIdListModel members) throws ApiException {
    groupAddGroupUserMembersWithHttpInfo(id, members);
  }

  /**
   * Add users to the given group
   * 
   * @param id ID of the group (required)
   * @param members IDs of members (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupAddGroupUserMembersWithHttpInfo(Integer id, MemberIdListModel members) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupAddGroupUserMembersRequestBuilder(id, members);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupAddGroupUserMembers", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupAddGroupUserMembersRequestBuilder(Integer id, MemberIdListModel members) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupAddGroupUserMembers");
    }
    // verify the required parameter 'members' is set
    if (members == null) {
      throw new ApiException(400, "Missing the required parameter 'members' when calling groupAddGroupUserMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/users"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(members);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Count all groups on the site
   * 
   * @param isSso Count only SSO groups (optional)
   * @param ssoProvider Count only groups from the given SSO provider (optional)
   * @return ValueModelInteger
   * @throws ApiException if fails to make API call
   */
  public ValueModelInteger groupCountAllGroups(Boolean isSso, String ssoProvider) throws ApiException {
    ApiResponse<ValueModelInteger> localVarResponse = groupCountAllGroupsWithHttpInfo(isSso, ssoProvider);
    return localVarResponse.getData();
  }

  /**
   * Count all groups on the site
   * 
   * @param isSso Count only SSO groups (optional)
   * @param ssoProvider Count only groups from the given SSO provider (optional)
   * @return ApiResponse&lt;ValueModelInteger&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValueModelInteger> groupCountAllGroupsWithHttpInfo(Boolean isSso, String ssoProvider) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupCountAllGroupsRequestBuilder(isSso, ssoProvider);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupCountAllGroups", localVarResponse);
        }
        return new ApiResponse<ValueModelInteger>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValueModelInteger>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupCountAllGroupsRequestBuilder(Boolean isSso, String ssoProvider) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/count";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "isSso";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isSso", isSso));
    localVarQueryParameterBaseName = "ssoProvider";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssoProvider", ssoProvider));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Count all groups that the group is a direct member of
   * 
   * @param id ID of the user (required)
   * @return ValueModelInteger
   * @throws ApiException if fails to make API call
   */
  public ValueModelInteger groupCountDirectGroupMemberships(Integer id) throws ApiException {
    ApiResponse<ValueModelInteger> localVarResponse = groupCountDirectGroupMembershipsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Count all groups that the group is a direct member of
   * 
   * @param id ID of the user (required)
   * @return ApiResponse&lt;ValueModelInteger&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValueModelInteger> groupCountDirectGroupMembershipsWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupCountDirectGroupMembershipsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupCountDirectGroupMemberships", localVarResponse);
        }
        return new ApiResponse<ValueModelInteger>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValueModelInteger>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupCountDirectGroupMembershipsRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupCountDirectGroupMemberships");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/member-of/count"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Count all groups that are direct members of the given group
   * 
   * @param id ID of the group (required)
   * @return ValueModelInteger
   * @throws ApiException if fails to make API call
   */
  public ValueModelInteger groupCountGroupDirectGroupMembers(Integer id) throws ApiException {
    ApiResponse<ValueModelInteger> localVarResponse = groupCountGroupDirectGroupMembersWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Count all groups that are direct members of the given group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;ValueModelInteger&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValueModelInteger> groupCountGroupDirectGroupMembersWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupCountGroupDirectGroupMembersRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupCountGroupDirectGroupMembers", localVarResponse);
        }
        return new ApiResponse<ValueModelInteger>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValueModelInteger>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupCountGroupDirectGroupMembersRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupCountGroupDirectGroupMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/groups/count"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Count all users that are direct members of the given group
   * 
   * @param id ID of the group (required)
   * @return ValueModelInteger
   * @throws ApiException if fails to make API call
   */
  public ValueModelInteger groupCountGroupDirectUserMembers(Integer id) throws ApiException {
    ApiResponse<ValueModelInteger> localVarResponse = groupCountGroupDirectUserMembersWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Count all users that are direct members of the given group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;ValueModelInteger&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValueModelInteger> groupCountGroupDirectUserMembersWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupCountGroupDirectUserMembersRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupCountGroupDirectUserMembers", localVarResponse);
        }
        return new ApiResponse<ValueModelInteger>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValueModelInteger>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupCountGroupDirectUserMembersRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupCountGroupDirectUserMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/users/count"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Count all groups that are direct or indirect members of the given group
   * 
   * @param id ID of the group (required)
   * @return ValueModelInteger
   * @throws ApiException if fails to make API call
   */
  public ValueModelInteger groupCountGroupRecursiveGroupMembers(Integer id) throws ApiException {
    ApiResponse<ValueModelInteger> localVarResponse = groupCountGroupRecursiveGroupMembersWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Count all groups that are direct or indirect members of the given group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;ValueModelInteger&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValueModelInteger> groupCountGroupRecursiveGroupMembersWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupCountGroupRecursiveGroupMembersRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupCountGroupRecursiveGroupMembers", localVarResponse);
        }
        return new ApiResponse<ValueModelInteger>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValueModelInteger>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupCountGroupRecursiveGroupMembersRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupCountGroupRecursiveGroupMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/groups-recursive/count"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Count all users that are direct or indirect members of the given group
   * 
   * @param id ID of the group (required)
   * @return ValueModelInteger
   * @throws ApiException if fails to make API call
   */
  public ValueModelInteger groupCountGroupRecursiveUserMembers(Integer id) throws ApiException {
    ApiResponse<ValueModelInteger> localVarResponse = groupCountGroupRecursiveUserMembersWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Count all users that are direct or indirect members of the given group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;ValueModelInteger&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValueModelInteger> groupCountGroupRecursiveUserMembersWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupCountGroupRecursiveUserMembersRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupCountGroupRecursiveUserMembers", localVarResponse);
        }
        return new ApiResponse<ValueModelInteger>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValueModelInteger>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupCountGroupRecursiveUserMembersRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupCountGroupRecursiveUserMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/users-recursive/count"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Count all distinct groups that the group is a direct or indirect member of
   * 
   * @param id ID of the group (required)
   * @return ValueModelInteger
   * @throws ApiException if fails to make API call
   */
  public ValueModelInteger groupCountRecursiveUserMemberships(Integer id) throws ApiException {
    ApiResponse<ValueModelInteger> localVarResponse = groupCountRecursiveUserMembershipsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Count all distinct groups that the group is a direct or indirect member of
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;ValueModelInteger&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValueModelInteger> groupCountRecursiveUserMembershipsWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupCountRecursiveUserMembershipsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupCountRecursiveUserMemberships", localVarResponse);
        }
        return new ApiResponse<ValueModelInteger>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValueModelInteger>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupCountRecursiveUserMembershipsRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupCountRecursiveUserMemberships");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/member-of-recursive/count"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new group
   * 
   * @param group Group properties (required)
   * @return Group
   * @throws ApiException if fails to make API call
   */
  public Group groupCreateNewGroup(Group group) throws ApiException {
    ApiResponse<Group> localVarResponse = groupCreateNewGroupWithHttpInfo(group);
    return localVarResponse.getData();
  }

  /**
   * Create a new group
   * 
   * @param group Group properties (required)
   * @return ApiResponse&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Group> groupCreateNewGroupWithHttpInfo(Group group) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupCreateNewGroupRequestBuilder(group);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupCreateNewGroup", localVarResponse);
        }
        return new ApiResponse<Group>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Group>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupCreateNewGroupRequestBuilder(Group group) throws ApiException {
    // verify the required parameter 'group' is set
    if (group == null) {
      throw new ApiException(400, "Missing the required parameter 'group' when calling groupCreateNewGroup");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(group);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove all groups from the given group
   * 
   * @param id ID of group (required)
   * @throws ApiException if fails to make API call
   */
  public void groupDeleteAllGroupGroupMembers(Integer id) throws ApiException {
    groupDeleteAllGroupGroupMembersWithHttpInfo(id);
  }

  /**
   * Remove all groups from the given group
   * 
   * @param id ID of group (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupDeleteAllGroupGroupMembersWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupDeleteAllGroupGroupMembersRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupDeleteAllGroupGroupMembers", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupDeleteAllGroupGroupMembersRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupDeleteAllGroupGroupMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/groups"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove all members from the given group
   * 
   * @param id ID of group (required)
   * @throws ApiException if fails to make API call
   */
  public void groupDeleteAllGroupMembers(Integer id) throws ApiException {
    groupDeleteAllGroupMembersWithHttpInfo(id);
  }

  /**
   * Remove all members from the given group
   * 
   * @param id ID of group (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupDeleteAllGroupMembersWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupDeleteAllGroupMembersRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupDeleteAllGroupMembers", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupDeleteAllGroupMembersRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupDeleteAllGroupMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/members"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove the group from all groups
   * 
   * @param id ID of group (required)
   * @throws ApiException if fails to make API call
   */
  public void groupDeleteAllGroupMemberships(Integer id) throws ApiException {
    groupDeleteAllGroupMembershipsWithHttpInfo(id);
  }

  /**
   * Remove the group from all groups
   * 
   * @param id ID of group (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupDeleteAllGroupMembershipsWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupDeleteAllGroupMembershipsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupDeleteAllGroupMemberships", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupDeleteAllGroupMembershipsRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupDeleteAllGroupMemberships");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/member-of"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete all custom properties of a group
   * 
   * @param id ID of the group (required)
   * @throws ApiException if fails to make API call
   */
  public void groupDeleteAllGroupProperties(Integer id) throws ApiException {
    groupDeleteAllGroupPropertiesWithHttpInfo(id);
  }

  /**
   * Delete all custom properties of a group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupDeleteAllGroupPropertiesWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupDeleteAllGroupPropertiesRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupDeleteAllGroupProperties", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupDeleteAllGroupPropertiesRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupDeleteAllGroupProperties");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/properties"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove all users from the given group
   * 
   * @param id ID of group (required)
   * @throws ApiException if fails to make API call
   */
  public void groupDeleteAllGroupUserMembers(Integer id) throws ApiException {
    groupDeleteAllGroupUserMembersWithHttpInfo(id);
  }

  /**
   * Remove all users from the given group
   * 
   * @param id ID of group (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupDeleteAllGroupUserMembersWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupDeleteAllGroupUserMembersRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupDeleteAllGroupUserMembers", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupDeleteAllGroupUserMembersRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupDeleteAllGroupUserMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/users"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a group
   * 
   * @param id ID of the group (required)
   * @throws ApiException if fails to make API call
   */
  public void groupDeleteGroup(Integer id) throws ApiException {
    groupDeleteGroupWithHttpInfo(id);
  }

  /**
   * Delete a group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupDeleteGroupWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupDeleteGroupRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupDeleteGroup", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupDeleteGroupRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupDeleteGroup");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete all external IDs of a group
   * 
   * @param id ID of the group (required)
   * @throws ApiException if fails to make API call
   */
  public void groupDeleteGroupExternalIds(Integer id) throws ApiException {
    groupDeleteGroupExternalIdsWithHttpInfo(id);
  }

  /**
   * Delete all external IDs of a group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupDeleteGroupExternalIdsWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupDeleteGroupExternalIdsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupDeleteGroupExternalIds", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupDeleteGroupExternalIdsRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupDeleteGroupExternalIds");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/external-ids"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete the external ID of a group from a provider
   * 
   * @param id ID of the group (required)
   * @param provider ID of the SSO provider (required)
   * @throws ApiException if fails to make API call
   */
  public void groupDeleteGroupExternalIdsFromProvider(Integer id, UUID provider) throws ApiException {
    groupDeleteGroupExternalIdsFromProviderWithHttpInfo(id, provider);
  }

  /**
   * Delete the external ID of a group from a provider
   * 
   * @param id ID of the group (required)
   * @param provider ID of the SSO provider (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupDeleteGroupExternalIdsFromProviderWithHttpInfo(Integer id, UUID provider) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupDeleteGroupExternalIdsFromProviderRequestBuilder(id, provider);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupDeleteGroupExternalIdsFromProvider", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupDeleteGroupExternalIdsFromProviderRequestBuilder(Integer id, UUID provider) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupDeleteGroupExternalIdsFromProvider");
    }
    // verify the required parameter 'provider' is set
    if (provider == null) {
      throw new ApiException(400, "Missing the required parameter 'provider' when calling groupDeleteGroupExternalIdsFromProvider");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/external-ids/{provider}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{provider}", ApiClient.urlEncode(provider.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove a group from the given group
   * 
   * @param id ID of group to remove from (required)
   * @param member ID of member to remove (required)
   * @throws ApiException if fails to make API call
   */
  public void groupDeleteGroupGroupMember(Integer id, Integer member) throws ApiException {
    groupDeleteGroupGroupMemberWithHttpInfo(id, member);
  }

  /**
   * Remove a group from the given group
   * 
   * @param id ID of group to remove from (required)
   * @param member ID of member to remove (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupDeleteGroupGroupMemberWithHttpInfo(Integer id, Integer member) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupDeleteGroupGroupMemberRequestBuilder(id, member);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupDeleteGroupGroupMember", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupDeleteGroupGroupMemberRequestBuilder(Integer id, Integer member) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupDeleteGroupGroupMember");
    }
    // verify the required parameter 'member' is set
    if (member == null) {
      throw new ApiException(400, "Missing the required parameter 'member' when calling groupDeleteGroupGroupMember");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/groups/{member}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{member}", ApiClient.urlEncode(member.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove the group from a single group
   * 
   * @param id ID of group (required)
   * @param group ID of group (required)
   * @throws ApiException if fails to make API call
   */
  public void groupDeleteGroupMembership(Integer id, Integer group) throws ApiException {
    groupDeleteGroupMembershipWithHttpInfo(id, group);
  }

  /**
   * Remove the group from a single group
   * 
   * @param id ID of group (required)
   * @param group ID of group (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupDeleteGroupMembershipWithHttpInfo(Integer id, Integer group) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupDeleteGroupMembershipRequestBuilder(id, group);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupDeleteGroupMembership", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupDeleteGroupMembershipRequestBuilder(Integer id, Integer group) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupDeleteGroupMembership");
    }
    // verify the required parameter 'group' is set
    if (group == null) {
      throw new ApiException(400, "Missing the required parameter 'group' when calling groupDeleteGroupMembership");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/member-of/{group}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{group}", ApiClient.urlEncode(group.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a custom property of a group
   * 
   * @param id ID of the group (required)
   * @param key Property key (required)
   * @throws ApiException if fails to make API call
   */
  public void groupDeleteGroupProperties(Integer id, String key) throws ApiException {
    groupDeleteGroupPropertiesWithHttpInfo(id, key);
  }

  /**
   * Delete a custom property of a group
   * 
   * @param id ID of the group (required)
   * @param key Property key (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupDeleteGroupPropertiesWithHttpInfo(Integer id, String key) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupDeleteGroupPropertiesRequestBuilder(id, key);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupDeleteGroupProperties", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupDeleteGroupPropertiesRequestBuilder(Integer id, String key) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupDeleteGroupProperties");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling groupDeleteGroupProperties");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/properties/{key}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove a user from the given group
   * 
   * @param id ID of group to remove from (required)
   * @param member ID of member to remove (required)
   * @throws ApiException if fails to make API call
   */
  public void groupDeleteGroupUserMember(Integer id, Integer member) throws ApiException {
    groupDeleteGroupUserMemberWithHttpInfo(id, member);
  }

  /**
   * Remove a user from the given group
   * 
   * @param id ID of group to remove from (required)
   * @param member ID of member to remove (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupDeleteGroupUserMemberWithHttpInfo(Integer id, Integer member) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupDeleteGroupUserMemberRequestBuilder(id, member);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupDeleteGroupUserMember", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupDeleteGroupUserMemberRequestBuilder(Integer id, Integer member) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupDeleteGroupUserMember");
    }
    // verify the required parameter 'member' is set
    if (member == null) {
      throw new ApiException(400, "Missing the required parameter 'member' when calling groupDeleteGroupUserMember");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/users/{member}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{member}", ApiClient.urlEncode(member.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all groups on the site
   * 
   * @return List&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Group> groupGetAllGroups() throws ApiException {
    ApiResponse<List<Group>> localVarResponse = groupGetAllGroupsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get all groups on the site
   * 
   * @return ApiResponse&lt;List&lt;Group&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Group>> groupGetAllGroupsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupGetAllGroupsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupGetAllGroups", localVarResponse);
        }
        return new ApiResponse<List<Group>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Group>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupGetAllGroupsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all groups that the group is a direct member of
   * 
   * @param id ID of the group (required)
   * @return List&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Group> groupGetDirectGroupMemberships(Integer id) throws ApiException {
    ApiResponse<List<Group>> localVarResponse = groupGetDirectGroupMembershipsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all groups that the group is a direct member of
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;List&lt;Group&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Group>> groupGetDirectGroupMembershipsWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupGetDirectGroupMembershipsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupGetDirectGroupMemberships", localVarResponse);
        }
        return new ApiResponse<List<Group>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Group>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupGetDirectGroupMembershipsRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupGetDirectGroupMemberships");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/member-of"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get group by ID
   * 
   * @param id ID of the group (required)
   * @return Group
   * @throws ApiException if fails to make API call
   */
  public Group groupGetGroupById(Integer id) throws ApiException {
    ApiResponse<Group> localVarResponse = groupGetGroupByIdWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get group by ID
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Group> groupGetGroupByIdWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupGetGroupByIdRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupGetGroupById", localVarResponse);
        }
        return new ApiResponse<Group>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Group>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupGetGroupByIdRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupGetGroupById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all groups that are direct members of the given group
   * 
   * @param id ID of the group (required)
   * @return List&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Group> groupGetGroupDirectGroupMembers(Integer id) throws ApiException {
    ApiResponse<List<Group>> localVarResponse = groupGetGroupDirectGroupMembersWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all groups that are direct members of the given group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;List&lt;Group&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Group>> groupGetGroupDirectGroupMembersWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupGetGroupDirectGroupMembersRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupGetGroupDirectGroupMembers", localVarResponse);
        }
        return new ApiResponse<List<Group>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Group>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupGetGroupDirectGroupMembersRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupGetGroupDirectGroupMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/groups"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all users that are direct members of the given group
   * 
   * @param id ID of the group (required)
   * @return List&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public List<User> groupGetGroupDirectUserMembers(Integer id) throws ApiException {
    ApiResponse<List<User>> localVarResponse = groupGetGroupDirectUserMembersWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all users that are direct members of the given group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;List&lt;User&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<User>> groupGetGroupDirectUserMembersWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupGetGroupDirectUserMembersRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupGetGroupDirectUserMembers", localVarResponse);
        }
        return new ApiResponse<List<User>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<User>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupGetGroupDirectUserMembersRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupGetGroupDirectUserMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/users"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all external IDs of a group
   * 
   * @param id ID of the group (required)
   * @return List&lt;ExternalId&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ExternalId> groupGetGroupExternalIds(Integer id) throws ApiException {
    ApiResponse<List<ExternalId>> localVarResponse = groupGetGroupExternalIdsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all external IDs of a group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;List&lt;ExternalId&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ExternalId>> groupGetGroupExternalIdsWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupGetGroupExternalIdsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupGetGroupExternalIds", localVarResponse);
        }
        return new ApiResponse<List<ExternalId>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<ExternalId>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupGetGroupExternalIdsRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupGetGroupExternalIds");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/external-ids"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all custom properties of a group
   * 
   * @param id ID of the group (required)
   * @return List&lt;MemberProperty&gt;
   * @throws ApiException if fails to make API call
   */
  public List<MemberProperty> groupGetGroupPropertyBag(Integer id) throws ApiException {
    ApiResponse<List<MemberProperty>> localVarResponse = groupGetGroupPropertyBagWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all custom properties of a group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;List&lt;MemberProperty&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<MemberProperty>> groupGetGroupPropertyBagWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupGetGroupPropertyBagRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupGetGroupPropertyBag", localVarResponse);
        }
        return new ApiResponse<List<MemberProperty>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<MemberProperty>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupGetGroupPropertyBagRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupGetGroupPropertyBag");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/properties"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all groups that are direct or indirect members of the given group
   * 
   * @param id ID of the group (required)
   * @return List&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Group> groupGetGroupRecursiveGroupembers(Integer id) throws ApiException {
    ApiResponse<List<Group>> localVarResponse = groupGetGroupRecursiveGroupembersWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all groups that are direct or indirect members of the given group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;List&lt;Group&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Group>> groupGetGroupRecursiveGroupembersWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupGetGroupRecursiveGroupembersRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupGetGroupRecursiveGroupembers", localVarResponse);
        }
        return new ApiResponse<List<Group>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Group>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupGetGroupRecursiveGroupembersRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupGetGroupRecursiveGroupembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/groups-recursive"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all users that are direct or indirect members of the given group
   * 
   * @param id ID of the group (required)
   * @return List&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public List<User> groupGetGroupRecursiveUserMembers(Integer id) throws ApiException {
    ApiResponse<List<User>> localVarResponse = groupGetGroupRecursiveUserMembersWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all users that are direct or indirect members of the given group
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;List&lt;User&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<User>> groupGetGroupRecursiveUserMembersWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupGetGroupRecursiveUserMembersRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupGetGroupRecursiveUserMembers", localVarResponse);
        }
        return new ApiResponse<List<User>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<User>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupGetGroupRecursiveUserMembersRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupGetGroupRecursiveUserMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/users-recursive"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all distinct groups that the group is a direct or indirect member of
   * 
   * @param id ID of the group (required)
   * @return List&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Group> groupGetRecursiveGroupMemberships(Integer id) throws ApiException {
    ApiResponse<List<Group>> localVarResponse = groupGetRecursiveGroupMembershipsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all distinct groups that the group is a direct or indirect member of
   * 
   * @param id ID of the group (required)
   * @return ApiResponse&lt;List&lt;Group&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Group>> groupGetRecursiveGroupMembershipsWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupGetRecursiveGroupMembershipsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupGetRecursiveGroupMemberships", localVarResponse);
        }
        return new ApiResponse<List<Group>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Group>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupGetRecursiveGroupMembershipsRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupGetRecursiveGroupMemberships");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/member-of-recursive"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Replace all groups that are direct members of a group
   * 
   * @param id ID of the group (required)
   * @param members IDs of new members (required)
   * @throws ApiException if fails to make API call
   */
  public void groupSetGroupGroupMembers(Integer id, MemberIdListModel members) throws ApiException {
    groupSetGroupGroupMembersWithHttpInfo(id, members);
  }

  /**
   * Replace all groups that are direct members of a group
   * 
   * @param id ID of the group (required)
   * @param members IDs of new members (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupSetGroupGroupMembersWithHttpInfo(Integer id, MemberIdListModel members) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupSetGroupGroupMembersRequestBuilder(id, members);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupSetGroupGroupMembers", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupSetGroupGroupMembersRequestBuilder(Integer id, MemberIdListModel members) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupSetGroupGroupMembers");
    }
    // verify the required parameter 'members' is set
    if (members == null) {
      throw new ApiException(400, "Missing the required parameter 'members' when calling groupSetGroupGroupMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/groups"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(members);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Replace all direct members of a group
   * 
   * @param id ID of the group (required)
   * @param members IDs of new members (required)
   * @throws ApiException if fails to make API call
   */
  public void groupSetGroupMembers(Integer id, MemberIdListModel members) throws ApiException {
    groupSetGroupMembersWithHttpInfo(id, members);
  }

  /**
   * Replace all direct members of a group
   * 
   * @param id ID of the group (required)
   * @param members IDs of new members (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupSetGroupMembersWithHttpInfo(Integer id, MemberIdListModel members) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupSetGroupMembersRequestBuilder(id, members);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupSetGroupMembers", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupSetGroupMembersRequestBuilder(Integer id, MemberIdListModel members) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupSetGroupMembers");
    }
    // verify the required parameter 'members' is set
    if (members == null) {
      throw new ApiException(400, "Missing the required parameter 'members' when calling groupSetGroupMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/members"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(members);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Set the groups that the group is a direct member of
   * The group is removed from all other groups
   * @param id ID of group (required)
   * @param groups IDs of groups (required)
   * @throws ApiException if fails to make API call
   */
  public void groupSetGroupMemberships(Integer id, MembershipIdListModel groups) throws ApiException {
    groupSetGroupMembershipsWithHttpInfo(id, groups);
  }

  /**
   * Set the groups that the group is a direct member of
   * The group is removed from all other groups
   * @param id ID of group (required)
   * @param groups IDs of groups (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupSetGroupMembershipsWithHttpInfo(Integer id, MembershipIdListModel groups) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupSetGroupMembershipsRequestBuilder(id, groups);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupSetGroupMemberships", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupSetGroupMembershipsRequestBuilder(Integer id, MembershipIdListModel groups) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupSetGroupMemberships");
    }
    // verify the required parameter 'groups' is set
    if (groups == null) {
      throw new ApiException(400, "Missing the required parameter 'groups' when calling groupSetGroupMemberships");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/member-of"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(groups);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Replace all users that are direct members of a group
   * 
   * @param id ID of the group (required)
   * @param members IDs of new members (required)
   * @throws ApiException if fails to make API call
   */
  public void groupSetGroupUserMembers(Integer id, MemberIdListModel members) throws ApiException {
    groupSetGroupUserMembersWithHttpInfo(id, members);
  }

  /**
   * Replace all users that are direct members of a group
   * 
   * @param id ID of the group (required)
   * @param members IDs of new members (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupSetGroupUserMembersWithHttpInfo(Integer id, MemberIdListModel members) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupSetGroupUserMembersRequestBuilder(id, members);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupSetGroupUserMembers", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupSetGroupUserMembersRequestBuilder(Integer id, MemberIdListModel members) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupSetGroupUserMembers");
    }
    // verify the required parameter 'members' is set
    if (members == null) {
      throw new ApiException(400, "Missing the required parameter 'members' when calling groupSetGroupUserMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}/users"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(members);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a group
   * 
   * @param id ID of the group (required)
   * @param properties New group properties (required)
   * @throws ApiException if fails to make API call
   */
  public void groupUpdateGroup(Integer id, Group properties) throws ApiException {
    groupUpdateGroupWithHttpInfo(id, properties);
  }

  /**
   * Update a group
   * 
   * @param id ID of the group (required)
   * @param properties New group properties (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> groupUpdateGroupWithHttpInfo(Integer id, Group properties) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = groupUpdateGroupRequestBuilder(id, properties);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("groupUpdateGroup", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder groupUpdateGroupRequestBuilder(Integer id, Group properties) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling groupUpdateGroup");
    }
    // verify the required parameter 'properties' is set
    if (properties == null) {
      throw new ApiException(400, "Missing the required parameter 'properties' when calling groupUpdateGroup");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fotoweb/api/groups/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(properties);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
