/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.cominvent.fotoware.model.SharingMessage;
import com.cominvent.fotoware.model.SharingSharesInner;
import com.cominvent.fotoware.model.SharingShowcase;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Sharing
 */
@JsonPropertyOrder({
  Sharing.JSON_PROPERTY_MESSAGE,
  Sharing.JSON_PROPERTY_SHARES,
  Sharing.JSON_PROPERTY_SHOWCASE,
  Sharing.JSON_PROPERTY_HREF,
  Sharing.JSON_PROPERTY_ORIGINAL_HREF
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-20T14:14:21.267957+01:00[Europe/Oslo]")
public class Sharing {
  public static final String JSON_PROPERTY_MESSAGE = "message";
  private SharingMessage message;

  public static final String JSON_PROPERTY_SHARES = "shares";
  private List<SharingSharesInner> shares;

  public static final String JSON_PROPERTY_SHOWCASE = "showcase";
  private SharingShowcase showcase;

  public static final String JSON_PROPERTY_HREF = "href";
  private String href;

  public static final String JSON_PROPERTY_ORIGINAL_HREF = "originalHref";
  private String originalHref;

  public Sharing() { 
  }

  public Sharing message(SharingMessage message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SharingMessage getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(SharingMessage message) {
    this.message = message;
  }


  public Sharing shares(List<SharingSharesInner> shares) {
    this.shares = shares;
    return this;
  }

  public Sharing addSharesItem(SharingSharesInner sharesItem) {
    if (this.shares == null) {
      this.shares = new ArrayList<>();
    }
    this.shares.add(sharesItem);
    return this;
  }

   /**
   * Get shares
   * @return shares
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHARES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SharingSharesInner> getShares() {
    return shares;
  }


  @JsonProperty(JSON_PROPERTY_SHARES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShares(List<SharingSharesInner> shares) {
    this.shares = shares;
  }


  public Sharing showcase(SharingShowcase showcase) {
    this.showcase = showcase;
    return this;
  }

   /**
   * Get showcase
   * @return showcase
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHOWCASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SharingShowcase getShowcase() {
    return showcase;
  }


  @JsonProperty(JSON_PROPERTY_SHOWCASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShowcase(SharingShowcase showcase) {
    this.showcase = showcase;
  }


  public Sharing href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHref() {
    return href;
  }


  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHref(String href) {
    this.href = href;
  }


  public Sharing originalHref(String originalHref) {
    this.originalHref = originalHref;
    return this;
  }

   /**
   * Get originalHref
   * @return originalHref
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINAL_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOriginalHref() {
    return originalHref;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginalHref(String originalHref) {
    this.originalHref = originalHref;
  }


  /**
   * Return true if this Sharing object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sharing sharing = (Sharing) o;
    return Objects.equals(this.message, sharing.message) &&
        Objects.equals(this.shares, sharing.shares) &&
        Objects.equals(this.showcase, sharing.showcase) &&
        Objects.equals(this.href, sharing.href) &&
        Objects.equals(this.originalHref, sharing.originalHref);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, shares, showcase, href, originalHref);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sharing {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    shares: ").append(toIndentedString(shares)).append("\n");
    sb.append("    showcase: ").append(toIndentedString(showcase)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    originalHref: ").append(toIndentedString(originalHref)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `message` to the URL query string
    if (getMessage() != null) {
      joiner.add(getMessage().toUrlQueryString(prefix + "message" + suffix));
    }

    // add `shares` to the URL query string
    if (getShares() != null) {
      for (int i = 0; i < getShares().size(); i++) {
        if (getShares().get(i) != null) {
          joiner.add(getShares().get(i).toUrlQueryString(String.format("%sshares%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `showcase` to the URL query string
    if (getShowcase() != null) {
      joiner.add(getShowcase().toUrlQueryString(prefix + "showcase" + suffix));
    }

    // add `href` to the URL query string
    if (getHref() != null) {
      joiner.add(String.format("%shref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHref()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `originalHref` to the URL query string
    if (getOriginalHref() != null) {
      joiner.add(String.format("%soriginalHref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOriginalHref()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

