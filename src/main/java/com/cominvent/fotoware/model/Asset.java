/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.cominvent.fotoware.model.AssetAncestorsInner;
import com.cominvent.fotoware.model.AssetAttributes;
import com.cominvent.fotoware.model.AssetBuiltinFieldsInner;
import com.cominvent.fotoware.model.AssetCapabilities;
import com.cominvent.fotoware.model.AssetMetadataEditor;
import com.cominvent.fotoware.model.AssetPreviewsInner;
import com.cominvent.fotoware.model.AssetProps;
import com.cominvent.fotoware.model.AssetQuickRenditionsInner;
import com.cominvent.fotoware.model.AssetRenditionsInner;
import com.cominvent.fotoware.model.AssetThumbnailFields;
import com.cominvent.fotoware.model.ConsentStatus;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Asset
 */
@JsonPropertyOrder({
  Asset.JSON_PROPERTY_ARCHIVE_H_R_E_F,
  Asset.JSON_PROPERTY_ANCESTORS,
  Asset.JSON_PROPERTY_ATTRIBUTES,
  Asset.JSON_PROPERTY_BUILTIN_FIELDS,
  Asset.JSON_PROPERTY_CAPABILITIES,
  Asset.JSON_PROPERTY_CREATED,
  Asset.JSON_PROPERTY_CREATED_BY,
  Asset.JSON_PROPERTY_DOCTYPE,
  Asset.JSON_PROPERTY_DOWNLOADCOUNT,
  Asset.JSON_PROPERTY_DROP_H_R_E_F,
  Asset.JSON_PROPERTY_FILESIZE,
  Asset.JSON_PROPERTY_FILENAME,
  Asset.JSON_PROPERTY_HREF,
  Asset.JSON_PROPERTY_LINKSTANCE,
  Asset.JSON_PROPERTY_CONSENT_STATUS,
  Asset.JSON_PROPERTY_PHYSICAL_FILE_ID,
  Asset.JSON_PROPERTY_METADATA,
  Asset.JSON_PROPERTY_METADATAEDITCOUNT,
  Asset.JSON_PROPERTY_METADATA_EDITOR,
  Asset.JSON_PROPERTY_MODIFIED,
  Asset.JSON_PROPERTY_MODIFIED_BY,
  Asset.JSON_PROPERTY_PERMISSIONS,
  Asset.JSON_PROPERTY_PINCOUNT,
  Asset.JSON_PROPERTY_PREVIEWCOUNT,
  Asset.JSON_PROPERTY_PREVIEWS,
  Asset.JSON_PROPERTY_PREVIEW_TOKEN,
  Asset.JSON_PROPERTY_PROPS,
  Asset.JSON_PROPERTY_QUICK_RENDITIONS,
  Asset.JSON_PROPERTY_RENDITIONS,
  Asset.JSON_PROPERTY_REVISIONCOUNT,
  Asset.JSON_PROPERTY_THUMBNAIL_FIELDS,
  Asset.JSON_PROPERTY_UNIQUEID,
  Asset.JSON_PROPERTY_WORKFLOWCOUNT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Asset {
  public static final String JSON_PROPERTY_ARCHIVE_H_R_E_F = "archiveHREF";
  private String archiveHREF;

  public static final String JSON_PROPERTY_ANCESTORS = "ancestors";
  private List<AssetAncestorsInner> ancestors;

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private AssetAttributes attributes;

  public static final String JSON_PROPERTY_BUILTIN_FIELDS = "builtinFields";
  private List<AssetBuiltinFieldsInner> builtinFields;

  public static final String JSON_PROPERTY_CAPABILITIES = "capabilities";
  private AssetCapabilities capabilities;

  public static final String JSON_PROPERTY_CREATED = "created";
  private String created;

  public static final String JSON_PROPERTY_CREATED_BY = "createdBy";
  private String createdBy;

  public static final String JSON_PROPERTY_DOCTYPE = "doctype";
  private String doctype;

  public static final String JSON_PROPERTY_DOWNLOADCOUNT = "downloadcount";
  private Integer downloadcount;

  public static final String JSON_PROPERTY_DROP_H_R_E_F = "dropHREF";
  private String dropHREF;

  public static final String JSON_PROPERTY_FILESIZE = "filesize";
  private Integer filesize;

  public static final String JSON_PROPERTY_FILENAME = "filename";
  private String filename;

  public static final String JSON_PROPERTY_HREF = "href";
  private String href;

  public static final String JSON_PROPERTY_LINKSTANCE = "linkstance";
  private String linkstance;

  public static final String JSON_PROPERTY_CONSENT_STATUS = "consentStatus";
  private ConsentStatus consentStatus;

  public static final String JSON_PROPERTY_PHYSICAL_FILE_ID = "physicalFileId";
  private String physicalFileId;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private Object metadata;

  public static final String JSON_PROPERTY_METADATAEDITCOUNT = "metadataeditcount";
  private Integer metadataeditcount;

  public static final String JSON_PROPERTY_METADATA_EDITOR = "metadataEditor";
  private AssetMetadataEditor metadataEditor;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private String modified;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_PERMISSIONS = "permissions";
  private List<Object> permissions;

  public static final String JSON_PROPERTY_PINCOUNT = "pincount";
  private Integer pincount;

  public static final String JSON_PROPERTY_PREVIEWCOUNT = "previewcount";
  private Integer previewcount;

  public static final String JSON_PROPERTY_PREVIEWS = "previews";
  private List<AssetPreviewsInner> previews;

  public static final String JSON_PROPERTY_PREVIEW_TOKEN = "previewToken";
  private String previewToken;

  public static final String JSON_PROPERTY_PROPS = "props";
  private AssetProps props;

  public static final String JSON_PROPERTY_QUICK_RENDITIONS = "quickRenditions";
  private List<AssetQuickRenditionsInner> quickRenditions;

  public static final String JSON_PROPERTY_RENDITIONS = "renditions";
  private List<AssetRenditionsInner> renditions;

  public static final String JSON_PROPERTY_REVISIONCOUNT = "revisioncount";
  private Integer revisioncount;

  public static final String JSON_PROPERTY_THUMBNAIL_FIELDS = "thumbnailFields";
  private AssetThumbnailFields thumbnailFields;

  public static final String JSON_PROPERTY_UNIQUEID = "uniqueid";
  private String uniqueid;

  public static final String JSON_PROPERTY_WORKFLOWCOUNT = "workflowcount";
  private Integer workflowcount;

  public Asset() { 
  }

  public Asset archiveHREF(String archiveHREF) {
    this.archiveHREF = archiveHREF;
    return this;
  }

   /**
   * Links to Archive. URL of the archive which contains the asset. Each asset is contained in only one archive. If the asset was discovered in a different kind of collection (such as an album, a search result or a folder), then this attribute can be used for finding the root URL of the original archive. 
   * @return archiveHREF
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARCHIVE_H_R_E_F)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getArchiveHREF() {
    return archiveHREF;
  }


  @JsonProperty(JSON_PROPERTY_ARCHIVE_H_R_E_F)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArchiveHREF(String archiveHREF) {
    this.archiveHREF = archiveHREF;
  }


  public Asset ancestors(List<AssetAncestorsInner> ancestors) {
    this.ancestors = ancestors;
    return this;
  }

  public Asset addAncestorsItem(AssetAncestorsInner ancestorsItem) {
    if (this.ancestors == null) {
      this.ancestors = new ArrayList<>();
    }
    this.ancestors.add(ancestorsItem);
    return this;
  }

   /**
   * Get ancestors
   * @return ancestors
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANCESTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AssetAncestorsInner> getAncestors() {
    return ancestors;
  }


  @JsonProperty(JSON_PROPERTY_ANCESTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAncestors(List<AssetAncestorsInner> ancestors) {
    this.ancestors = ancestors;
  }


  public Asset attributes(AssetAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AssetAttributes getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(AssetAttributes attributes) {
    this.attributes = attributes;
  }


  public Asset builtinFields(List<AssetBuiltinFieldsInner> builtinFields) {
    this.builtinFields = builtinFields;
    return this;
  }

  public Asset addBuiltinFieldsItem(AssetBuiltinFieldsInner builtinFieldsItem) {
    if (this.builtinFields == null) {
      this.builtinFields = new ArrayList<>();
    }
    this.builtinFields.add(builtinFieldsItem);
    return this;
  }

   /**
   * Get builtinFields
   * @return builtinFields
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUILTIN_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AssetBuiltinFieldsInner> getBuiltinFields() {
    return builtinFields;
  }


  @JsonProperty(JSON_PROPERTY_BUILTIN_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuiltinFields(List<AssetBuiltinFieldsInner> builtinFields) {
    this.builtinFields = builtinFields;
  }


  public Asset capabilities(AssetCapabilities capabilities) {
    this.capabilities = capabilities;
    return this;
  }

   /**
   * Get capabilities
   * @return capabilities
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAPABILITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AssetCapabilities getCapabilities() {
    return capabilities;
  }


  @JsonProperty(JSON_PROPERTY_CAPABILITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCapabilities(AssetCapabilities capabilities) {
    this.capabilities = capabilities;
  }


  public Asset created(String created) {
    this.created = created;
    return this;
  }

   /**
   * The date and time on which the asset was created
   * @return created
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(String created) {
    this.created = created;
  }


  public Asset createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreatedBy() {
    return createdBy;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public Asset doctype(String doctype) {
    this.doctype = doctype;
    return this;
  }

   /**
   * Type of this asset. For possible values, please see document types. This attribute determines which sub sections of the attributes section are present. 
   * @return doctype
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOCTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDoctype() {
    return doctype;
  }


  @JsonProperty(JSON_PROPERTY_DOCTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDoctype(String doctype) {
    this.doctype = doctype;
  }


  public Asset downloadcount(Integer downloadcount) {
    this.downloadcount = downloadcount;
    return this;
  }

   /**
   * Get downloadcount
   * @return downloadcount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWNLOADCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDownloadcount() {
    return downloadcount;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOADCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownloadcount(Integer downloadcount) {
    this.downloadcount = downloadcount;
  }


  public Asset dropHREF(String dropHREF) {
    this.dropHREF = dropHREF;
    return this;
  }

   /**
   * Get dropHREF
   * @return dropHREF
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DROP_H_R_E_F)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDropHREF() {
    return dropHREF;
  }


  @JsonProperty(JSON_PROPERTY_DROP_H_R_E_F)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDropHREF(String dropHREF) {
    this.dropHREF = dropHREF;
  }


  public Asset filesize(Integer filesize) {
    this.filesize = filesize;
    return this;
  }

   /**
   * Size of the file in bytes
   * @return filesize
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILESIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFilesize() {
    return filesize;
  }


  @JsonProperty(JSON_PROPERTY_FILESIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilesize(Integer filesize) {
    this.filesize = filesize;
  }


  public Asset filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * Name of the file without path
   * @return filename
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILENAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFilename() {
    return filename;
  }


  @JsonProperty(JSON_PROPERTY_FILENAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilename(String filename) {
    this.filename = filename;
  }


  public Asset href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Links to asset. Original URL of the asset within the originating archive. This URL is used for most workflow operations. 
   * @return href
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHref() {
    return href;
  }


  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHref(String href) {
    this.href = href;
  }


  public Asset linkstance(String linkstance) {
    this.linkstance = linkstance;
    return this;
  }

   /**
   * Links to asset. The asset is then said to have multiple instances, one instance per distinct collection. For archives and folders, linkstance is always identical to href, which is called the original instance of the asset. Use linkstance to follow links from asset lists to individual assets 
   * @return linkstance
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKSTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLinkstance() {
    return linkstance;
  }


  @JsonProperty(JSON_PROPERTY_LINKSTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinkstance(String linkstance) {
    this.linkstance = linkstance;
  }


  public Asset consentStatus(ConsentStatus consentStatus) {
    this.consentStatus = consentStatus;
    return this;
  }

   /**
   * Get consentStatus
   * @return consentStatus
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConsentStatus getConsentStatus() {
    return consentStatus;
  }


  @JsonProperty(JSON_PROPERTY_CONSENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConsentStatus(ConsentStatus consentStatus) {
    this.consentStatus = consentStatus;
  }


  public Asset physicalFileId(String physicalFileId) {
    this.physicalFileId = physicalFileId;
    return this;
  }

   /**
   * A physical file is a distinct representation of an asset in a single storage location with its own state (metadata, file properties, etc.). A physical file ID is a string of the form &lt;POOL_ID&gt;&lt;RELATIVE_PATH&gt; where &lt;POOL_ID&gt; is the pool ID as returned by the /fotoweb/api/config/pools API today. A hash-based pseudo ID is used on-premises. &lt;RELATIVE_PATH&gt; is the canonical path to the file within the pool starting with /, same as in its FWP URL. 
   * @return physicalFileId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHYSICAL_FILE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPhysicalFileId() {
    return physicalFileId;
  }


  @JsonProperty(JSON_PROPERTY_PHYSICAL_FILE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhysicalFileId(String physicalFileId) {
    this.physicalFileId = physicalFileId;
  }


  public Asset metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Contains values of metadata fields of this asset which are exposed by the API. Usually, the metadata set associated with the archive to which the asset belongs controls which fields are available. 
   * @return metadata
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public Asset metadataeditcount(Integer metadataeditcount) {
    this.metadataeditcount = metadataeditcount;
    return this;
  }

   /**
   * Get metadataeditcount
   * @return metadataeditcount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATAEDITCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMetadataeditcount() {
    return metadataeditcount;
  }


  @JsonProperty(JSON_PROPERTY_METADATAEDITCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadataeditcount(Integer metadataeditcount) {
    this.metadataeditcount = metadataeditcount;
  }


  public Asset metadataEditor(AssetMetadataEditor metadataEditor) {
    this.metadataEditor = metadataEditor;
    return this;
  }

   /**
   * Get metadataEditor
   * @return metadataEditor
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA_EDITOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AssetMetadataEditor getMetadataEditor() {
    return metadataEditor;
  }


  @JsonProperty(JSON_PROPERTY_METADATA_EDITOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadataEditor(AssetMetadataEditor metadataEditor) {
    this.metadataEditor = metadataEditor;
  }


  public Asset modified(String modified) {
    this.modified = modified;
    return this;
  }

   /**
   * The date and time on which the asset was last modified
   * @return modified
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModified(String modified) {
    this.modified = modified;
  }


  public Asset modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * Get modifiedBy
   * @return modifiedBy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public Asset permissions(List<Object> permissions) {
    this.permissions = permissions;
    return this;
  }

  public Asset addPermissionsItem(Object permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * List of permissions that the requesting user has on this asset. For possible values, please see permissions.
   * @return permissions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getPermissions() {
    return permissions;
  }


  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPermissions(List<Object> permissions) {
    this.permissions = permissions;
  }


  public Asset pincount(Integer pincount) {
    this.pincount = pincount;
    return this;
  }

   /**
   * Get pincount
   * @return pincount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PINCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPincount() {
    return pincount;
  }


  @JsonProperty(JSON_PROPERTY_PINCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPincount(Integer pincount) {
    this.pincount = pincount;
  }


  public Asset previewcount(Integer previewcount) {
    this.previewcount = previewcount;
    return this;
  }

   /**
   * Get previewcount
   * @return previewcount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIEWCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPreviewcount() {
    return previewcount;
  }


  @JsonProperty(JSON_PROPERTY_PREVIEWCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviewcount(Integer previewcount) {
    this.previewcount = previewcount;
  }


  public Asset previews(List<AssetPreviewsInner> previews) {
    this.previews = previews;
    return this;
  }

  public Asset addPreviewsItem(AssetPreviewsInner previewsItem) {
    if (this.previews == null) {
      this.previews = new ArrayList<>();
    }
    this.previews.add(previewsItem);
    return this;
  }

   /**
   * List of available thumbnail and preview images of this asset. For details, please see preview lists
   * @return previews
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIEWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AssetPreviewsInner> getPreviews() {
    return previews;
  }


  @JsonProperty(JSON_PROPERTY_PREVIEWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviews(List<AssetPreviewsInner> previews) {
    this.previews = previews;
  }


  public Asset previewToken(String previewToken) {
    this.previewToken = previewToken;
    return this;
  }

   /**
   * Get previewToken
   * @return previewToken
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIEW_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPreviewToken() {
    return previewToken;
  }


  @JsonProperty(JSON_PROPERTY_PREVIEW_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviewToken(String previewToken) {
    this.previewToken = previewToken;
  }


  public Asset props(AssetProps props) {
    this.props = props;
    return this;
  }

   /**
   * Get props
   * @return props
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AssetProps getProps() {
    return props;
  }


  @JsonProperty(JSON_PROPERTY_PROPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProps(AssetProps props) {
    this.props = props;
  }


  public Asset quickRenditions(List<AssetQuickRenditionsInner> quickRenditions) {
    this.quickRenditions = quickRenditions;
    return this;
  }

  public Asset addQuickRenditionsItem(AssetQuickRenditionsInner quickRenditionsItem) {
    if (this.quickRenditions == null) {
      this.quickRenditions = new ArrayList<>();
    }
    this.quickRenditions.add(quickRenditionsItem);
    return this;
  }

   /**
   * Get quickRenditions
   * @return quickRenditions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUICK_RENDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AssetQuickRenditionsInner> getQuickRenditions() {
    return quickRenditions;
  }


  @JsonProperty(JSON_PROPERTY_QUICK_RENDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuickRenditions(List<AssetQuickRenditionsInner> quickRenditions) {
    this.quickRenditions = quickRenditions;
  }


  public Asset renditions(List<AssetRenditionsInner> renditions) {
    this.renditions = renditions;
    return this;
  }

  public Asset addRenditionsItem(AssetRenditionsInner renditionsItem) {
    if (this.renditions == null) {
      this.renditions = new ArrayList<>();
    }
    this.renditions.add(renditionsItem);
    return this;
  }

   /**
   * List of available renditions of this asset. Renditions are used for downloading assets, either original or processed.
   * @return renditions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RENDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AssetRenditionsInner> getRenditions() {
    return renditions;
  }


  @JsonProperty(JSON_PROPERTY_RENDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRenditions(List<AssetRenditionsInner> renditions) {
    this.renditions = renditions;
  }


  public Asset revisioncount(Integer revisioncount) {
    this.revisioncount = revisioncount;
    return this;
  }

   /**
   * Get revisioncount
   * @return revisioncount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REVISIONCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRevisioncount() {
    return revisioncount;
  }


  @JsonProperty(JSON_PROPERTY_REVISIONCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevisioncount(Integer revisioncount) {
    this.revisioncount = revisioncount;
  }


  public Asset thumbnailFields(AssetThumbnailFields thumbnailFields) {
    this.thumbnailFields = thumbnailFields;
    return this;
  }

   /**
   * Get thumbnailFields
   * @return thumbnailFields
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THUMBNAIL_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AssetThumbnailFields getThumbnailFields() {
    return thumbnailFields;
  }


  @JsonProperty(JSON_PROPERTY_THUMBNAIL_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThumbnailFields(AssetThumbnailFields thumbnailFields) {
    this.thumbnailFields = thumbnailFields;
  }


  public Asset uniqueid(String uniqueid) {
    this.uniqueid = uniqueid;
    return this;
  }

   /**
   * Unique ID of the asset. This ID is globally unique and created by IndexManager upon indexing
   * @return uniqueid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIQUEID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUniqueid() {
    return uniqueid;
  }


  @JsonProperty(JSON_PROPERTY_UNIQUEID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUniqueid(String uniqueid) {
    this.uniqueid = uniqueid;
  }


  public Asset workflowcount(Integer workflowcount) {
    this.workflowcount = workflowcount;
    return this;
  }

   /**
   * Get workflowcount
   * @return workflowcount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WORKFLOWCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWorkflowcount() {
    return workflowcount;
  }


  @JsonProperty(JSON_PROPERTY_WORKFLOWCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkflowcount(Integer workflowcount) {
    this.workflowcount = workflowcount;
  }


  /**
   * Return true if this Asset object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Asset asset = (Asset) o;
    return Objects.equals(this.archiveHREF, asset.archiveHREF) &&
        Objects.equals(this.ancestors, asset.ancestors) &&
        Objects.equals(this.attributes, asset.attributes) &&
        Objects.equals(this.builtinFields, asset.builtinFields) &&
        Objects.equals(this.capabilities, asset.capabilities) &&
        Objects.equals(this.created, asset.created) &&
        Objects.equals(this.createdBy, asset.createdBy) &&
        Objects.equals(this.doctype, asset.doctype) &&
        Objects.equals(this.downloadcount, asset.downloadcount) &&
        Objects.equals(this.dropHREF, asset.dropHREF) &&
        Objects.equals(this.filesize, asset.filesize) &&
        Objects.equals(this.filename, asset.filename) &&
        Objects.equals(this.href, asset.href) &&
        Objects.equals(this.linkstance, asset.linkstance) &&
        Objects.equals(this.consentStatus, asset.consentStatus) &&
        Objects.equals(this.physicalFileId, asset.physicalFileId) &&
        Objects.equals(this.metadata, asset.metadata) &&
        Objects.equals(this.metadataeditcount, asset.metadataeditcount) &&
        Objects.equals(this.metadataEditor, asset.metadataEditor) &&
        Objects.equals(this.modified, asset.modified) &&
        Objects.equals(this.modifiedBy, asset.modifiedBy) &&
        Objects.equals(this.permissions, asset.permissions) &&
        Objects.equals(this.pincount, asset.pincount) &&
        Objects.equals(this.previewcount, asset.previewcount) &&
        Objects.equals(this.previews, asset.previews) &&
        Objects.equals(this.previewToken, asset.previewToken) &&
        Objects.equals(this.props, asset.props) &&
        Objects.equals(this.quickRenditions, asset.quickRenditions) &&
        Objects.equals(this.renditions, asset.renditions) &&
        Objects.equals(this.revisioncount, asset.revisioncount) &&
        Objects.equals(this.thumbnailFields, asset.thumbnailFields) &&
        Objects.equals(this.uniqueid, asset.uniqueid) &&
        Objects.equals(this.workflowcount, asset.workflowcount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveHREF, ancestors, attributes, builtinFields, capabilities, created, createdBy, doctype, downloadcount, dropHREF, filesize, filename, href, linkstance, consentStatus, physicalFileId, metadata, metadataeditcount, metadataEditor, modified, modifiedBy, permissions, pincount, previewcount, previews, previewToken, props, quickRenditions, renditions, revisioncount, thumbnailFields, uniqueid, workflowcount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Asset {\n");
    sb.append("    archiveHREF: ").append(toIndentedString(archiveHREF)).append("\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    builtinFields: ").append(toIndentedString(builtinFields)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    doctype: ").append(toIndentedString(doctype)).append("\n");
    sb.append("    downloadcount: ").append(toIndentedString(downloadcount)).append("\n");
    sb.append("    dropHREF: ").append(toIndentedString(dropHREF)).append("\n");
    sb.append("    filesize: ").append(toIndentedString(filesize)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    linkstance: ").append(toIndentedString(linkstance)).append("\n");
    sb.append("    consentStatus: ").append(toIndentedString(consentStatus)).append("\n");
    sb.append("    physicalFileId: ").append(toIndentedString(physicalFileId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    metadataeditcount: ").append(toIndentedString(metadataeditcount)).append("\n");
    sb.append("    metadataEditor: ").append(toIndentedString(metadataEditor)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    pincount: ").append(toIndentedString(pincount)).append("\n");
    sb.append("    previewcount: ").append(toIndentedString(previewcount)).append("\n");
    sb.append("    previews: ").append(toIndentedString(previews)).append("\n");
    sb.append("    previewToken: ").append(toIndentedString(previewToken)).append("\n");
    sb.append("    props: ").append(toIndentedString(props)).append("\n");
    sb.append("    quickRenditions: ").append(toIndentedString(quickRenditions)).append("\n");
    sb.append("    renditions: ").append(toIndentedString(renditions)).append("\n");
    sb.append("    revisioncount: ").append(toIndentedString(revisioncount)).append("\n");
    sb.append("    thumbnailFields: ").append(toIndentedString(thumbnailFields)).append("\n");
    sb.append("    uniqueid: ").append(toIndentedString(uniqueid)).append("\n");
    sb.append("    workflowcount: ").append(toIndentedString(workflowcount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `archiveHREF` to the URL query string
    if (getArchiveHREF() != null) {
      joiner.add(String.format("%sarchiveHREF%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getArchiveHREF()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ancestors` to the URL query string
    if (getAncestors() != null) {
      for (int i = 0; i < getAncestors().size(); i++) {
        if (getAncestors().get(i) != null) {
          joiner.add(getAncestors().get(i).toUrlQueryString(String.format("%sancestors%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `attributes` to the URL query string
    if (getAttributes() != null) {
      joiner.add(getAttributes().toUrlQueryString(prefix + "attributes" + suffix));
    }

    // add `builtinFields` to the URL query string
    if (getBuiltinFields() != null) {
      for (int i = 0; i < getBuiltinFields().size(); i++) {
        if (getBuiltinFields().get(i) != null) {
          joiner.add(getBuiltinFields().get(i).toUrlQueryString(String.format("%sbuiltinFields%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `capabilities` to the URL query string
    if (getCapabilities() != null) {
      joiner.add(getCapabilities().toUrlQueryString(prefix + "capabilities" + suffix));
    }

    // add `created` to the URL query string
    if (getCreated() != null) {
      joiner.add(String.format("%screated%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `createdBy` to the URL query string
    if (getCreatedBy() != null) {
      joiner.add(String.format("%screatedBy%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedBy()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `doctype` to the URL query string
    if (getDoctype() != null) {
      joiner.add(String.format("%sdoctype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDoctype()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `downloadcount` to the URL query string
    if (getDownloadcount() != null) {
      joiner.add(String.format("%sdownloadcount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDownloadcount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dropHREF` to the URL query string
    if (getDropHREF() != null) {
      joiner.add(String.format("%sdropHREF%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDropHREF()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `filesize` to the URL query string
    if (getFilesize() != null) {
      joiner.add(String.format("%sfilesize%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFilesize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `filename` to the URL query string
    if (getFilename() != null) {
      joiner.add(String.format("%sfilename%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFilename()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `href` to the URL query string
    if (getHref() != null) {
      joiner.add(String.format("%shref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHref()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `linkstance` to the URL query string
    if (getLinkstance() != null) {
      joiner.add(String.format("%slinkstance%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLinkstance()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `consentStatus` to the URL query string
    if (getConsentStatus() != null) {
      joiner.add(getConsentStatus().toUrlQueryString(prefix + "consentStatus" + suffix));
    }

    // add `physicalFileId` to the URL query string
    if (getPhysicalFileId() != null) {
      joiner.add(String.format("%sphysicalFileId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPhysicalFileId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      joiner.add(String.format("%smetadata%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMetadata()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `metadataeditcount` to the URL query string
    if (getMetadataeditcount() != null) {
      joiner.add(String.format("%smetadataeditcount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMetadataeditcount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `metadataEditor` to the URL query string
    if (getMetadataEditor() != null) {
      joiner.add(getMetadataEditor().toUrlQueryString(prefix + "metadataEditor" + suffix));
    }

    // add `modified` to the URL query string
    if (getModified() != null) {
      joiner.add(String.format("%smodified%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModified()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `modifiedBy` to the URL query string
    if (getModifiedBy() != null) {
      joiner.add(String.format("%smodifiedBy%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModifiedBy()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `permissions` to the URL query string
    if (getPermissions() != null) {
      for (int i = 0; i < getPermissions().size(); i++) {
        joiner.add(String.format("%spermissions%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getPermissions().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `pincount` to the URL query string
    if (getPincount() != null) {
      joiner.add(String.format("%spincount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPincount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `previewcount` to the URL query string
    if (getPreviewcount() != null) {
      joiner.add(String.format("%spreviewcount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPreviewcount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `previews` to the URL query string
    if (getPreviews() != null) {
      for (int i = 0; i < getPreviews().size(); i++) {
        if (getPreviews().get(i) != null) {
          joiner.add(getPreviews().get(i).toUrlQueryString(String.format("%spreviews%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `previewToken` to the URL query string
    if (getPreviewToken() != null) {
      joiner.add(String.format("%spreviewToken%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPreviewToken()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `props` to the URL query string
    if (getProps() != null) {
      joiner.add(getProps().toUrlQueryString(prefix + "props" + suffix));
    }

    // add `quickRenditions` to the URL query string
    if (getQuickRenditions() != null) {
      for (int i = 0; i < getQuickRenditions().size(); i++) {
        if (getQuickRenditions().get(i) != null) {
          joiner.add(getQuickRenditions().get(i).toUrlQueryString(String.format("%squickRenditions%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `renditions` to the URL query string
    if (getRenditions() != null) {
      for (int i = 0; i < getRenditions().size(); i++) {
        if (getRenditions().get(i) != null) {
          joiner.add(getRenditions().get(i).toUrlQueryString(String.format("%srenditions%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `revisioncount` to the URL query string
    if (getRevisioncount() != null) {
      joiner.add(String.format("%srevisioncount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRevisioncount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `thumbnailFields` to the URL query string
    if (getThumbnailFields() != null) {
      joiner.add(getThumbnailFields().toUrlQueryString(prefix + "thumbnailFields" + suffix));
    }

    // add `uniqueid` to the URL query string
    if (getUniqueid() != null) {
      joiner.add(String.format("%suniqueid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUniqueid()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `workflowcount` to the URL query string
    if (getWorkflowcount() != null) {
      joiner.add(String.format("%sworkflowcount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWorkflowcount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

