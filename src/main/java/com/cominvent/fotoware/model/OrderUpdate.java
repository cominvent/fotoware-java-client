/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.cominvent.fotoware.model.Order;
import com.cominvent.fotoware.model.OrderUpdateOrderItemsInner;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Updating an order
 */
@JsonPropertyOrder({
  OrderUpdate.JSON_PROPERTY_ORDER_ITEMS,
  OrderUpdate.JSON_PROPERTY_EXPIRES,
  OrderUpdate.JSON_PROPERTY_ADMIN_COMMENT,
  OrderUpdate.JSON_PROPERTY_ORDER_DATA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OrderUpdate {
  public static final String JSON_PROPERTY_ORDER_ITEMS = "orderItems";
  private List<OrderUpdateOrderItemsInner> orderItems;

  public static final String JSON_PROPERTY_EXPIRES = "expires";
  private String expires;

  public static final String JSON_PROPERTY_ADMIN_COMMENT = "adminComment";
  private String adminComment;

  public static final String JSON_PROPERTY_ORDER_DATA = "orderData";
  private List<Order> orderData;

  public OrderUpdate() { 
  }

  public OrderUpdate orderItems(List<OrderUpdateOrderItemsInner> orderItems) {
    this.orderItems = orderItems;
    return this;
  }

  public OrderUpdate addOrderItemsItem(OrderUpdateOrderItemsInner orderItemsItem) {
    if (this.orderItems == null) {
      this.orderItems = new ArrayList<>();
    }
    this.orderItems.add(orderItemsItem);
    return this;
  }

   /**
   * Complete list of ordered items. This replaces the existing list. (Set to [] to empty the order.)
   * @return orderItems
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<OrderUpdateOrderItemsInner> getOrderItems() {
    return orderItems;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrderItems(List<OrderUpdateOrderItemsInner> orderItems) {
    this.orderItems = orderItems;
  }


  public OrderUpdate expires(String expires) {
    this.expires = expires;
    return this;
  }

   /**
   * Time when this order expires, null if if never expires. After the expiration time, the customer cannot download any renditions from this order any more. 
   * @return expires
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpires() {
    return expires;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpires(String expires) {
    this.expires = expires;
  }


  public OrderUpdate adminComment(String adminComment) {
    this.adminComment = adminComment;
    return this;
  }

   /**
   * Comment by the administrator on the order.
   * @return adminComment
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADMIN_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdminComment() {
    return adminComment;
  }


  @JsonProperty(JSON_PROPERTY_ADMIN_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdminComment(String adminComment) {
    this.adminComment = adminComment;
  }


  public OrderUpdate orderData(List<Order> orderData) {
    this.orderData = orderData;
    return this;
  }

  public OrderUpdate addOrderDataItem(Order orderDataItem) {
    if (this.orderData == null) {
      this.orderData = new ArrayList<>();
    }
    this.orderData.add(orderDataItem);
    return this;
  }

   /**
   * Custom order data for the order. Completely replaces existing custom order data.
   * @return orderData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Order> getOrderData() {
    return orderData;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrderData(List<Order> orderData) {
    this.orderData = orderData;
  }


  /**
   * Return true if this OrderUpdate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderUpdate orderUpdate = (OrderUpdate) o;
    return Objects.equals(this.orderItems, orderUpdate.orderItems) &&
        Objects.equals(this.expires, orderUpdate.expires) &&
        Objects.equals(this.adminComment, orderUpdate.adminComment) &&
        Objects.equals(this.orderData, orderUpdate.orderData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderItems, expires, adminComment, orderData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderUpdate {\n");
    sb.append("    orderItems: ").append(toIndentedString(orderItems)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    adminComment: ").append(toIndentedString(adminComment)).append("\n");
    sb.append("    orderData: ").append(toIndentedString(orderData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `orderItems` to the URL query string
    if (getOrderItems() != null) {
      for (int i = 0; i < getOrderItems().size(); i++) {
        if (getOrderItems().get(i) != null) {
          joiner.add(getOrderItems().get(i).toUrlQueryString(String.format("%sorderItems%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `expires` to the URL query string
    if (getExpires() != null) {
      joiner.add(String.format("%sexpires%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpires()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `adminComment` to the URL query string
    if (getAdminComment() != null) {
      joiner.add(String.format("%sadminComment%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAdminComment()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `orderData` to the URL query string
    if (getOrderData() != null) {
      for (int i = 0; i < getOrderData().size(); i++) {
        if (getOrderData().get(i) != null) {
          joiner.add(String.format("%sorderData%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getOrderData().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    return joiner.toString();
  }
}

