/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * * View - User has permission to access the information about and the contents of a collection. The API only exposes collections to which the request user has access, so this permission is always present * Preview - Quick renditions are available in asset data. * Download - Renditions are available in asset data. * EditText - User has permission to update metadata on assets. * CropRotate - User has permission to crop and rotate assets directly in FotoWeb. * Delete - User has permission to delete assets. * Comping - User has permission to request zoomed previews of assets. * TrdParty1 - Custom permission. Can be used to define custom behavior for assets in third-party applications using the API and the access list. * TrdParty2 - Custom permission. Can be used to define custom behavior for assets in third-party applications using the API and the access list. * TrdParty3 - Custom permission. Can be used to define custom behavior for assets in third-party applications using the API and the access list. * TrdParty4 - Custom permission. Can be used to define custom behavior for assets in third-party applications using the API and the access list. * Alert - User has permission to create alerts in a collection. * CopyTo - User has permission to copy assets to a collection.  * MoveTo -  User has permission to move assets to a collection. * CopyFrom - User has permission to copy assets to other collections. * MoveFrom - User has permissions to move assets to other collections. * Rename - User has permission to rename assets. * OpenFile - User has permission to open assets in FotoWeb Desktop. * EditFile - User has permission to edit assets in FotoWeb Desktop. * CropFile - User has permission to crop assets in FotoWeb Desktop. * UploadFile - User has permission to upload new assets to a collection. * FwdtPlace - User has permission to place assets in documents using FotoWeb Desktop extensions. * Export - User has permission to export assets to external systems. * Comment - User has permission to comment on assets, collections or other resources. * Remove - User has permission to remove assets from a link collection. * Reorder - User has permission to change the order of assets in a link collection. * SetPosterAsset - User has permission to change the poster asset of a collection. * Add - User has permission to add assets to a link collection. 
 */
public enum Permission {
  
  VIEW("View"),
  
  PREVIEW("Preview"),
  
  DOWNLOAD("Download"),
  
  EDITTEXT("EditText"),
  
  CROPROTATE("CropRotate"),
  
  DELETE("Delete"),
  
  COMPING("Comping"),
  
  TRDPARTY1("TrdParty1"),
  
  TRDPARTY2("TrdParty2"),
  
  TRDPARTY3("TrdParty3"),
  
  TRDPARTY4("TrdParty4"),
  
  ALERT("Alert"),
  
  COPYTO("CopyTo"),
  
  MOVETO("MoveTo"),
  
  COPYFROM("CopyFrom"),
  
  MOVEFROM("MoveFrom"),
  
  RENAME("Rename"),
  
  OPENFILE("OpenFile"),
  
  EDITFILE("EditFile"),
  
  CROPFILE("CropFile"),
  
  UPLOADFILE("UploadFile"),
  
  FWDTPLACE("FwdtPlace"),
  
  EXPORT("Export"),
  
  COMMENT("Comment"),
  
  REMOVE("Remove"),
  
  REORDER("Reorder"),
  
  SETPOSTERASSET("SetPosterAsset"),
  
  ADD("Add");

  private String value;

  Permission(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static Permission fromValue(String value) {
    for (Permission b : Permission.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    if (prefix == null) {
      prefix = "";
    }

    return String.format("%s=%s", prefix, this.toString());
  }

}

