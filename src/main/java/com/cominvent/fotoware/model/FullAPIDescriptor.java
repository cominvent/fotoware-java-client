/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.cominvent.fotoware.model.FullAPIDescriptorApiFeatureLevels;
import com.cominvent.fotoware.model.FullAPIDescriptorAppearance;
import com.cominvent.fotoware.model.FullAPIDescriptorOrder;
import com.cominvent.fotoware.model.FullAPIDescriptorPermissions;
import com.cominvent.fotoware.model.FullAPIDescriptorSecurity;
import com.cominvent.fotoware.model.FullAPIDescriptorServices;
import com.cominvent.fotoware.model.FullAPIDescriptorUpload;
import com.cominvent.fotoware.model.FullAPIDescriptorUser;
import com.cominvent.fotoware.model.FullAPIDescriptorUserManagement;
import com.cominvent.fotoware.model.FullAPIDescriptorViews;
import com.cominvent.fotoware.model.FullAPIDescriptorWidgets;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * FullAPIDescriptor
 */
@JsonPropertyOrder({
  FullAPIDescriptor.JSON_PROPERTY_ACTION_CROP_PRESETS,
  FullAPIDescriptor.JSON_PROPERTY_ACTIONS,
  FullAPIDescriptor.JSON_PROPERTY_ALERTS,
  FullAPIDescriptor.JSON_PROPERTY_ALBUMS,
  FullAPIDescriptor.JSON_PROPERTY_ALBUMS_ARCHIVED,
  FullAPIDescriptor.JSON_PROPERTY_ALBUMS_CONTRIBUTE,
  FullAPIDescriptor.JSON_PROPERTY_ALBUMS_DELETED,
  FullAPIDescriptor.JSON_PROPERTY_ALBUMS_OWN,
  FullAPIDescriptor.JSON_PROPERTY_ALBUMS_SHARED,
  FullAPIDescriptor.JSON_PROPERTY_APPEARANCE,
  FullAPIDescriptor.JSON_PROPERTY_ARCHIVES,
  FullAPIDescriptor.JSON_PROPERTY_BACKGROUND_TASKS,
  FullAPIDescriptor.JSON_PROPERTY_BOOKMARKS,
  FullAPIDescriptor.JSON_PROPERTY_COPY_TO,
  FullAPIDescriptor.JSON_PROPERTY_CROP_DOWNLOAD_PRESETS,
  FullAPIDescriptor.JSON_PROPERTY_DESTINATIONS,
  FullAPIDescriptor.JSON_PROPERTY_GROUPS,
  FullAPIDescriptor.JSON_PROPERTY_GROUPS_SEARCH,
  FullAPIDescriptor.JSON_PROPERTY_HREF,
  FullAPIDescriptor.JSON_PROPERTY_MARKERS,
  FullAPIDescriptor.JSON_PROPERTY_MOVE_TO,
  FullAPIDescriptor.JSON_PROPERTY_ORDER,
  FullAPIDescriptor.JSON_PROPERTY_PEOPLE_SEARCH,
  FullAPIDescriptor.JSON_PROPERTY_PERMISSIONS,
  FullAPIDescriptor.JSON_PROPERTY_PINS,
  FullAPIDescriptor.JSON_PROPERTY_SEARCH_U_R_L,
  FullAPIDescriptor.JSON_PROPERTY_SECURITY,
  FullAPIDescriptor.JSON_PROPERTY_SERVER,
  FullAPIDescriptor.JSON_PROPERTY_SERVICES,
  FullAPIDescriptor.JSON_PROPERTY_SIGNUPS,
  FullAPIDescriptor.JSON_PROPERTY_SITE_CONFIGURATION_HREF,
  FullAPIDescriptor.JSON_PROPERTY_TAXONOMIES,
  FullAPIDescriptor.JSON_PROPERTY_TOKENS,
  FullAPIDescriptor.JSON_PROPERTY_UPLOAD,
  FullAPIDescriptor.JSON_PROPERTY_UPLOAD_TO,
  FullAPIDescriptor.JSON_PROPERTY_UPLOAD_TOKENS,
  FullAPIDescriptor.JSON_PROPERTY_USER,
  FullAPIDescriptor.JSON_PROPERTY_USER_MANAGEMENT,
  FullAPIDescriptor.JSON_PROPERTY_USER_PREFERENCES,
  FullAPIDescriptor.JSON_PROPERTY_USERS_SEARCH,
  FullAPIDescriptor.JSON_PROPERTY_USERS,
  FullAPIDescriptor.JSON_PROPERTY_UTC_OFFSET,
  FullAPIDescriptor.JSON_PROPERTY_WIDGETS,
  FullAPIDescriptor.JSON_PROPERTY_VIEWS,
  FullAPIDescriptor.JSON_PROPERTY_API_FEATURE_LEVELS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FullAPIDescriptor {
  public static final String JSON_PROPERTY_ACTION_CROP_PRESETS = "actionCropPresets";
  private String actionCropPresets;

  public static final String JSON_PROPERTY_ACTIONS = "actions";
  private String actions;

  public static final String JSON_PROPERTY_ALERTS = "alerts";
  private String alerts;

  public static final String JSON_PROPERTY_ALBUMS = "albums";
  private String albums;

  public static final String JSON_PROPERTY_ALBUMS_ARCHIVED = "albums_archived";
  private String albumsArchived;

  public static final String JSON_PROPERTY_ALBUMS_CONTRIBUTE = "albums_contribute";
  private String albumsContribute;

  public static final String JSON_PROPERTY_ALBUMS_DELETED = "albums_deleted";
  private String albumsDeleted;

  public static final String JSON_PROPERTY_ALBUMS_OWN = "albums_own";
  private String albumsOwn;

  public static final String JSON_PROPERTY_ALBUMS_SHARED = "albums_shared";
  private String albumsShared;

  public static final String JSON_PROPERTY_APPEARANCE = "appearance";
  private FullAPIDescriptorAppearance appearance;

  public static final String JSON_PROPERTY_ARCHIVES = "archives";
  private String archives;

  public static final String JSON_PROPERTY_BACKGROUND_TASKS = "background_tasks";
  private String backgroundTasks;

  public static final String JSON_PROPERTY_BOOKMARKS = "bookmarks";
  private String bookmarks;

  public static final String JSON_PROPERTY_COPY_TO = "copy_to";
  private String copyTo;

  public static final String JSON_PROPERTY_CROP_DOWNLOAD_PRESETS = "cropDownloadPresets";
  private String cropDownloadPresets;

  public static final String JSON_PROPERTY_DESTINATIONS = "destinations";
  private String destinations;

  public static final String JSON_PROPERTY_GROUPS = "groups";
  private String groups;

  public static final String JSON_PROPERTY_GROUPS_SEARCH = "groups_search";
  private String groupsSearch;

  public static final String JSON_PROPERTY_HREF = "href";
  private String href;

  public static final String JSON_PROPERTY_MARKERS = "markers";
  private String markers;

  public static final String JSON_PROPERTY_MOVE_TO = "move_to";
  private String moveTo;

  public static final String JSON_PROPERTY_ORDER = "order";
  private FullAPIDescriptorOrder order;

  public static final String JSON_PROPERTY_PEOPLE_SEARCH = "people_search";
  private String peopleSearch;

  public static final String JSON_PROPERTY_PERMISSIONS = "permissions";
  private FullAPIDescriptorPermissions permissions;

  public static final String JSON_PROPERTY_PINS = "pins";
  private String pins;

  public static final String JSON_PROPERTY_SEARCH_U_R_L = "searchURL";
  private String searchURL;

  public static final String JSON_PROPERTY_SECURITY = "security";
  private FullAPIDescriptorSecurity security;

  public static final String JSON_PROPERTY_SERVER = "server";
  private String server;

  public static final String JSON_PROPERTY_SERVICES = "services";
  private FullAPIDescriptorServices services;

  public static final String JSON_PROPERTY_SIGNUPS = "signups";
  private String signups;

  public static final String JSON_PROPERTY_SITE_CONFIGURATION_HREF = "siteConfigurationHref";
  private String siteConfigurationHref;

  public static final String JSON_PROPERTY_TAXONOMIES = "taxonomies";
  private String taxonomies;

  public static final String JSON_PROPERTY_TOKENS = "tokens";
  private String tokens;

  public static final String JSON_PROPERTY_UPLOAD = "upload";
  private FullAPIDescriptorUpload upload;

  public static final String JSON_PROPERTY_UPLOAD_TO = "upload_to";
  private String uploadTo;

  public static final String JSON_PROPERTY_UPLOAD_TOKENS = "upload_tokens";
  private String uploadTokens;

  public static final String JSON_PROPERTY_USER = "user";
  private FullAPIDescriptorUser user;

  public static final String JSON_PROPERTY_USER_MANAGEMENT = "userManagement";
  private FullAPIDescriptorUserManagement userManagement;

  public static final String JSON_PROPERTY_USER_PREFERENCES = "user_preferences";
  private String userPreferences;

  public static final String JSON_PROPERTY_USERS_SEARCH = "users_search";
  private String usersSearch;

  public static final String JSON_PROPERTY_USERS = "users";
  private String users;

  public static final String JSON_PROPERTY_UTC_OFFSET = "utc_offset";
  private Integer utcOffset;

  public static final String JSON_PROPERTY_WIDGETS = "widgets";
  private FullAPIDescriptorWidgets widgets;

  public static final String JSON_PROPERTY_VIEWS = "views";
  private FullAPIDescriptorViews views;

  public static final String JSON_PROPERTY_API_FEATURE_LEVELS = "apiFeatureLevels";
  private FullAPIDescriptorApiFeatureLevels apiFeatureLevels;

  public FullAPIDescriptor() { 
  }

  public FullAPIDescriptor actionCropPresets(String actionCropPresets) {
    this.actionCropPresets = actionCropPresets;
    return this;
  }

   /**
   * Get actionCropPresets
   * @return actionCropPresets
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTION_CROP_PRESETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getActionCropPresets() {
    return actionCropPresets;
  }


  @JsonProperty(JSON_PROPERTY_ACTION_CROP_PRESETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActionCropPresets(String actionCropPresets) {
    this.actionCropPresets = actionCropPresets;
  }


  public FullAPIDescriptor actions(String actions) {
    this.actions = actions;
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getActions() {
    return actions;
  }


  @JsonProperty(JSON_PROPERTY_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActions(String actions) {
    this.actions = actions;
  }


  public FullAPIDescriptor alerts(String alerts) {
    this.alerts = alerts;
    return this;
  }

   /**
   * Get alerts
   * @return alerts
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALERTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlerts() {
    return alerts;
  }


  @JsonProperty(JSON_PROPERTY_ALERTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlerts(String alerts) {
    this.alerts = alerts;
  }


  public FullAPIDescriptor albums(String albums) {
    this.albums = albums;
    return this;
  }

   /**
   * URL of the list of albums accessible by current user. This list contains all albums that the user can access.
   * @return albums
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALBUMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlbums() {
    return albums;
  }


  @JsonProperty(JSON_PROPERTY_ALBUMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlbums(String albums) {
    this.albums = albums;
  }


  public FullAPIDescriptor albumsArchived(String albumsArchived) {
    this.albumsArchived = albumsArchived;
    return this;
  }

   /**
   * Get albumsArchived
   * @return albumsArchived
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALBUMS_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlbumsArchived() {
    return albumsArchived;
  }


  @JsonProperty(JSON_PROPERTY_ALBUMS_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlbumsArchived(String albumsArchived) {
    this.albumsArchived = albumsArchived;
  }


  public FullAPIDescriptor albumsContribute(String albumsContribute) {
    this.albumsContribute = albumsContribute;
    return this;
  }

   /**
   * Get albumsContribute
   * @return albumsContribute
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALBUMS_CONTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlbumsContribute() {
    return albumsContribute;
  }


  @JsonProperty(JSON_PROPERTY_ALBUMS_CONTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlbumsContribute(String albumsContribute) {
    this.albumsContribute = albumsContribute;
  }


  public FullAPIDescriptor albumsDeleted(String albumsDeleted) {
    this.albumsDeleted = albumsDeleted;
    return this;
  }

   /**
   * URL of the list of deleted albums owned by the current user.
   * @return albumsDeleted
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALBUMS_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlbumsDeleted() {
    return albumsDeleted;
  }


  @JsonProperty(JSON_PROPERTY_ALBUMS_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlbumsDeleted(String albumsDeleted) {
    this.albumsDeleted = albumsDeleted;
  }


  public FullAPIDescriptor albumsOwn(String albumsOwn) {
    this.albumsOwn = albumsOwn;
    return this;
  }

   /**
   * URL of the list of albums owned by the current user.
   * @return albumsOwn
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALBUMS_OWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlbumsOwn() {
    return albumsOwn;
  }


  @JsonProperty(JSON_PROPERTY_ALBUMS_OWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlbumsOwn(String albumsOwn) {
    this.albumsOwn = albumsOwn;
  }


  public FullAPIDescriptor albumsShared(String albumsShared) {
    this.albumsShared = albumsShared;
    return this;
  }

   /**
   * URL of the list of albums shared with the current user.
   * @return albumsShared
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALBUMS_SHARED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlbumsShared() {
    return albumsShared;
  }


  @JsonProperty(JSON_PROPERTY_ALBUMS_SHARED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlbumsShared(String albumsShared) {
    this.albumsShared = albumsShared;
  }


  public FullAPIDescriptor appearance(FullAPIDescriptorAppearance appearance) {
    this.appearance = appearance;
    return this;
  }

   /**
   * Get appearance
   * @return appearance
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPEARANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FullAPIDescriptorAppearance getAppearance() {
    return appearance;
  }


  @JsonProperty(JSON_PROPERTY_APPEARANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAppearance(FullAPIDescriptorAppearance appearance) {
    this.appearance = appearance;
  }


  public FullAPIDescriptor archives(String archives) {
    this.archives = archives;
    return this;
  }

   /**
   * URL of the list of archives that the current user can access. If server-to-server authentication is used, then this list contains all archives on the site. 
   * @return archives
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARCHIVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getArchives() {
    return archives;
  }


  @JsonProperty(JSON_PROPERTY_ARCHIVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArchives(String archives) {
    this.archives = archives;
  }


  public FullAPIDescriptor backgroundTasks(String backgroundTasks) {
    this.backgroundTasks = backgroundTasks;
    return this;
  }

   /**
   * Get backgroundTasks
   * @return backgroundTasks
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BACKGROUND_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBackgroundTasks() {
    return backgroundTasks;
  }


  @JsonProperty(JSON_PROPERTY_BACKGROUND_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBackgroundTasks(String backgroundTasks) {
    this.backgroundTasks = backgroundTasks;
  }


  public FullAPIDescriptor bookmarks(String bookmarks) {
    this.bookmarks = bookmarks;
    return this;
  }

   /**
   * Get bookmarks
   * @return bookmarks
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BOOKMARKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBookmarks() {
    return bookmarks;
  }


  @JsonProperty(JSON_PROPERTY_BOOKMARKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBookmarks(String bookmarks) {
    this.bookmarks = bookmarks;
  }


  public FullAPIDescriptor copyTo(String copyTo) {
    this.copyTo = copyTo;
    return this;
  }

   /**
   * URL of list of collections which to which assets can be copied.
   * @return copyTo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COPY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCopyTo() {
    return copyTo;
  }


  @JsonProperty(JSON_PROPERTY_COPY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCopyTo(String copyTo) {
    this.copyTo = copyTo;
  }


  public FullAPIDescriptor cropDownloadPresets(String cropDownloadPresets) {
    this.cropDownloadPresets = cropDownloadPresets;
    return this;
  }

   /**
   * Get cropDownloadPresets
   * @return cropDownloadPresets
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CROP_DOWNLOAD_PRESETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCropDownloadPresets() {
    return cropDownloadPresets;
  }


  @JsonProperty(JSON_PROPERTY_CROP_DOWNLOAD_PRESETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCropDownloadPresets(String cropDownloadPresets) {
    this.cropDownloadPresets = cropDownloadPresets;
  }


  public FullAPIDescriptor destinations(String destinations) {
    this.destinations = destinations;
    return this;
  }

   /**
   * Get destinations
   * @return destinations
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESTINATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDestinations() {
    return destinations;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinations(String destinations) {
    this.destinations = destinations;
  }


  public FullAPIDescriptor groups(String groups) {
    this.groups = groups;
    return this;
  }

   /**
   * Get groups
   * @return groups
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGroups() {
    return groups;
  }


  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroups(String groups) {
    this.groups = groups;
  }


  public FullAPIDescriptor groupsSearch(String groupsSearch) {
    this.groupsSearch = groupsSearch;
    return this;
  }

   /**
   * Get groupsSearch
   * @return groupsSearch
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUPS_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGroupsSearch() {
    return groupsSearch;
  }


  @JsonProperty(JSON_PROPERTY_GROUPS_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupsSearch(String groupsSearch) {
    this.groupsSearch = groupsSearch;
  }


  public FullAPIDescriptor href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHref() {
    return href;
  }


  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHref(String href) {
    this.href = href;
  }


  public FullAPIDescriptor markers(String markers) {
    this.markers = markers;
    return this;
  }

   /**
   * Get markers
   * @return markers
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MARKERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMarkers() {
    return markers;
  }


  @JsonProperty(JSON_PROPERTY_MARKERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarkers(String markers) {
    this.markers = markers;
  }


  public FullAPIDescriptor moveTo(String moveTo) {
    this.moveTo = moveTo;
    return this;
  }

   /**
   * URL of list of collections which to which assets can be moved.
   * @return moveTo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MOVE_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMoveTo() {
    return moveTo;
  }


  @JsonProperty(JSON_PROPERTY_MOVE_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMoveTo(String moveTo) {
    this.moveTo = moveTo;
  }


  public FullAPIDescriptor order(FullAPIDescriptorOrder order) {
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FullAPIDescriptorOrder getOrder() {
    return order;
  }


  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrder(FullAPIDescriptorOrder order) {
    this.order = order;
  }


  public FullAPIDescriptor peopleSearch(String peopleSearch) {
    this.peopleSearch = peopleSearch;
    return this;
  }

   /**
   * Get peopleSearch
   * @return peopleSearch
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PEOPLE_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPeopleSearch() {
    return peopleSearch;
  }


  @JsonProperty(JSON_PROPERTY_PEOPLE_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPeopleSearch(String peopleSearch) {
    this.peopleSearch = peopleSearch;
  }


  public FullAPIDescriptor permissions(FullAPIDescriptorPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FullAPIDescriptorPermissions getPermissions() {
    return permissions;
  }


  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPermissions(FullAPIDescriptorPermissions permissions) {
    this.permissions = permissions;
  }


  public FullAPIDescriptor pins(String pins) {
    this.pins = pins;
    return this;
  }

   /**
   * Get pins
   * @return pins
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPins() {
    return pins;
  }


  @JsonProperty(JSON_PROPERTY_PINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPins(String pins) {
    this.pins = pins;
  }


  public FullAPIDescriptor searchURL(String searchURL) {
    this.searchURL = searchURL;
    return this;
  }

   /**
   * URL template for global searches in all collections on the site. By replacing the placeholders in the template with search parameters, a client can search in all collections. 
   * @return searchURL
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEARCH_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSearchURL() {
    return searchURL;
  }


  @JsonProperty(JSON_PROPERTY_SEARCH_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSearchURL(String searchURL) {
    this.searchURL = searchURL;
  }


  public FullAPIDescriptor security(FullAPIDescriptorSecurity security) {
    this.security = security;
    return this;
  }

   /**
   * Get security
   * @return security
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FullAPIDescriptorSecurity getSecurity() {
    return security;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurity(FullAPIDescriptorSecurity security) {
    this.security = security;
  }


  public FullAPIDescriptor server(String server) {
    this.server = server;
    return this;
  }

   /**
   * Get server
   * @return server
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServer() {
    return server;
  }


  @JsonProperty(JSON_PROPERTY_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServer(String server) {
    this.server = server;
  }


  public FullAPIDescriptor services(FullAPIDescriptorServices services) {
    this.services = services;
    return this;
  }

   /**
   * Get services
   * @return services
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FullAPIDescriptorServices getServices() {
    return services;
  }


  @JsonProperty(JSON_PROPERTY_SERVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServices(FullAPIDescriptorServices services) {
    this.services = services;
  }


  public FullAPIDescriptor signups(String signups) {
    this.signups = signups;
    return this;
  }

   /**
   * Get signups
   * @return signups
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSignups() {
    return signups;
  }


  @JsonProperty(JSON_PROPERTY_SIGNUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignups(String signups) {
    this.signups = signups;
  }


  public FullAPIDescriptor siteConfigurationHref(String siteConfigurationHref) {
    this.siteConfigurationHref = siteConfigurationHref;
    return this;
  }

   /**
   * Get siteConfigurationHref
   * @return siteConfigurationHref
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SITE_CONFIGURATION_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSiteConfigurationHref() {
    return siteConfigurationHref;
  }


  @JsonProperty(JSON_PROPERTY_SITE_CONFIGURATION_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSiteConfigurationHref(String siteConfigurationHref) {
    this.siteConfigurationHref = siteConfigurationHref;
  }


  public FullAPIDescriptor taxonomies(String taxonomies) {
    this.taxonomies = taxonomies;
    return this;
  }

   /**
   * Get taxonomies
   * @return taxonomies
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXONOMIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxonomies() {
    return taxonomies;
  }


  @JsonProperty(JSON_PROPERTY_TAXONOMIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxonomies(String taxonomies) {
    this.taxonomies = taxonomies;
  }


  public FullAPIDescriptor tokens(String tokens) {
    this.tokens = tokens;
    return this;
  }

   /**
   * Get tokens
   * @return tokens
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTokens() {
    return tokens;
  }


  @JsonProperty(JSON_PROPERTY_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTokens(String tokens) {
    this.tokens = tokens;
  }


  public FullAPIDescriptor upload(FullAPIDescriptorUpload upload) {
    this.upload = upload;
    return this;
  }

   /**
   * Get upload
   * @return upload
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FullAPIDescriptorUpload getUpload() {
    return upload;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpload(FullAPIDescriptorUpload upload) {
    this.upload = upload;
  }


  public FullAPIDescriptor uploadTo(String uploadTo) {
    this.uploadTo = uploadTo;
    return this;
  }

   /**
   * URL of list of collections which to which assets can be uploaded.
   * @return uploadTo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOAD_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUploadTo() {
    return uploadTo;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadTo(String uploadTo) {
    this.uploadTo = uploadTo;
  }


  public FullAPIDescriptor uploadTokens(String uploadTokens) {
    this.uploadTokens = uploadTokens;
    return this;
  }

   /**
   * Get uploadTokens
   * @return uploadTokens
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOAD_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUploadTokens() {
    return uploadTokens;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadTokens(String uploadTokens) {
    this.uploadTokens = uploadTokens;
  }


  public FullAPIDescriptor user(FullAPIDescriptorUser user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FullAPIDescriptorUser getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(FullAPIDescriptorUser user) {
    this.user = user;
  }


  public FullAPIDescriptor userManagement(FullAPIDescriptorUserManagement userManagement) {
    this.userManagement = userManagement;
    return this;
  }

   /**
   * Get userManagement
   * @return userManagement
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_MANAGEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FullAPIDescriptorUserManagement getUserManagement() {
    return userManagement;
  }


  @JsonProperty(JSON_PROPERTY_USER_MANAGEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserManagement(FullAPIDescriptorUserManagement userManagement) {
    this.userManagement = userManagement;
  }


  public FullAPIDescriptor userPreferences(String userPreferences) {
    this.userPreferences = userPreferences;
    return this;
  }

   /**
   * Get userPreferences
   * @return userPreferences
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_PREFERENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserPreferences() {
    return userPreferences;
  }


  @JsonProperty(JSON_PROPERTY_USER_PREFERENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserPreferences(String userPreferences) {
    this.userPreferences = userPreferences;
  }


  public FullAPIDescriptor usersSearch(String usersSearch) {
    this.usersSearch = usersSearch;
    return this;
  }

   /**
   * Get usersSearch
   * @return usersSearch
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERS_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsersSearch() {
    return usersSearch;
  }


  @JsonProperty(JSON_PROPERTY_USERS_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsersSearch(String usersSearch) {
    this.usersSearch = usersSearch;
  }


  public FullAPIDescriptor users(String users) {
    this.users = users;
    return this;
  }

   /**
   * Get users
   * @return users
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsers() {
    return users;
  }


  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsers(String users) {
    this.users = users;
  }


  public FullAPIDescriptor utcOffset(Integer utcOffset) {
    this.utcOffset = utcOffset;
    return this;
  }

   /**
   * Get utcOffset
   * @return utcOffset
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UTC_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUtcOffset() {
    return utcOffset;
  }


  @JsonProperty(JSON_PROPERTY_UTC_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUtcOffset(Integer utcOffset) {
    this.utcOffset = utcOffset;
  }


  public FullAPIDescriptor widgets(FullAPIDescriptorWidgets widgets) {
    this.widgets = widgets;
    return this;
  }

   /**
   * Get widgets
   * @return widgets
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDGETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FullAPIDescriptorWidgets getWidgets() {
    return widgets;
  }


  @JsonProperty(JSON_PROPERTY_WIDGETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidgets(FullAPIDescriptorWidgets widgets) {
    this.widgets = widgets;
  }


  public FullAPIDescriptor views(FullAPIDescriptorViews views) {
    this.views = views;
    return this;
  }

   /**
   * Get views
   * @return views
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VIEWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FullAPIDescriptorViews getViews() {
    return views;
  }


  @JsonProperty(JSON_PROPERTY_VIEWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setViews(FullAPIDescriptorViews views) {
    this.views = views;
  }


  public FullAPIDescriptor apiFeatureLevels(FullAPIDescriptorApiFeatureLevels apiFeatureLevels) {
    this.apiFeatureLevels = apiFeatureLevels;
    return this;
  }

   /**
   * Get apiFeatureLevels
   * @return apiFeatureLevels
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_API_FEATURE_LEVELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FullAPIDescriptorApiFeatureLevels getApiFeatureLevels() {
    return apiFeatureLevels;
  }


  @JsonProperty(JSON_PROPERTY_API_FEATURE_LEVELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApiFeatureLevels(FullAPIDescriptorApiFeatureLevels apiFeatureLevels) {
    this.apiFeatureLevels = apiFeatureLevels;
  }


  /**
   * Return true if this FullAPIDescriptor object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FullAPIDescriptor fullAPIDescriptor = (FullAPIDescriptor) o;
    return Objects.equals(this.actionCropPresets, fullAPIDescriptor.actionCropPresets) &&
        Objects.equals(this.actions, fullAPIDescriptor.actions) &&
        Objects.equals(this.alerts, fullAPIDescriptor.alerts) &&
        Objects.equals(this.albums, fullAPIDescriptor.albums) &&
        Objects.equals(this.albumsArchived, fullAPIDescriptor.albumsArchived) &&
        Objects.equals(this.albumsContribute, fullAPIDescriptor.albumsContribute) &&
        Objects.equals(this.albumsDeleted, fullAPIDescriptor.albumsDeleted) &&
        Objects.equals(this.albumsOwn, fullAPIDescriptor.albumsOwn) &&
        Objects.equals(this.albumsShared, fullAPIDescriptor.albumsShared) &&
        Objects.equals(this.appearance, fullAPIDescriptor.appearance) &&
        Objects.equals(this.archives, fullAPIDescriptor.archives) &&
        Objects.equals(this.backgroundTasks, fullAPIDescriptor.backgroundTasks) &&
        Objects.equals(this.bookmarks, fullAPIDescriptor.bookmarks) &&
        Objects.equals(this.copyTo, fullAPIDescriptor.copyTo) &&
        Objects.equals(this.cropDownloadPresets, fullAPIDescriptor.cropDownloadPresets) &&
        Objects.equals(this.destinations, fullAPIDescriptor.destinations) &&
        Objects.equals(this.groups, fullAPIDescriptor.groups) &&
        Objects.equals(this.groupsSearch, fullAPIDescriptor.groupsSearch) &&
        Objects.equals(this.href, fullAPIDescriptor.href) &&
        Objects.equals(this.markers, fullAPIDescriptor.markers) &&
        Objects.equals(this.moveTo, fullAPIDescriptor.moveTo) &&
        Objects.equals(this.order, fullAPIDescriptor.order) &&
        Objects.equals(this.peopleSearch, fullAPIDescriptor.peopleSearch) &&
        Objects.equals(this.permissions, fullAPIDescriptor.permissions) &&
        Objects.equals(this.pins, fullAPIDescriptor.pins) &&
        Objects.equals(this.searchURL, fullAPIDescriptor.searchURL) &&
        Objects.equals(this.security, fullAPIDescriptor.security) &&
        Objects.equals(this.server, fullAPIDescriptor.server) &&
        Objects.equals(this.services, fullAPIDescriptor.services) &&
        Objects.equals(this.signups, fullAPIDescriptor.signups) &&
        Objects.equals(this.siteConfigurationHref, fullAPIDescriptor.siteConfigurationHref) &&
        Objects.equals(this.taxonomies, fullAPIDescriptor.taxonomies) &&
        Objects.equals(this.tokens, fullAPIDescriptor.tokens) &&
        Objects.equals(this.upload, fullAPIDescriptor.upload) &&
        Objects.equals(this.uploadTo, fullAPIDescriptor.uploadTo) &&
        Objects.equals(this.uploadTokens, fullAPIDescriptor.uploadTokens) &&
        Objects.equals(this.user, fullAPIDescriptor.user) &&
        Objects.equals(this.userManagement, fullAPIDescriptor.userManagement) &&
        Objects.equals(this.userPreferences, fullAPIDescriptor.userPreferences) &&
        Objects.equals(this.usersSearch, fullAPIDescriptor.usersSearch) &&
        Objects.equals(this.users, fullAPIDescriptor.users) &&
        Objects.equals(this.utcOffset, fullAPIDescriptor.utcOffset) &&
        Objects.equals(this.widgets, fullAPIDescriptor.widgets) &&
        Objects.equals(this.views, fullAPIDescriptor.views) &&
        Objects.equals(this.apiFeatureLevels, fullAPIDescriptor.apiFeatureLevels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionCropPresets, actions, alerts, albums, albumsArchived, albumsContribute, albumsDeleted, albumsOwn, albumsShared, appearance, archives, backgroundTasks, bookmarks, copyTo, cropDownloadPresets, destinations, groups, groupsSearch, href, markers, moveTo, order, peopleSearch, permissions, pins, searchURL, security, server, services, signups, siteConfigurationHref, taxonomies, tokens, upload, uploadTo, uploadTokens, user, userManagement, userPreferences, usersSearch, users, utcOffset, widgets, views, apiFeatureLevels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FullAPIDescriptor {\n");
    sb.append("    actionCropPresets: ").append(toIndentedString(actionCropPresets)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    alerts: ").append(toIndentedString(alerts)).append("\n");
    sb.append("    albums: ").append(toIndentedString(albums)).append("\n");
    sb.append("    albumsArchived: ").append(toIndentedString(albumsArchived)).append("\n");
    sb.append("    albumsContribute: ").append(toIndentedString(albumsContribute)).append("\n");
    sb.append("    albumsDeleted: ").append(toIndentedString(albumsDeleted)).append("\n");
    sb.append("    albumsOwn: ").append(toIndentedString(albumsOwn)).append("\n");
    sb.append("    albumsShared: ").append(toIndentedString(albumsShared)).append("\n");
    sb.append("    appearance: ").append(toIndentedString(appearance)).append("\n");
    sb.append("    archives: ").append(toIndentedString(archives)).append("\n");
    sb.append("    backgroundTasks: ").append(toIndentedString(backgroundTasks)).append("\n");
    sb.append("    bookmarks: ").append(toIndentedString(bookmarks)).append("\n");
    sb.append("    copyTo: ").append(toIndentedString(copyTo)).append("\n");
    sb.append("    cropDownloadPresets: ").append(toIndentedString(cropDownloadPresets)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    groupsSearch: ").append(toIndentedString(groupsSearch)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    markers: ").append(toIndentedString(markers)).append("\n");
    sb.append("    moveTo: ").append(toIndentedString(moveTo)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    peopleSearch: ").append(toIndentedString(peopleSearch)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    pins: ").append(toIndentedString(pins)).append("\n");
    sb.append("    searchURL: ").append(toIndentedString(searchURL)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    signups: ").append(toIndentedString(signups)).append("\n");
    sb.append("    siteConfigurationHref: ").append(toIndentedString(siteConfigurationHref)).append("\n");
    sb.append("    taxonomies: ").append(toIndentedString(taxonomies)).append("\n");
    sb.append("    tokens: ").append(toIndentedString(tokens)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    uploadTo: ").append(toIndentedString(uploadTo)).append("\n");
    sb.append("    uploadTokens: ").append(toIndentedString(uploadTokens)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userManagement: ").append(toIndentedString(userManagement)).append("\n");
    sb.append("    userPreferences: ").append(toIndentedString(userPreferences)).append("\n");
    sb.append("    usersSearch: ").append(toIndentedString(usersSearch)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    utcOffset: ").append(toIndentedString(utcOffset)).append("\n");
    sb.append("    widgets: ").append(toIndentedString(widgets)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("    apiFeatureLevels: ").append(toIndentedString(apiFeatureLevels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `actionCropPresets` to the URL query string
    if (getActionCropPresets() != null) {
      joiner.add(String.format("%sactionCropPresets%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getActionCropPresets()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `actions` to the URL query string
    if (getActions() != null) {
      joiner.add(String.format("%sactions%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getActions()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `alerts` to the URL query string
    if (getAlerts() != null) {
      joiner.add(String.format("%salerts%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlerts()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `albums` to the URL query string
    if (getAlbums() != null) {
      joiner.add(String.format("%salbums%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlbums()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `albums_archived` to the URL query string
    if (getAlbumsArchived() != null) {
      joiner.add(String.format("%salbums_archived%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlbumsArchived()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `albums_contribute` to the URL query string
    if (getAlbumsContribute() != null) {
      joiner.add(String.format("%salbums_contribute%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlbumsContribute()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `albums_deleted` to the URL query string
    if (getAlbumsDeleted() != null) {
      joiner.add(String.format("%salbums_deleted%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlbumsDeleted()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `albums_own` to the URL query string
    if (getAlbumsOwn() != null) {
      joiner.add(String.format("%salbums_own%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlbumsOwn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `albums_shared` to the URL query string
    if (getAlbumsShared() != null) {
      joiner.add(String.format("%salbums_shared%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlbumsShared()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `appearance` to the URL query string
    if (getAppearance() != null) {
      joiner.add(getAppearance().toUrlQueryString(prefix + "appearance" + suffix));
    }

    // add `archives` to the URL query string
    if (getArchives() != null) {
      joiner.add(String.format("%sarchives%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getArchives()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `background_tasks` to the URL query string
    if (getBackgroundTasks() != null) {
      joiner.add(String.format("%sbackground_tasks%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBackgroundTasks()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `bookmarks` to the URL query string
    if (getBookmarks() != null) {
      joiner.add(String.format("%sbookmarks%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBookmarks()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `copy_to` to the URL query string
    if (getCopyTo() != null) {
      joiner.add(String.format("%scopy_to%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCopyTo()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cropDownloadPresets` to the URL query string
    if (getCropDownloadPresets() != null) {
      joiner.add(String.format("%scropDownloadPresets%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCropDownloadPresets()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `destinations` to the URL query string
    if (getDestinations() != null) {
      joiner.add(String.format("%sdestinations%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDestinations()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `groups` to the URL query string
    if (getGroups() != null) {
      joiner.add(String.format("%sgroups%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGroups()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `groups_search` to the URL query string
    if (getGroupsSearch() != null) {
      joiner.add(String.format("%sgroups_search%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGroupsSearch()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `href` to the URL query string
    if (getHref() != null) {
      joiner.add(String.format("%shref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHref()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `markers` to the URL query string
    if (getMarkers() != null) {
      joiner.add(String.format("%smarkers%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMarkers()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `move_to` to the URL query string
    if (getMoveTo() != null) {
      joiner.add(String.format("%smove_to%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMoveTo()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `order` to the URL query string
    if (getOrder() != null) {
      joiner.add(getOrder().toUrlQueryString(prefix + "order" + suffix));
    }

    // add `people_search` to the URL query string
    if (getPeopleSearch() != null) {
      joiner.add(String.format("%speople_search%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPeopleSearch()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `permissions` to the URL query string
    if (getPermissions() != null) {
      joiner.add(getPermissions().toUrlQueryString(prefix + "permissions" + suffix));
    }

    // add `pins` to the URL query string
    if (getPins() != null) {
      joiner.add(String.format("%spins%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPins()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `searchURL` to the URL query string
    if (getSearchURL() != null) {
      joiner.add(String.format("%ssearchURL%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSearchURL()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `security` to the URL query string
    if (getSecurity() != null) {
      joiner.add(getSecurity().toUrlQueryString(prefix + "security" + suffix));
    }

    // add `server` to the URL query string
    if (getServer() != null) {
      joiner.add(String.format("%sserver%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getServer()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `services` to the URL query string
    if (getServices() != null) {
      joiner.add(getServices().toUrlQueryString(prefix + "services" + suffix));
    }

    // add `signups` to the URL query string
    if (getSignups() != null) {
      joiner.add(String.format("%ssignups%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSignups()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `siteConfigurationHref` to the URL query string
    if (getSiteConfigurationHref() != null) {
      joiner.add(String.format("%ssiteConfigurationHref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSiteConfigurationHref()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `taxonomies` to the URL query string
    if (getTaxonomies() != null) {
      joiner.add(String.format("%staxonomies%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTaxonomies()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tokens` to the URL query string
    if (getTokens() != null) {
      joiner.add(String.format("%stokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTokens()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `upload` to the URL query string
    if (getUpload() != null) {
      joiner.add(getUpload().toUrlQueryString(prefix + "upload" + suffix));
    }

    // add `upload_to` to the URL query string
    if (getUploadTo() != null) {
      joiner.add(String.format("%supload_to%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUploadTo()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `upload_tokens` to the URL query string
    if (getUploadTokens() != null) {
      joiner.add(String.format("%supload_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUploadTokens()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `user` to the URL query string
    if (getUser() != null) {
      joiner.add(getUser().toUrlQueryString(prefix + "user" + suffix));
    }

    // add `userManagement` to the URL query string
    if (getUserManagement() != null) {
      joiner.add(getUserManagement().toUrlQueryString(prefix + "userManagement" + suffix));
    }

    // add `user_preferences` to the URL query string
    if (getUserPreferences() != null) {
      joiner.add(String.format("%suser_preferences%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserPreferences()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `users_search` to the URL query string
    if (getUsersSearch() != null) {
      joiner.add(String.format("%susers_search%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUsersSearch()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `users` to the URL query string
    if (getUsers() != null) {
      joiner.add(String.format("%susers%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUsers()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `utc_offset` to the URL query string
    if (getUtcOffset() != null) {
      joiner.add(String.format("%sutc_offset%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUtcOffset()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `widgets` to the URL query string
    if (getWidgets() != null) {
      joiner.add(getWidgets().toUrlQueryString(prefix + "widgets" + suffix));
    }

    // add `views` to the URL query string
    if (getViews() != null) {
      joiner.add(getViews().toUrlQueryString(prefix + "views" + suffix));
    }

    // add `apiFeatureLevels` to the URL query string
    if (getApiFeatureLevels() != null) {
      joiner.add(getApiFeatureLevels().toUrlQueryString(prefix + "apiFeatureLevels" + suffix));
    }

    return joiner.toString();
  }
}

