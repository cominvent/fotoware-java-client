/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.cominvent.fotoware.model.AssetConsentCategoryApiModel;
import com.cominvent.fotoware.model.AssetConsentFlag;
import com.cominvent.fotoware.model.ConsentFormAssetConsentState;
import com.cominvent.fotoware.model.ConsentFormStateCount;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Consent status of an asset
 */
@JsonPropertyOrder({
  ConsentStatus.JSON_PROPERTY_ASSET_CONSENT_STATE,
  ConsentStatus.JSON_PROPERTY_APPROVED_CONSENTS,
  ConsentStatus.JSON_PROPERTY_DECLINED_CONSENTS,
  ConsentStatus.JSON_PROPERTY_CONSENT_FLAGS,
  ConsentStatus.JSON_PROPERTY_CONSENT_FORM_COUNT,
  ConsentStatus.JSON_PROPERTY_COUNT_BY_CONSENT_FORM_STATE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConsentStatus {
  public static final String JSON_PROPERTY_ASSET_CONSENT_STATE = "assetConsentState";
  private ConsentFormAssetConsentState assetConsentState;

  public static final String JSON_PROPERTY_APPROVED_CONSENTS = "approvedConsents";
  private List<AssetConsentCategoryApiModel> approvedConsents;

  public static final String JSON_PROPERTY_DECLINED_CONSENTS = "declinedConsents";
  private List<AssetConsentCategoryApiModel> declinedConsents;

  public static final String JSON_PROPERTY_CONSENT_FLAGS = "ConsentFlags";
  private Set<AssetConsentFlag> consentFlags;

  public static final String JSON_PROPERTY_CONSENT_FORM_COUNT = "consentFormCount";
  private Integer consentFormCount;

  public static final String JSON_PROPERTY_COUNT_BY_CONSENT_FORM_STATE = "countByConsentFormState";
  private List<ConsentFormStateCount> countByConsentFormState;

  public ConsentStatus() { 
  }

  @JsonCreator
  public ConsentStatus(
    @JsonProperty(JSON_PROPERTY_COUNT_BY_CONSENT_FORM_STATE) List<ConsentFormStateCount> countByConsentFormState
  ) {
  this();
    this.countByConsentFormState = countByConsentFormState;
  }

  public ConsentStatus assetConsentState(ConsentFormAssetConsentState assetConsentState) {
    this.assetConsentState = assetConsentState;
    return this;
  }

   /**
   * Get assetConsentState
   * @return assetConsentState
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASSET_CONSENT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConsentFormAssetConsentState getAssetConsentState() {
    return assetConsentState;
  }


  @JsonProperty(JSON_PROPERTY_ASSET_CONSENT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAssetConsentState(ConsentFormAssetConsentState assetConsentState) {
    this.assetConsentState = assetConsentState;
  }


  public ConsentStatus approvedConsents(List<AssetConsentCategoryApiModel> approvedConsents) {
    this.approvedConsents = approvedConsents;
    return this;
  }

  public ConsentStatus addApprovedConsentsItem(AssetConsentCategoryApiModel approvedConsentsItem) {
    if (this.approvedConsents == null) {
      this.approvedConsents = new ArrayList<>();
    }
    this.approvedConsents.add(approvedConsentsItem);
    return this;
  }

   /**
   * An intersection of valid and approved consent categories from the linked consent forms
   * @return approvedConsents
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPROVED_CONSENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AssetConsentCategoryApiModel> getApprovedConsents() {
    return approvedConsents;
  }


  @JsonProperty(JSON_PROPERTY_APPROVED_CONSENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApprovedConsents(List<AssetConsentCategoryApiModel> approvedConsents) {
    this.approvedConsents = approvedConsents;
  }


  public ConsentStatus declinedConsents(List<AssetConsentCategoryApiModel> declinedConsents) {
    this.declinedConsents = declinedConsents;
    return this;
  }

  public ConsentStatus addDeclinedConsentsItem(AssetConsentCategoryApiModel declinedConsentsItem) {
    if (this.declinedConsents == null) {
      this.declinedConsents = new ArrayList<>();
    }
    this.declinedConsents.add(declinedConsentsItem);
    return this;
  }

   /**
   * An sum of declined consent categories from the linked consent forms
   * @return declinedConsents
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DECLINED_CONSENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AssetConsentCategoryApiModel> getDeclinedConsents() {
    return declinedConsents;
  }


  @JsonProperty(JSON_PROPERTY_DECLINED_CONSENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeclinedConsents(List<AssetConsentCategoryApiModel> declinedConsents) {
    this.declinedConsents = declinedConsents;
  }


  public ConsentStatus consentFlags(Set<AssetConsentFlag> consentFlags) {
    this.consentFlags = consentFlags;
    return this;
  }

  public ConsentStatus addConsentFlagsItem(AssetConsentFlag consentFlagsItem) {
    if (this.consentFlags == null) {
      this.consentFlags = new LinkedHashSet<>();
    }
    this.consentFlags.add(consentFlagsItem);
    return this;
  }

   /**
   * A collection of consent flags for the asset
   * @return consentFlags
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSENT_FLAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<AssetConsentFlag> getConsentFlags() {
    return consentFlags;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_CONSENT_FLAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConsentFlags(Set<AssetConsentFlag> consentFlags) {
    this.consentFlags = consentFlags;
  }


  public ConsentStatus consentFormCount(Integer consentFormCount) {
    this.consentFormCount = consentFormCount;
    return this;
  }

   /**
   * The number of consent forms linked to the asset
   * @return consentFormCount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSENT_FORM_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getConsentFormCount() {
    return consentFormCount;
  }


  @JsonProperty(JSON_PROPERTY_CONSENT_FORM_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConsentFormCount(Integer consentFormCount) {
    this.consentFormCount = consentFormCount;
  }


   /**
   * A collection of information about the count of consent form per state
   * @return countByConsentFormState
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNT_BY_CONSENT_FORM_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ConsentFormStateCount> getCountByConsentFormState() {
    return countByConsentFormState;
  }




  /**
   * Return true if this ConsentStatus object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsentStatus consentStatus = (ConsentStatus) o;
    return Objects.equals(this.assetConsentState, consentStatus.assetConsentState) &&
        Objects.equals(this.approvedConsents, consentStatus.approvedConsents) &&
        Objects.equals(this.declinedConsents, consentStatus.declinedConsents) &&
        Objects.equals(this.consentFlags, consentStatus.consentFlags) &&
        Objects.equals(this.consentFormCount, consentStatus.consentFormCount) &&
        Objects.equals(this.countByConsentFormState, consentStatus.countByConsentFormState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetConsentState, approvedConsents, declinedConsents, consentFlags, consentFormCount, countByConsentFormState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsentStatus {\n");
    sb.append("    assetConsentState: ").append(toIndentedString(assetConsentState)).append("\n");
    sb.append("    approvedConsents: ").append(toIndentedString(approvedConsents)).append("\n");
    sb.append("    declinedConsents: ").append(toIndentedString(declinedConsents)).append("\n");
    sb.append("    consentFlags: ").append(toIndentedString(consentFlags)).append("\n");
    sb.append("    consentFormCount: ").append(toIndentedString(consentFormCount)).append("\n");
    sb.append("    countByConsentFormState: ").append(toIndentedString(countByConsentFormState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `assetConsentState` to the URL query string
    if (getAssetConsentState() != null) {
      joiner.add(String.format("%sassetConsentState%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAssetConsentState()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `approvedConsents` to the URL query string
    if (getApprovedConsents() != null) {
      for (int i = 0; i < getApprovedConsents().size(); i++) {
        if (getApprovedConsents().get(i) != null) {
          joiner.add(getApprovedConsents().get(i).toUrlQueryString(String.format("%sapprovedConsents%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `declinedConsents` to the URL query string
    if (getDeclinedConsents() != null) {
      for (int i = 0; i < getDeclinedConsents().size(); i++) {
        if (getDeclinedConsents().get(i) != null) {
          joiner.add(getDeclinedConsents().get(i).toUrlQueryString(String.format("%sdeclinedConsents%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `ConsentFlags` to the URL query string
    if (getConsentFlags() != null) {
      int i = 0;
      for (AssetConsentFlag _item : getConsentFlags()) {
        if (_item != null) {
          joiner.add(String.format("%sConsentFlags%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(_item), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
        i++;
      }
    }

    // add `consentFormCount` to the URL query string
    if (getConsentFormCount() != null) {
      joiner.add(String.format("%sconsentFormCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConsentFormCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `countByConsentFormState` to the URL query string
    if (getCountByConsentFormState() != null) {
      for (int i = 0; i < getCountByConsentFormState().size(); i++) {
        if (getCountByConsentFormState().get(i) != null) {
          joiner.add(getCountByConsentFormState().get(i).toUrlQueryString(String.format("%scountByConsentFormState%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

