/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.cominvent.fotoware.model.ExternalId;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * User account information
 */
@JsonPropertyOrder({
  Account.JSON_PROPERTY_PASSWORD,
  Account.JSON_PROPERTY_HAS_PASSWORD,
  Account.JSON_PROPERTY_DELETE_PASSWORD,
  Account.JSON_PROPERTY_FORCE_PASSWORD_CHANGE,
  Account.JSON_PROPERTY_ALLOW_PASSWORD_CHANGE,
  Account.JSON_PROPERTY_LAST_LOGIN_DATE,
  Account.JSON_PROPERTY_EXPIRES,
  Account.JSON_PROPERTY_IS_ENABLED,
  Account.JSON_PROPERTY_EXTERNAL_IDS,
  Account.JSON_PROPERTY_IS_SSO_USER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Account {
  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public static final String JSON_PROPERTY_HAS_PASSWORD = "hasPassword";
  private Boolean hasPassword;

  public static final String JSON_PROPERTY_DELETE_PASSWORD = "deletePassword";
  private Boolean deletePassword;

  public static final String JSON_PROPERTY_FORCE_PASSWORD_CHANGE = "forcePasswordChange";
  private Boolean forcePasswordChange;

  public static final String JSON_PROPERTY_ALLOW_PASSWORD_CHANGE = "allowPasswordChange";
  private Boolean allowPasswordChange;

  public static final String JSON_PROPERTY_LAST_LOGIN_DATE = "lastLoginDate";
  private OffsetDateTime lastLoginDate;

  public static final String JSON_PROPERTY_EXPIRES = "expires";
  private OffsetDateTime expires;

  public static final String JSON_PROPERTY_IS_ENABLED = "isEnabled";
  private Boolean isEnabled;

  public static final String JSON_PROPERTY_EXTERNAL_IDS = "externalIds";
  private List<ExternalId> externalIds = new ArrayList<>();

  public static final String JSON_PROPERTY_IS_SSO_USER = "isSsoUser";
  private Boolean isSsoUser;

  public Account() { 
  }

  @JsonCreator
  public Account(
    @JsonProperty(JSON_PROPERTY_HAS_PASSWORD) Boolean hasPassword, 
    @JsonProperty(JSON_PROPERTY_LAST_LOGIN_DATE) OffsetDateTime lastLoginDate, 
    @JsonProperty(JSON_PROPERTY_IS_SSO_USER) Boolean isSsoUser
  ) {
  this();
    this.hasPassword = hasPassword;
    this.lastLoginDate = lastLoginDate;
    this.isSsoUser = isSsoUser;
  }

  public Account password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password hash stored in MongoDB
   * @return password
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(String password) {
    this.password = password;
  }


   /**
   * User has a password
   * @return hasPassword
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasPassword() {
    return hasPassword;
  }




  public Account deletePassword(Boolean deletePassword) {
    this.deletePassword = deletePassword;
    return this;
  }

   /**
   * Delete password
   * @return deletePassword
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELETE_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDeletePassword() {
    return deletePassword;
  }


  @JsonProperty(JSON_PROPERTY_DELETE_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeletePassword(Boolean deletePassword) {
    this.deletePassword = deletePassword;
  }


  public Account forcePasswordChange(Boolean forcePasswordChange) {
    this.forcePasswordChange = forcePasswordChange;
    return this;
  }

   /**
   * Force password change on next login
   * @return forcePasswordChange
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORCE_PASSWORD_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getForcePasswordChange() {
    return forcePasswordChange;
  }


  @JsonProperty(JSON_PROPERTY_FORCE_PASSWORD_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForcePasswordChange(Boolean forcePasswordChange) {
    this.forcePasswordChange = forcePasswordChange;
  }


  public Account allowPasswordChange(Boolean allowPasswordChange) {
    this.allowPasswordChange = allowPasswordChange;
    return this;
  }

   /**
   * Allow user to change password
   * @return allowPasswordChange
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_PASSWORD_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowPasswordChange() {
    return allowPasswordChange;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_PASSWORD_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowPasswordChange(Boolean allowPasswordChange) {
    this.allowPasswordChange = allowPasswordChange;
  }


   /**
   * Last login date
   * @return lastLoginDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_LOGIN_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastLoginDate() {
    return lastLoginDate;
  }




  public Account expires(OffsetDateTime expires) {
    this.expires = expires;
    return this;
  }

   /**
   * Expiry time
   * @return expires
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getExpires() {
    return expires;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpires(OffsetDateTime expires) {
    this.expires = expires;
  }


  public Account isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * User is enabled (not locked out)
   * @return isEnabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsEnabled() {
    return isEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public Account externalIds(List<ExternalId> externalIds) {
    this.externalIds = externalIds;
    return this;
  }

  public Account addExternalIdsItem(ExternalId externalIdsItem) {
    if (this.externalIds == null) {
      this.externalIds = new ArrayList<>();
    }
    this.externalIds.add(externalIdsItem);
    return this;
  }

   /**
   * External IDs for SSO
   * @return externalIds
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXTERNAL_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ExternalId> getExternalIds() {
    return externalIds;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExternalIds(List<ExternalId> externalIds) {
    this.externalIds = externalIds;
  }


   /**
   * User is SSO user (has external IDs)
   * @return isSsoUser
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_SSO_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsSsoUser() {
    return isSsoUser;
  }




  /**
   * Return true if this Account object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.password, account.password) &&
        Objects.equals(this.hasPassword, account.hasPassword) &&
        Objects.equals(this.deletePassword, account.deletePassword) &&
        Objects.equals(this.forcePasswordChange, account.forcePasswordChange) &&
        Objects.equals(this.allowPasswordChange, account.allowPasswordChange) &&
        Objects.equals(this.lastLoginDate, account.lastLoginDate) &&
        Objects.equals(this.expires, account.expires) &&
        Objects.equals(this.isEnabled, account.isEnabled) &&
        Objects.equals(this.externalIds, account.externalIds) &&
        Objects.equals(this.isSsoUser, account.isSsoUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(password, hasPassword, deletePassword, forcePasswordChange, allowPasswordChange, lastLoginDate, expires, isEnabled, externalIds, isSsoUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    hasPassword: ").append(toIndentedString(hasPassword)).append("\n");
    sb.append("    deletePassword: ").append(toIndentedString(deletePassword)).append("\n");
    sb.append("    forcePasswordChange: ").append(toIndentedString(forcePasswordChange)).append("\n");
    sb.append("    allowPasswordChange: ").append(toIndentedString(allowPasswordChange)).append("\n");
    sb.append("    lastLoginDate: ").append(toIndentedString(lastLoginDate)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    externalIds: ").append(toIndentedString(externalIds)).append("\n");
    sb.append("    isSsoUser: ").append(toIndentedString(isSsoUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `password` to the URL query string
    if (getPassword() != null) {
      joiner.add(String.format("%spassword%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPassword()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `hasPassword` to the URL query string
    if (getHasPassword() != null) {
      joiner.add(String.format("%shasPassword%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHasPassword()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `deletePassword` to the URL query string
    if (getDeletePassword() != null) {
      joiner.add(String.format("%sdeletePassword%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDeletePassword()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `forcePasswordChange` to the URL query string
    if (getForcePasswordChange() != null) {
      joiner.add(String.format("%sforcePasswordChange%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getForcePasswordChange()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `allowPasswordChange` to the URL query string
    if (getAllowPasswordChange() != null) {
      joiner.add(String.format("%sallowPasswordChange%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAllowPasswordChange()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `lastLoginDate` to the URL query string
    if (getLastLoginDate() != null) {
      joiner.add(String.format("%slastLoginDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLastLoginDate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expires` to the URL query string
    if (getExpires() != null) {
      joiner.add(String.format("%sexpires%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpires()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `isEnabled` to the URL query string
    if (getIsEnabled() != null) {
      joiner.add(String.format("%sisEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsEnabled()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `externalIds` to the URL query string
    if (getExternalIds() != null) {
      for (int i = 0; i < getExternalIds().size(); i++) {
        if (getExternalIds().get(i) != null) {
          joiner.add(getExternalIds().get(i).toUrlQueryString(String.format("%sexternalIds%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `isSsoUser` to the URL query string
    if (getIsSsoUser() != null) {
      joiner.add(String.format("%sisSsoUser%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsSsoUser()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

