/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.cominvent.fotoware.model.APIDescriptorServices;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * APIDescriptor
 */
@JsonPropertyOrder({
  APIDescriptor.JSON_PROPERTY_SERVER,
  APIDescriptor.JSON_PROPERTY_SCREENS,
  APIDescriptor.JSON_PROPERTY_UTC_OFFSET,
  APIDescriptor.JSON_PROPERTY_ARCHIVES,
  APIDescriptor.JSON_PROPERTY_ALBUMS,
  APIDescriptor.JSON_PROPERTY_TAXONOMIES,
  APIDescriptor.JSON_PROPERTY_SERVICES,
  APIDescriptor.JSON_PROPERTY_HREF,
  APIDescriptor.JSON_PROPERTY_BACKGROUND_TASKS,
  APIDescriptor.JSON_PROPERTY_SEARCH_U_R_L
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class APIDescriptor {
  public static final String JSON_PROPERTY_SERVER = "server";
  private String server;

  public static final String JSON_PROPERTY_SCREENS = "screens";
  private String screens;

  public static final String JSON_PROPERTY_UTC_OFFSET = "utc_offset";
  private Integer utcOffset;

  public static final String JSON_PROPERTY_ARCHIVES = "archives";
  private String archives;

  public static final String JSON_PROPERTY_ALBUMS = "albums";
  private String albums;

  public static final String JSON_PROPERTY_TAXONOMIES = "taxonomies";
  private String taxonomies;

  public static final String JSON_PROPERTY_SERVICES = "services";
  private APIDescriptorServices services;

  public static final String JSON_PROPERTY_HREF = "href";
  private String href;

  public static final String JSON_PROPERTY_BACKGROUND_TASKS = "background_tasks";
  private String backgroundTasks;

  public static final String JSON_PROPERTY_SEARCH_U_R_L = "searchURL";
  private String searchURL;

  public APIDescriptor() { 
  }

  public APIDescriptor server(String server) {
    this.server = server;
    return this;
  }

   /**
   * Get server
   * @return server
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServer() {
    return server;
  }


  @JsonProperty(JSON_PROPERTY_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServer(String server) {
    this.server = server;
  }


  public APIDescriptor screens(String screens) {
    this.screens = screens;
    return this;
  }

   /**
   * Get screens
   * @return screens
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCREENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScreens() {
    return screens;
  }


  @JsonProperty(JSON_PROPERTY_SCREENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScreens(String screens) {
    this.screens = screens;
  }


  public APIDescriptor utcOffset(Integer utcOffset) {
    this.utcOffset = utcOffset;
    return this;
  }

   /**
   * Get utcOffset
   * @return utcOffset
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UTC_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUtcOffset() {
    return utcOffset;
  }


  @JsonProperty(JSON_PROPERTY_UTC_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUtcOffset(Integer utcOffset) {
    this.utcOffset = utcOffset;
  }


  public APIDescriptor archives(String archives) {
    this.archives = archives;
    return this;
  }

   /**
   * Get archives
   * @return archives
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARCHIVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getArchives() {
    return archives;
  }


  @JsonProperty(JSON_PROPERTY_ARCHIVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArchives(String archives) {
    this.archives = archives;
  }


  public APIDescriptor albums(String albums) {
    this.albums = albums;
    return this;
  }

   /**
   * Get albums
   * @return albums
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALBUMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlbums() {
    return albums;
  }


  @JsonProperty(JSON_PROPERTY_ALBUMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlbums(String albums) {
    this.albums = albums;
  }


  public APIDescriptor taxonomies(String taxonomies) {
    this.taxonomies = taxonomies;
    return this;
  }

   /**
   * Get taxonomies
   * @return taxonomies
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXONOMIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxonomies() {
    return taxonomies;
  }


  @JsonProperty(JSON_PROPERTY_TAXONOMIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxonomies(String taxonomies) {
    this.taxonomies = taxonomies;
  }


  public APIDescriptor services(APIDescriptorServices services) {
    this.services = services;
    return this;
  }

   /**
   * Get services
   * @return services
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public APIDescriptorServices getServices() {
    return services;
  }


  @JsonProperty(JSON_PROPERTY_SERVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServices(APIDescriptorServices services) {
    this.services = services;
  }


  public APIDescriptor href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHref() {
    return href;
  }


  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHref(String href) {
    this.href = href;
  }


  public APIDescriptor backgroundTasks(String backgroundTasks) {
    this.backgroundTasks = backgroundTasks;
    return this;
  }

   /**
   * Get backgroundTasks
   * @return backgroundTasks
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BACKGROUND_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBackgroundTasks() {
    return backgroundTasks;
  }


  @JsonProperty(JSON_PROPERTY_BACKGROUND_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBackgroundTasks(String backgroundTasks) {
    this.backgroundTasks = backgroundTasks;
  }


  public APIDescriptor searchURL(String searchURL) {
    this.searchURL = searchURL;
    return this;
  }

   /**
   * Get searchURL
   * @return searchURL
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEARCH_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSearchURL() {
    return searchURL;
  }


  @JsonProperty(JSON_PROPERTY_SEARCH_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSearchURL(String searchURL) {
    this.searchURL = searchURL;
  }


  /**
   * Return true if this APIDescriptor object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIDescriptor apIDescriptor = (APIDescriptor) o;
    return Objects.equals(this.server, apIDescriptor.server) &&
        Objects.equals(this.screens, apIDescriptor.screens) &&
        Objects.equals(this.utcOffset, apIDescriptor.utcOffset) &&
        Objects.equals(this.archives, apIDescriptor.archives) &&
        Objects.equals(this.albums, apIDescriptor.albums) &&
        Objects.equals(this.taxonomies, apIDescriptor.taxonomies) &&
        Objects.equals(this.services, apIDescriptor.services) &&
        Objects.equals(this.href, apIDescriptor.href) &&
        Objects.equals(this.backgroundTasks, apIDescriptor.backgroundTasks) &&
        Objects.equals(this.searchURL, apIDescriptor.searchURL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(server, screens, utcOffset, archives, albums, taxonomies, services, href, backgroundTasks, searchURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIDescriptor {\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    screens: ").append(toIndentedString(screens)).append("\n");
    sb.append("    utcOffset: ").append(toIndentedString(utcOffset)).append("\n");
    sb.append("    archives: ").append(toIndentedString(archives)).append("\n");
    sb.append("    albums: ").append(toIndentedString(albums)).append("\n");
    sb.append("    taxonomies: ").append(toIndentedString(taxonomies)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    backgroundTasks: ").append(toIndentedString(backgroundTasks)).append("\n");
    sb.append("    searchURL: ").append(toIndentedString(searchURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `server` to the URL query string
    if (getServer() != null) {
      joiner.add(String.format("%sserver%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getServer()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `screens` to the URL query string
    if (getScreens() != null) {
      joiner.add(String.format("%sscreens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getScreens()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `utc_offset` to the URL query string
    if (getUtcOffset() != null) {
      joiner.add(String.format("%sutc_offset%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUtcOffset()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `archives` to the URL query string
    if (getArchives() != null) {
      joiner.add(String.format("%sarchives%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getArchives()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `albums` to the URL query string
    if (getAlbums() != null) {
      joiner.add(String.format("%salbums%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlbums()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `taxonomies` to the URL query string
    if (getTaxonomies() != null) {
      joiner.add(String.format("%staxonomies%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTaxonomies()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `services` to the URL query string
    if (getServices() != null) {
      joiner.add(getServices().toUrlQueryString(prefix + "services" + suffix));
    }

    // add `href` to the URL query string
    if (getHref() != null) {
      joiner.add(String.format("%shref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHref()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `background_tasks` to the URL query string
    if (getBackgroundTasks() != null) {
      joiner.add(String.format("%sbackground_tasks%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBackgroundTasks()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `searchURL` to the URL query string
    if (getSearchURL() != null) {
      joiner.add(String.format("%ssearchURL%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSearchURL()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

