/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * API model for the response from creating a batch upload task.
 */
@JsonPropertyOrder({
  BatchUploadInfo.JSON_PROPERTY_ID,
  BatchUploadInfo.JSON_PROPERTY_CHUNK_SIZE,
  BatchUploadInfo.JSON_PROPERTY_NUM_CHUNKS,
  BatchUploadInfo.JSON_PROPERTY_HAS_XMP
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-20T14:14:21.267957+01:00[Europe/Oslo]")
public class BatchUploadInfo {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_CHUNK_SIZE = "chunkSize";
  private Integer chunkSize;

  public static final String JSON_PROPERTY_NUM_CHUNKS = "numChunks";
  private Integer numChunks;

  public static final String JSON_PROPERTY_HAS_XMP = "hasXmp";
  private Boolean hasXmp;

  public BatchUploadInfo() { 
  }

  public BatchUploadInfo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Random 128-bit GUID encoded as BASE64URL. 
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public BatchUploadInfo chunkSize(Integer chunkSize) {
    this.chunkSize = chunkSize;
    return this;
  }

   /**
   * The upload chunk size in bytes. 
   * @return chunkSize
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHUNK_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getChunkSize() {
    return chunkSize;
  }


  @JsonProperty(JSON_PROPERTY_CHUNK_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChunkSize(Integer chunkSize) {
    this.chunkSize = chunkSize;
  }


  public BatchUploadInfo numChunks(Integer numChunks) {
    this.numChunks = numChunks;
    return this;
  }

   /**
   * Total number of chunks to upload. 
   * @return numChunks
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_CHUNKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumChunks() {
    return numChunks;
  }


  @JsonProperty(JSON_PROPERTY_NUM_CHUNKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumChunks(Integer numChunks) {
    this.numChunks = numChunks;
  }


  public BatchUploadInfo hasXmp(Boolean hasXmp) {
    this.hasXmp = hasXmp;
    return this;
  }

   /**
   * Specifies if an XMP sidecar file with metadata is to be uploaded along with the master file. 
   * @return hasXmp
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_XMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasXmp() {
    return hasXmp;
  }


  @JsonProperty(JSON_PROPERTY_HAS_XMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasXmp(Boolean hasXmp) {
    this.hasXmp = hasXmp;
  }


  /**
   * Return true if this BatchUploadInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchUploadInfo batchUploadInfo = (BatchUploadInfo) o;
    return Objects.equals(this.id, batchUploadInfo.id) &&
        Objects.equals(this.chunkSize, batchUploadInfo.chunkSize) &&
        Objects.equals(this.numChunks, batchUploadInfo.numChunks) &&
        Objects.equals(this.hasXmp, batchUploadInfo.hasXmp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, chunkSize, numChunks, hasXmp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchUploadInfo {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    chunkSize: ").append(toIndentedString(chunkSize)).append("\n");
    sb.append("    numChunks: ").append(toIndentedString(numChunks)).append("\n");
    sb.append("    hasXmp: ").append(toIndentedString(hasXmp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `chunkSize` to the URL query string
    if (getChunkSize() != null) {
      joiner.add(String.format("%schunkSize%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getChunkSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numChunks` to the URL query string
    if (getNumChunks() != null) {
      joiner.add(String.format("%snumChunks%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumChunks()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `hasXmp` to the URL query string
    if (getHasXmp() != null) {
      joiner.add(String.format("%shasXmp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHasXmp()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

