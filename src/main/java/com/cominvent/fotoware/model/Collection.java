/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.cominvent.fotoware.model.AssetPreviewsInner;
import com.cominvent.fotoware.model.CollectionAltOrdersInner;
import com.cominvent.fotoware.model.CollectionClearSearch;
import com.cominvent.fotoware.model.CollectionCreateInner;
import com.cominvent.fotoware.model.CollectionMetadataEditor;
import com.cominvent.fotoware.model.CollectionPropertyValidationsInner;
import com.cominvent.fotoware.model.CollectionProps;
import com.cominvent.fotoware.model.Permission;
import com.cominvent.fotoware.model.Taxonomy;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Collection
 */
@JsonPropertyOrder({
  Collection.JSON_PROPERTY_ALT_ORDERS,
  Collection.JSON_PROPERTY_ALERT_HREF,
  Collection.JSON_PROPERTY_ARCHIVED,
  Collection.JSON_PROPERTY_ASSETS,
  Collection.JSON_PROPERTY_ASSET_COUNT,
  Collection.JSON_PROPERTY_CAN_BE_ARCHIVED,
  Collection.JSON_PROPERTY_CAN_BE_DELETED,
  Collection.JSON_PROPERTY_CAN_COPY_TO,
  Collection.JSON_PROPERTY_CAN_CREATE_FOLDERS,
  Collection.JSON_PROPERTY_CAN_HAVE_CHILDREN,
  Collection.JSON_PROPERTY_CAN_INGEST_TO_CHILDREN,
  Collection.JSON_PROPERTY_CAN_MOVE_TO,
  Collection.JSON_PROPERTY_CAN_SELECT,
  Collection.JSON_PROPERTY_CAN_UPLOAD_TO,
  Collection.JSON_PROPERTY_CHILDREN,
  Collection.JSON_PROPERTY_CHILD_COUNT,
  Collection.JSON_PROPERTY_CLEAR_SEARCH,
  Collection.JSON_PROPERTY_CREATE,
  Collection.JSON_PROPERTY_CREATED,
  Collection.JSON_PROPERTY_DATA,
  Collection.JSON_PROPERTY_DATA_TEMPLATE,
  Collection.JSON_PROPERTY_DELETED,
  Collection.JSON_PROPERTY_DESCRIPTION,
  Collection.JSON_PROPERTY_EDIT,
  Collection.JSON_PROPERTY_HAS_CHILDREN,
  Collection.JSON_PROPERTY_HREF,
  Collection.JSON_PROPERTY_IS_FOLDER_NAVIGATION_ENABLED,
  Collection.JSON_PROPERTY_IS_LINK_COLLECTION,
  Collection.JSON_PROPERTY_IS_SEARCHABLE,
  Collection.JSON_PROPERTY_IS_SELECTABLE,
  Collection.JSON_PROPERTY_IS_SMART_FOLDER_NAVIGATION_ENABLED,
  Collection.JSON_PROPERTY_MATCHING_HREF,
  Collection.JSON_PROPERTY_METADATA_EDITOR,
  Collection.JSON_PROPERTY_MODIFIED,
  Collection.JSON_PROPERTY_NAME,
  Collection.JSON_PROPERTY_ORDER_ROOT_HREF,
  Collection.JSON_PROPERTY_ORIGINAL_U_R_L,
  Collection.JSON_PROPERTY_PERMISSIONS,
  Collection.JSON_PROPERTY_PIN,
  Collection.JSON_PROPERTY_POSTER_ASSET,
  Collection.JSON_PROPERTY_POSTER_IMAGES,
  Collection.JSON_PROPERTY_PROPERTY_VALIDATIONS,
  Collection.JSON_PROPERTY_PROPS,
  Collection.JSON_PROPERTY_REORDER,
  Collection.JSON_PROPERTY_SEARCH_QUERY,
  Collection.JSON_PROPERTY_SEARCH_STRING,
  Collection.JSON_PROPERTY_SEARCH_U_R_L,
  Collection.JSON_PROPERTY_SMART_FOLDER_HEADER,
  Collection.JSON_PROPERTY_TYPE,
  Collection.JSON_PROPERTY_TAXONOMIES,
  Collection.JSON_PROPERTY_UPLOAD_HREF
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Collection {
  public static final String JSON_PROPERTY_ALT_ORDERS = "alt_orders";
  private List<CollectionAltOrdersInner> altOrders;

  public static final String JSON_PROPERTY_ALERT_HREF = "alertHref";
  private JsonNullable<Object> alertHref = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_ARCHIVED = "archived";
  private String archived;

  public static final String JSON_PROPERTY_ASSETS = "assets";
  private Object assets;

  public static final String JSON_PROPERTY_ASSET_COUNT = "assetCount";
  private Integer assetCount;

  public static final String JSON_PROPERTY_CAN_BE_ARCHIVED = "canBeArchived";
  private Boolean canBeArchived;

  public static final String JSON_PROPERTY_CAN_BE_DELETED = "canBeDeleted";
  private Boolean canBeDeleted;

  public static final String JSON_PROPERTY_CAN_COPY_TO = "canCopyTo";
  private Boolean canCopyTo;

  public static final String JSON_PROPERTY_CAN_CREATE_FOLDERS = "canCreateFolders";
  private Boolean canCreateFolders;

  public static final String JSON_PROPERTY_CAN_HAVE_CHILDREN = "canHaveChildren";
  private Boolean canHaveChildren;

  public static final String JSON_PROPERTY_CAN_INGEST_TO_CHILDREN = "canIngestToChildren";
  private Boolean canIngestToChildren;

  public static final String JSON_PROPERTY_CAN_MOVE_TO = "canMoveTo";
  private Boolean canMoveTo;

  public static final String JSON_PROPERTY_CAN_SELECT = "canSelect";
  private Boolean canSelect;

  public static final String JSON_PROPERTY_CAN_UPLOAD_TO = "canUploadTo";
  private Boolean canUploadTo;

  public static final String JSON_PROPERTY_CHILDREN = "children";
  private Object children;

  public static final String JSON_PROPERTY_CHILD_COUNT = "childCount";
  private Integer childCount;

  public static final String JSON_PROPERTY_CLEAR_SEARCH = "clearSearch";
  private CollectionClearSearch clearSearch;

  public static final String JSON_PROPERTY_CREATE = "create";
  private List<CollectionCreateInner> create;

  public static final String JSON_PROPERTY_CREATED = "created";
  private String created;

  public static final String JSON_PROPERTY_DATA = "data";
  private String data;

  public static final String JSON_PROPERTY_DATA_TEMPLATE = "dataTemplate";
  private String dataTemplate;

  public static final String JSON_PROPERTY_DELETED = "deleted";
  private String deleted;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_EDIT = "edit";
  private Boolean edit;

  public static final String JSON_PROPERTY_HAS_CHILDREN = "hasChildren";
  private Boolean hasChildren;

  public static final String JSON_PROPERTY_HREF = "href";
  private String href;

  public static final String JSON_PROPERTY_IS_FOLDER_NAVIGATION_ENABLED = "isFolderNavigationEnabled";
  private Boolean isFolderNavigationEnabled;

  public static final String JSON_PROPERTY_IS_LINK_COLLECTION = "isLinkCollection";
  private Boolean isLinkCollection;

  public static final String JSON_PROPERTY_IS_SEARCHABLE = "isSearchable";
  private Boolean isSearchable;

  public static final String JSON_PROPERTY_IS_SELECTABLE = "isSelectable";
  private Boolean isSelectable;

  public static final String JSON_PROPERTY_IS_SMART_FOLDER_NAVIGATION_ENABLED = "isSmartFolderNavigationEnabled";
  private Boolean isSmartFolderNavigationEnabled;

  public static final String JSON_PROPERTY_MATCHING_HREF = "matchingHref";
  private String matchingHref;

  public static final String JSON_PROPERTY_METADATA_EDITOR = "metadataEditor";
  private CollectionMetadataEditor metadataEditor;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private String modified;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ORDER_ROOT_HREF = "orderRootHref";
  private String orderRootHref;

  public static final String JSON_PROPERTY_ORIGINAL_U_R_L = "originalURL";
  private String originalURL;

  public static final String JSON_PROPERTY_PERMISSIONS = "permissions";
  private List<Permission> permissions;

  public static final String JSON_PROPERTY_PIN = "pin";
  private JsonNullable<Object> pin = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_POSTER_ASSET = "posterAsset";
  private String posterAsset;

  public static final String JSON_PROPERTY_POSTER_IMAGES = "posterImages";
  private List<AssetPreviewsInner> posterImages;

  public static final String JSON_PROPERTY_PROPERTY_VALIDATIONS = "propertyValidations";
  private List<CollectionPropertyValidationsInner> propertyValidations;

  public static final String JSON_PROPERTY_PROPS = "props";
  private CollectionProps props;

  public static final String JSON_PROPERTY_REORDER = "reorder";
  private JsonNullable<Object> reorder = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_SEARCH_QUERY = "searchQuery";
  private String searchQuery;

  public static final String JSON_PROPERTY_SEARCH_STRING = "searchString";
  private String searchString;

  public static final String JSON_PROPERTY_SEARCH_U_R_L = "searchURL";
  private String searchURL;

  public static final String JSON_PROPERTY_SMART_FOLDER_HEADER = "smartFolderHeader";
  private String smartFolderHeader;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_TAXONOMIES = "taxonomies";
  private List<Taxonomy> taxonomies;

  public static final String JSON_PROPERTY_UPLOAD_HREF = "uploadHref";
  private String uploadHref;

  public Collection() { 
  }

  public Collection altOrders(List<CollectionAltOrdersInner> altOrders) {
    this.altOrders = altOrders;
    return this;
  }

  public Collection addAltOrdersItem(CollectionAltOrdersInner altOrdersItem) {
    if (this.altOrders == null) {
      this.altOrders = new ArrayList<>();
    }
    this.altOrders.add(altOrdersItem);
    return this;
  }

   /**
   * Get altOrders
   * @return altOrders
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALT_ORDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CollectionAltOrdersInner> getAltOrders() {
    return altOrders;
  }


  @JsonProperty(JSON_PROPERTY_ALT_ORDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAltOrders(List<CollectionAltOrdersInner> altOrders) {
    this.altOrders = altOrders;
  }


  public Collection alertHref(Object alertHref) {
    this.alertHref = JsonNullable.<Object>of(alertHref);
    return this;
  }

   /**
   * alertHref
   * @return alertHref
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Object getAlertHref() {
        return alertHref.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALERT_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAlertHref_JsonNullable() {
    return alertHref;
  }
  
  @JsonProperty(JSON_PROPERTY_ALERT_HREF)
  public void setAlertHref_JsonNullable(JsonNullable<Object> alertHref) {
    this.alertHref = alertHref;
  }

  public void setAlertHref(Object alertHref) {
    this.alertHref = JsonNullable.<Object>of(alertHref);
  }


  public Collection archived(String archived) {
    this.archived = archived;
    return this;
  }

   /**
   * If not null, then the collection has been archived, and this is the date and time on which the collection was archived. Unless stated otherwise, a collection list never contains archived collections, so API clients can ignore this field. 
   * @return archived
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getArchived() {
    return archived;
  }


  @JsonProperty(JSON_PROPERTY_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArchived(String archived) {
    this.archived = archived;
  }


  public Collection assets(Object assets) {
    this.assets = assets;
    return this;
  }

   /**
   * List of assets in the collection
   * @return assets
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASSETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getAssets() {
    return assets;
  }


  @JsonProperty(JSON_PROPERTY_ASSETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAssets(Object assets) {
    this.assets = assets;
  }


  public Collection assetCount(Integer assetCount) {
    this.assetCount = assetCount;
    return this;
  }

   /**
   * Number of assets in the collection
   * @return assetCount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASSET_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAssetCount() {
    return assetCount;
  }


  @JsonProperty(JSON_PROPERTY_ASSET_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAssetCount(Integer assetCount) {
    this.assetCount = assetCount;
  }


  public Collection canBeArchived(Boolean canBeArchived) {
    this.canBeArchived = canBeArchived;
    return this;
  }

   /**
   * true if it is possible to archive the collection, false otherwise.
   * @return canBeArchived
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_BE_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanBeArchived() {
    return canBeArchived;
  }


  @JsonProperty(JSON_PROPERTY_CAN_BE_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanBeArchived(Boolean canBeArchived) {
    this.canBeArchived = canBeArchived;
  }


  public Collection canBeDeleted(Boolean canBeDeleted) {
    this.canBeDeleted = canBeDeleted;
    return this;
  }

   /**
   * true if it is possible to delete the collection, false otherwise.
   * @return canBeDeleted
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_BE_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanBeDeleted() {
    return canBeDeleted;
  }


  @JsonProperty(JSON_PROPERTY_CAN_BE_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanBeDeleted(Boolean canBeDeleted) {
    this.canBeDeleted = canBeDeleted;
  }


  public Collection canCopyTo(Boolean canCopyTo) {
    this.canCopyTo = canCopyTo;
    return this;
  }

   /**
   * true if it is possible to copy assets to this collection, false otherwise.
   * @return canCopyTo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_COPY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanCopyTo() {
    return canCopyTo;
  }


  @JsonProperty(JSON_PROPERTY_CAN_COPY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanCopyTo(Boolean canCopyTo) {
    this.canCopyTo = canCopyTo;
  }


  public Collection canCreateFolders(Boolean canCreateFolders) {
    this.canCreateFolders = canCreateFolders;
    return this;
  }

   /**
   * true if it is possible to create new folders when copying, moving or uploading assets to this collection, false otherwise.
   * @return canCreateFolders
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_CREATE_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanCreateFolders() {
    return canCreateFolders;
  }


  @JsonProperty(JSON_PROPERTY_CAN_CREATE_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanCreateFolders(Boolean canCreateFolders) {
    this.canCreateFolders = canCreateFolders;
  }


  public Collection canHaveChildren(Boolean canHaveChildren) {
    this.canHaveChildren = canHaveChildren;
    return this;
  }

   /**
   * true if this collection may have sub collection, false otherwise
   * @return canHaveChildren
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_HAVE_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanHaveChildren() {
    return canHaveChildren;
  }


  @JsonProperty(JSON_PROPERTY_CAN_HAVE_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanHaveChildren(Boolean canHaveChildren) {
    this.canHaveChildren = canHaveChildren;
  }


  public Collection canIngestToChildren(Boolean canIngestToChildren) {
    this.canIngestToChildren = canIngestToChildren;
    return this;
  }

   /**
   * true if there may be sub collections where at least one of canCopyTo, canMoveTo or canUploadTo is true, false otherwise.
   * @return canIngestToChildren
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_INGEST_TO_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanIngestToChildren() {
    return canIngestToChildren;
  }


  @JsonProperty(JSON_PROPERTY_CAN_INGEST_TO_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanIngestToChildren(Boolean canIngestToChildren) {
    this.canIngestToChildren = canIngestToChildren;
  }


  public Collection canMoveTo(Boolean canMoveTo) {
    this.canMoveTo = canMoveTo;
    return this;
  }

   /**
   * true if it is possible to move assets to this collection, false otherwise.
   * @return canMoveTo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_MOVE_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanMoveTo() {
    return canMoveTo;
  }


  @JsonProperty(JSON_PROPERTY_CAN_MOVE_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanMoveTo(Boolean canMoveTo) {
    this.canMoveTo = canMoveTo;
  }


  public Collection canSelect(Boolean canSelect) {
    this.canSelect = canSelect;
    return this;
  }

   /**
   * true if it is possible to select assets in user interfaces for this collection, false otherwise
   * @return canSelect
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_SELECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanSelect() {
    return canSelect;
  }


  @JsonProperty(JSON_PROPERTY_CAN_SELECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanSelect(Boolean canSelect) {
    this.canSelect = canSelect;
  }


  public Collection canUploadTo(Boolean canUploadTo) {
    this.canUploadTo = canUploadTo;
    return this;
  }

   /**
   * true if it is possible to upload assets to this collection, false otherwise.
   * @return canUploadTo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_UPLOAD_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanUploadTo() {
    return canUploadTo;
  }


  @JsonProperty(JSON_PROPERTY_CAN_UPLOAD_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanUploadTo(Boolean canUploadTo) {
    this.canUploadTo = canUploadTo;
  }


  public Collection children(Object children) {
    this.children = children;
    return this;
  }

   /**
   * List of sub collections in the collection
   * @return children
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getChildren() {
    return children;
  }


  @JsonProperty(JSON_PROPERTY_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChildren(Object children) {
    this.children = children;
  }


  public Collection childCount(Integer childCount) {
    this.childCount = childCount;
    return this;
  }

   /**
   * Number of sub collections in the collection
   * @return childCount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHILD_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getChildCount() {
    return childCount;
  }


  @JsonProperty(JSON_PROPERTY_CHILD_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChildCount(Integer childCount) {
    this.childCount = childCount;
  }


  public Collection clearSearch(CollectionClearSearch clearSearch) {
    this.clearSearch = clearSearch;
    return this;
  }

   /**
   * Get clearSearch
   * @return clearSearch
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLEAR_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CollectionClearSearch getClearSearch() {
    return clearSearch;
  }


  @JsonProperty(JSON_PROPERTY_CLEAR_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClearSearch(CollectionClearSearch clearSearch) {
    this.clearSearch = clearSearch;
  }


  public Collection create(List<CollectionCreateInner> create) {
    this.create = create;
    return this;
  }

  public Collection addCreateItem(CollectionCreateInner createItem) {
    if (this.create == null) {
      this.create = new ArrayList<>();
    }
    this.create.add(createItem);
    return this;
  }

   /**
   * create
   * @return create
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CollectionCreateInner> getCreate() {
    return create;
  }


  @JsonProperty(JSON_PROPERTY_CREATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreate(List<CollectionCreateInner> create) {
    this.create = create;
  }


  public Collection created(String created) {
    this.created = created;
    return this;
  }

   /**
   * Date and time on which the collection was created
   * @return created
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(String created) {
    this.created = created;
  }


  public Collection data(String data) {
    this.data = data;
    return this;
  }

   /**
   * User-specific data URL of the collection. Usually, this is the URL that the collection was requested from. In collection lists, this is the URL that should be followed in order to get assets and sub collections of the collection. 
   * @return data
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setData(String data) {
    this.data = data;
  }


  public Collection dataTemplate(String dataTemplate) {
    this.dataTemplate = dataTemplate;
    return this;
  }

   /**
   * dataTemplate
   * @return dataTemplate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDataTemplate() {
    return dataTemplate;
  }


  @JsonProperty(JSON_PROPERTY_DATA_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDataTemplate(String dataTemplate) {
    this.dataTemplate = dataTemplate;
  }


  public Collection deleted(String deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * If not null, then the collection has been deleted, and this is the date and time on which the collection was deleted. Unless stated otherwise, a collection list never contains deleted collections, so API clients can ignore this field. 
   * @return deleted
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeleted(String deleted) {
    this.deleted = deleted;
  }


  public Collection description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Long description of the collection
   * @return description
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Collection edit(Boolean edit) {
    this.edit = edit;
    return this;
  }

   /**
   * edit
   * @return edit
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EDIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEdit() {
    return edit;
  }


  @JsonProperty(JSON_PROPERTY_EDIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEdit(Boolean edit) {
    this.edit = edit;
  }


  public Collection hasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
    return this;
  }

   /**
   * true if the collection can have sub collections, false otherwise
   * @return hasChildren
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasChildren() {
    return hasChildren;
  }


  @JsonProperty(JSON_PROPERTY_HAS_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }


  public Collection href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Links to a Collection. Canonical public URL of the collection.
   * @return href
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHref() {
    return href;
  }


  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHref(String href) {
    this.href = href;
  }


  public Collection isFolderNavigationEnabled(Boolean isFolderNavigationEnabled) {
    this.isFolderNavigationEnabled = isFolderNavigationEnabled;
    return this;
  }

   /**
   * true if folder navigation is enabled in user interfaces for this collection, false otherwise
   * @return isFolderNavigationEnabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_FOLDER_NAVIGATION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsFolderNavigationEnabled() {
    return isFolderNavigationEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_FOLDER_NAVIGATION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsFolderNavigationEnabled(Boolean isFolderNavigationEnabled) {
    this.isFolderNavigationEnabled = isFolderNavigationEnabled;
  }


  public Collection isLinkCollection(Boolean isLinkCollection) {
    this.isLinkCollection = isLinkCollection;
    return this;
  }

   /**
   * true if this collection is a link collection (e.g., an album), false otherwise.
   * @return isLinkCollection
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_LINK_COLLECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsLinkCollection() {
    return isLinkCollection;
  }


  @JsonProperty(JSON_PROPERTY_IS_LINK_COLLECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsLinkCollection(Boolean isLinkCollection) {
    this.isLinkCollection = isLinkCollection;
  }


  public Collection isSearchable(Boolean isSearchable) {
    this.isSearchable = isSearchable;
    return this;
  }

   /**
   * true if the collection supports search, false otherwise
   * @return isSearchable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_SEARCHABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsSearchable() {
    return isSearchable;
  }


  @JsonProperty(JSON_PROPERTY_IS_SEARCHABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsSearchable(Boolean isSearchable) {
    this.isSearchable = isSearchable;
  }


  public Collection isSelectable(Boolean isSelectable) {
    this.isSelectable = isSelectable;
    return this;
  }

   /**
   * true if assets in the collection can be selected in the selection widget, false otherwise
   * @return isSelectable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_SELECTABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsSelectable() {
    return isSelectable;
  }


  @JsonProperty(JSON_PROPERTY_IS_SELECTABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsSelectable(Boolean isSelectable) {
    this.isSelectable = isSelectable;
  }


  public Collection isSmartFolderNavigationEnabled(Boolean isSmartFolderNavigationEnabled) {
    this.isSmartFolderNavigationEnabled = isSmartFolderNavigationEnabled;
    return this;
  }

   /**
   * isSmartFolderNavigationEnabled
   * @return isSmartFolderNavigationEnabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_SMART_FOLDER_NAVIGATION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsSmartFolderNavigationEnabled() {
    return isSmartFolderNavigationEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_SMART_FOLDER_NAVIGATION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsSmartFolderNavigationEnabled(Boolean isSmartFolderNavigationEnabled) {
    this.isSmartFolderNavigationEnabled = isSmartFolderNavigationEnabled;
  }


  public Collection matchingHref(String matchingHref) {
    this.matchingHref = matchingHref;
    return this;
  }

   /**
   * matchingHref
   * @return matchingHref
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MATCHING_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMatchingHref() {
    return matchingHref;
  }


  @JsonProperty(JSON_PROPERTY_MATCHING_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatchingHref(String matchingHref) {
    this.matchingHref = matchingHref;
  }


  public Collection metadataEditor(CollectionMetadataEditor metadataEditor) {
    this.metadataEditor = metadataEditor;
    return this;
  }

   /**
   * Get metadataEditor
   * @return metadataEditor
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA_EDITOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CollectionMetadataEditor getMetadataEditor() {
    return metadataEditor;
  }


  @JsonProperty(JSON_PROPERTY_METADATA_EDITOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadataEditor(CollectionMetadataEditor metadataEditor) {
    this.metadataEditor = metadataEditor;
  }


  public Collection modified(String modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Date and time on which the collection last modified. If the collection was never modified, then this is equal to created.
   * @return modified
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModified(String modified) {
    this.modified = modified;
  }


  public Collection name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Displayable title of the collection
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Collection orderRootHref(String orderRootHref) {
    this.orderRootHref = orderRootHref;
    return this;
  }

   /**
   * orderRootHref
   * @return orderRootHref
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER_ROOT_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOrderRootHref() {
    return orderRootHref;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_ROOT_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrderRootHref(String orderRootHref) {
    this.orderRootHref = orderRootHref;
  }


  public Collection originalURL(String originalURL) {
    this.originalURL = originalURL;
    return this;
  }

   /**
   * If the collection is a search result, then this is the URL of the collection the search was performed in (without any search parameters). 
   * @return originalURL
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINAL_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOriginalURL() {
    return originalURL;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginalURL(String originalURL) {
    this.originalURL = originalURL;
  }


  public Collection permissions(List<Permission> permissions) {
    this.permissions = permissions;
    return this;
  }

  public Collection addPermissionsItem(Permission permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * List of permissions that the requesting user has on this asset
   * @return permissions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Permission> getPermissions() {
    return permissions;
  }


  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPermissions(List<Permission> permissions) {
    this.permissions = permissions;
  }


  public Collection pin(Object pin) {
    this.pin = JsonNullable.<Object>of(pin);
    return this;
  }

   /**
   * pin
   * @return pin
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Object getPin() {
        return pin.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getPin_JsonNullable() {
    return pin;
  }
  
  @JsonProperty(JSON_PROPERTY_PIN)
  public void setPin_JsonNullable(JsonNullable<Object> pin) {
    this.pin = pin;
  }

  public void setPin(Object pin) {
    this.pin = JsonNullable.<Object>of(pin);
  }


  public Collection posterAsset(String posterAsset) {
    this.posterAsset = posterAsset;
    return this;
  }

   /**
   * URL of the asset which is currently used as poster image for this collection. May be null.
   * @return posterAsset
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSTER_ASSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPosterAsset() {
    return posterAsset;
  }


  @JsonProperty(JSON_PROPERTY_POSTER_ASSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosterAsset(String posterAsset) {
    this.posterAsset = posterAsset;
  }


  public Collection posterImages(List<AssetPreviewsInner> posterImages) {
    this.posterImages = posterImages;
    return this;
  }

  public Collection addPosterImagesItem(AssetPreviewsInner posterImagesItem) {
    if (this.posterImages == null) {
      this.posterImages = new ArrayList<>();
    }
    this.posterImages.add(posterImagesItem);
    return this;
  }

   /**
   * posterImages
   * @return posterImages
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSTER_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AssetPreviewsInner> getPosterImages() {
    return posterImages;
  }


  @JsonProperty(JSON_PROPERTY_POSTER_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosterImages(List<AssetPreviewsInner> posterImages) {
    this.posterImages = posterImages;
  }


  public Collection propertyValidations(List<CollectionPropertyValidationsInner> propertyValidations) {
    this.propertyValidations = propertyValidations;
    return this;
  }

  public Collection addPropertyValidationsItem(CollectionPropertyValidationsInner propertyValidationsItem) {
    if (this.propertyValidations == null) {
      this.propertyValidations = new ArrayList<>();
    }
    this.propertyValidations.add(propertyValidationsItem);
    return this;
  }

   /**
   * Get propertyValidations
   * @return propertyValidations
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTY_VALIDATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CollectionPropertyValidationsInner> getPropertyValidations() {
    return propertyValidations;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY_VALIDATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPropertyValidations(List<CollectionPropertyValidationsInner> propertyValidations) {
    this.propertyValidations = propertyValidations;
  }


  public Collection props(CollectionProps props) {
    this.props = props;
    return this;
  }

   /**
   * Get props
   * @return props
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CollectionProps getProps() {
    return props;
  }


  @JsonProperty(JSON_PROPERTY_PROPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProps(CollectionProps props) {
    this.props = props;
  }


  public Collection reorder(Object reorder) {
    this.reorder = JsonNullable.<Object>of(reorder);
    return this;
  }

   /**
   * reorder
   * @return reorder
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Object getReorder() {
        return reorder.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getReorder_JsonNullable() {
    return reorder;
  }
  
  @JsonProperty(JSON_PROPERTY_REORDER)
  public void setReorder_JsonNullable(JsonNullable<Object> reorder) {
    this.reorder = reorder;
  }

  public void setReorder(Object reorder) {
    this.reorder = JsonNullable.<Object>of(reorder);
  }


  public Collection searchQuery(String searchQuery) {
    this.searchQuery = searchQuery;
    return this;
  }

   /**
   * searchQuery
   * @return searchQuery
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEARCH_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSearchQuery() {
    return searchQuery;
  }


  @JsonProperty(JSON_PROPERTY_SEARCH_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSearchQuery(String searchQuery) {
    this.searchQuery = searchQuery;
  }


  public Collection searchString(String searchString) {
    this.searchString = searchString;
    return this;
  }

   /**
   * searchString
   * @return searchString
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEARCH_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSearchString() {
    return searchString;
  }


  @JsonProperty(JSON_PROPERTY_SEARCH_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSearchString(String searchString) {
    this.searchString = searchString;
  }


  public Collection searchURL(String searchURL) {
    this.searchURL = searchURL;
    return this;
  }

   /**
   * URL template for collection queries (searches) in the collection. By replacing the placeholders in the template with search parameters, a client can search in the collection. If this attribute is null, then the collection does not support searching. 
   * @return searchURL
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEARCH_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSearchURL() {
    return searchURL;
  }


  @JsonProperty(JSON_PROPERTY_SEARCH_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSearchURL(String searchURL) {
    this.searchURL = searchURL;
  }


  public Collection smartFolderHeader(String smartFolderHeader) {
    this.smartFolderHeader = smartFolderHeader;
    return this;
  }

   /**
   * smartFolderHeader
   * @return smartFolderHeader
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SMART_FOLDER_HEADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSmartFolderHeader() {
    return smartFolderHeader;
  }


  @JsonProperty(JSON_PROPERTY_SMART_FOLDER_HEADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmartFolderHeader(String smartFolderHeader) {
    this.smartFolderHeader = smartFolderHeader;
  }


  public Collection type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the collection
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public Collection taxonomies(List<Taxonomy> taxonomies) {
    this.taxonomies = taxonomies;
    return this;
  }

  public Collection addTaxonomiesItem(Taxonomy taxonomiesItem) {
    if (this.taxonomies == null) {
      this.taxonomies = new ArrayList<>();
    }
    this.taxonomies.add(taxonomiesItem);
    return this;
  }

   /**
   * Contains top-level taxonomy nodes for all metadata fields which are enabled in the API for this collection and which have taxonomy enabled. 
   * @return taxonomies
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXONOMIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Taxonomy> getTaxonomies() {
    return taxonomies;
  }


  @JsonProperty(JSON_PROPERTY_TAXONOMIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxonomies(List<Taxonomy> taxonomies) {
    this.taxonomies = taxonomies;
  }


  public Collection uploadHref(String uploadHref) {
    this.uploadHref = uploadHref;
    return this;
  }

   /**
   * URL to use in upload requests
   * @return uploadHref
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOAD_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUploadHref() {
    return uploadHref;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadHref(String uploadHref) {
    this.uploadHref = uploadHref;
  }


  /**
   * Return true if this Collection object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Collection collection = (Collection) o;
    return Objects.equals(this.altOrders, collection.altOrders) &&
        equalsNullable(this.alertHref, collection.alertHref) &&
        Objects.equals(this.archived, collection.archived) &&
        Objects.equals(this.assets, collection.assets) &&
        Objects.equals(this.assetCount, collection.assetCount) &&
        Objects.equals(this.canBeArchived, collection.canBeArchived) &&
        Objects.equals(this.canBeDeleted, collection.canBeDeleted) &&
        Objects.equals(this.canCopyTo, collection.canCopyTo) &&
        Objects.equals(this.canCreateFolders, collection.canCreateFolders) &&
        Objects.equals(this.canHaveChildren, collection.canHaveChildren) &&
        Objects.equals(this.canIngestToChildren, collection.canIngestToChildren) &&
        Objects.equals(this.canMoveTo, collection.canMoveTo) &&
        Objects.equals(this.canSelect, collection.canSelect) &&
        Objects.equals(this.canUploadTo, collection.canUploadTo) &&
        Objects.equals(this.children, collection.children) &&
        Objects.equals(this.childCount, collection.childCount) &&
        Objects.equals(this.clearSearch, collection.clearSearch) &&
        Objects.equals(this.create, collection.create) &&
        Objects.equals(this.created, collection.created) &&
        Objects.equals(this.data, collection.data) &&
        Objects.equals(this.dataTemplate, collection.dataTemplate) &&
        Objects.equals(this.deleted, collection.deleted) &&
        Objects.equals(this.description, collection.description) &&
        Objects.equals(this.edit, collection.edit) &&
        Objects.equals(this.hasChildren, collection.hasChildren) &&
        Objects.equals(this.href, collection.href) &&
        Objects.equals(this.isFolderNavigationEnabled, collection.isFolderNavigationEnabled) &&
        Objects.equals(this.isLinkCollection, collection.isLinkCollection) &&
        Objects.equals(this.isSearchable, collection.isSearchable) &&
        Objects.equals(this.isSelectable, collection.isSelectable) &&
        Objects.equals(this.isSmartFolderNavigationEnabled, collection.isSmartFolderNavigationEnabled) &&
        Objects.equals(this.matchingHref, collection.matchingHref) &&
        Objects.equals(this.metadataEditor, collection.metadataEditor) &&
        Objects.equals(this.modified, collection.modified) &&
        Objects.equals(this.name, collection.name) &&
        Objects.equals(this.orderRootHref, collection.orderRootHref) &&
        Objects.equals(this.originalURL, collection.originalURL) &&
        Objects.equals(this.permissions, collection.permissions) &&
        equalsNullable(this.pin, collection.pin) &&
        Objects.equals(this.posterAsset, collection.posterAsset) &&
        Objects.equals(this.posterImages, collection.posterImages) &&
        Objects.equals(this.propertyValidations, collection.propertyValidations) &&
        Objects.equals(this.props, collection.props) &&
        equalsNullable(this.reorder, collection.reorder) &&
        Objects.equals(this.searchQuery, collection.searchQuery) &&
        Objects.equals(this.searchString, collection.searchString) &&
        Objects.equals(this.searchURL, collection.searchURL) &&
        Objects.equals(this.smartFolderHeader, collection.smartFolderHeader) &&
        Objects.equals(this.type, collection.type) &&
        Objects.equals(this.taxonomies, collection.taxonomies) &&
        Objects.equals(this.uploadHref, collection.uploadHref);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(altOrders, hashCodeNullable(alertHref), archived, assets, assetCount, canBeArchived, canBeDeleted, canCopyTo, canCreateFolders, canHaveChildren, canIngestToChildren, canMoveTo, canSelect, canUploadTo, children, childCount, clearSearch, create, created, data, dataTemplate, deleted, description, edit, hasChildren, href, isFolderNavigationEnabled, isLinkCollection, isSearchable, isSelectable, isSmartFolderNavigationEnabled, matchingHref, metadataEditor, modified, name, orderRootHref, originalURL, permissions, hashCodeNullable(pin), posterAsset, posterImages, propertyValidations, props, hashCodeNullable(reorder), searchQuery, searchString, searchURL, smartFolderHeader, type, taxonomies, uploadHref);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Collection {\n");
    sb.append("    altOrders: ").append(toIndentedString(altOrders)).append("\n");
    sb.append("    alertHref: ").append(toIndentedString(alertHref)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    assetCount: ").append(toIndentedString(assetCount)).append("\n");
    sb.append("    canBeArchived: ").append(toIndentedString(canBeArchived)).append("\n");
    sb.append("    canBeDeleted: ").append(toIndentedString(canBeDeleted)).append("\n");
    sb.append("    canCopyTo: ").append(toIndentedString(canCopyTo)).append("\n");
    sb.append("    canCreateFolders: ").append(toIndentedString(canCreateFolders)).append("\n");
    sb.append("    canHaveChildren: ").append(toIndentedString(canHaveChildren)).append("\n");
    sb.append("    canIngestToChildren: ").append(toIndentedString(canIngestToChildren)).append("\n");
    sb.append("    canMoveTo: ").append(toIndentedString(canMoveTo)).append("\n");
    sb.append("    canSelect: ").append(toIndentedString(canSelect)).append("\n");
    sb.append("    canUploadTo: ").append(toIndentedString(canUploadTo)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    childCount: ").append(toIndentedString(childCount)).append("\n");
    sb.append("    clearSearch: ").append(toIndentedString(clearSearch)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataTemplate: ").append(toIndentedString(dataTemplate)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    edit: ").append(toIndentedString(edit)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    isFolderNavigationEnabled: ").append(toIndentedString(isFolderNavigationEnabled)).append("\n");
    sb.append("    isLinkCollection: ").append(toIndentedString(isLinkCollection)).append("\n");
    sb.append("    isSearchable: ").append(toIndentedString(isSearchable)).append("\n");
    sb.append("    isSelectable: ").append(toIndentedString(isSelectable)).append("\n");
    sb.append("    isSmartFolderNavigationEnabled: ").append(toIndentedString(isSmartFolderNavigationEnabled)).append("\n");
    sb.append("    matchingHref: ").append(toIndentedString(matchingHref)).append("\n");
    sb.append("    metadataEditor: ").append(toIndentedString(metadataEditor)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orderRootHref: ").append(toIndentedString(orderRootHref)).append("\n");
    sb.append("    originalURL: ").append(toIndentedString(originalURL)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    pin: ").append(toIndentedString(pin)).append("\n");
    sb.append("    posterAsset: ").append(toIndentedString(posterAsset)).append("\n");
    sb.append("    posterImages: ").append(toIndentedString(posterImages)).append("\n");
    sb.append("    propertyValidations: ").append(toIndentedString(propertyValidations)).append("\n");
    sb.append("    props: ").append(toIndentedString(props)).append("\n");
    sb.append("    reorder: ").append(toIndentedString(reorder)).append("\n");
    sb.append("    searchQuery: ").append(toIndentedString(searchQuery)).append("\n");
    sb.append("    searchString: ").append(toIndentedString(searchString)).append("\n");
    sb.append("    searchURL: ").append(toIndentedString(searchURL)).append("\n");
    sb.append("    smartFolderHeader: ").append(toIndentedString(smartFolderHeader)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    taxonomies: ").append(toIndentedString(taxonomies)).append("\n");
    sb.append("    uploadHref: ").append(toIndentedString(uploadHref)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `alt_orders` to the URL query string
    if (getAltOrders() != null) {
      for (int i = 0; i < getAltOrders().size(); i++) {
        if (getAltOrders().get(i) != null) {
          joiner.add(getAltOrders().get(i).toUrlQueryString(String.format("%salt_orders%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `alertHref` to the URL query string
    if (getAlertHref() != null) {
      joiner.add(String.format("%salertHref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlertHref()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `archived` to the URL query string
    if (getArchived() != null) {
      joiner.add(String.format("%sarchived%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getArchived()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `assets` to the URL query string
    if (getAssets() != null) {
      joiner.add(String.format("%sassets%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAssets()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `assetCount` to the URL query string
    if (getAssetCount() != null) {
      joiner.add(String.format("%sassetCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAssetCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `canBeArchived` to the URL query string
    if (getCanBeArchived() != null) {
      joiner.add(String.format("%scanBeArchived%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCanBeArchived()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `canBeDeleted` to the URL query string
    if (getCanBeDeleted() != null) {
      joiner.add(String.format("%scanBeDeleted%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCanBeDeleted()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `canCopyTo` to the URL query string
    if (getCanCopyTo() != null) {
      joiner.add(String.format("%scanCopyTo%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCanCopyTo()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `canCreateFolders` to the URL query string
    if (getCanCreateFolders() != null) {
      joiner.add(String.format("%scanCreateFolders%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCanCreateFolders()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `canHaveChildren` to the URL query string
    if (getCanHaveChildren() != null) {
      joiner.add(String.format("%scanHaveChildren%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCanHaveChildren()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `canIngestToChildren` to the URL query string
    if (getCanIngestToChildren() != null) {
      joiner.add(String.format("%scanIngestToChildren%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCanIngestToChildren()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `canMoveTo` to the URL query string
    if (getCanMoveTo() != null) {
      joiner.add(String.format("%scanMoveTo%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCanMoveTo()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `canSelect` to the URL query string
    if (getCanSelect() != null) {
      joiner.add(String.format("%scanSelect%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCanSelect()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `canUploadTo` to the URL query string
    if (getCanUploadTo() != null) {
      joiner.add(String.format("%scanUploadTo%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCanUploadTo()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `children` to the URL query string
    if (getChildren() != null) {
      joiner.add(String.format("%schildren%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getChildren()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `childCount` to the URL query string
    if (getChildCount() != null) {
      joiner.add(String.format("%schildCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getChildCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `clearSearch` to the URL query string
    if (getClearSearch() != null) {
      joiner.add(getClearSearch().toUrlQueryString(prefix + "clearSearch" + suffix));
    }

    // add `create` to the URL query string
    if (getCreate() != null) {
      for (int i = 0; i < getCreate().size(); i++) {
        if (getCreate().get(i) != null) {
          joiner.add(getCreate().get(i).toUrlQueryString(String.format("%screate%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `created` to the URL query string
    if (getCreated() != null) {
      joiner.add(String.format("%screated%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `data` to the URL query string
    if (getData() != null) {
      joiner.add(String.format("%sdata%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getData()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dataTemplate` to the URL query string
    if (getDataTemplate() != null) {
      joiner.add(String.format("%sdataTemplate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDataTemplate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `deleted` to the URL query string
    if (getDeleted() != null) {
      joiner.add(String.format("%sdeleted%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDeleted()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `edit` to the URL query string
    if (getEdit() != null) {
      joiner.add(String.format("%sedit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEdit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `hasChildren` to the URL query string
    if (getHasChildren() != null) {
      joiner.add(String.format("%shasChildren%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHasChildren()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `href` to the URL query string
    if (getHref() != null) {
      joiner.add(String.format("%shref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHref()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `isFolderNavigationEnabled` to the URL query string
    if (getIsFolderNavigationEnabled() != null) {
      joiner.add(String.format("%sisFolderNavigationEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsFolderNavigationEnabled()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `isLinkCollection` to the URL query string
    if (getIsLinkCollection() != null) {
      joiner.add(String.format("%sisLinkCollection%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsLinkCollection()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `isSearchable` to the URL query string
    if (getIsSearchable() != null) {
      joiner.add(String.format("%sisSearchable%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsSearchable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `isSelectable` to the URL query string
    if (getIsSelectable() != null) {
      joiner.add(String.format("%sisSelectable%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsSelectable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `isSmartFolderNavigationEnabled` to the URL query string
    if (getIsSmartFolderNavigationEnabled() != null) {
      joiner.add(String.format("%sisSmartFolderNavigationEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsSmartFolderNavigationEnabled()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `matchingHref` to the URL query string
    if (getMatchingHref() != null) {
      joiner.add(String.format("%smatchingHref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMatchingHref()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `metadataEditor` to the URL query string
    if (getMetadataEditor() != null) {
      joiner.add(getMetadataEditor().toUrlQueryString(prefix + "metadataEditor" + suffix));
    }

    // add `modified` to the URL query string
    if (getModified() != null) {
      joiner.add(String.format("%smodified%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModified()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `orderRootHref` to the URL query string
    if (getOrderRootHref() != null) {
      joiner.add(String.format("%sorderRootHref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOrderRootHref()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `originalURL` to the URL query string
    if (getOriginalURL() != null) {
      joiner.add(String.format("%soriginalURL%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOriginalURL()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `permissions` to the URL query string
    if (getPermissions() != null) {
      for (int i = 0; i < getPermissions().size(); i++) {
        if (getPermissions().get(i) != null) {
          joiner.add(String.format("%spermissions%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getPermissions().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `pin` to the URL query string
    if (getPin() != null) {
      joiner.add(String.format("%spin%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPin()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `posterAsset` to the URL query string
    if (getPosterAsset() != null) {
      joiner.add(String.format("%sposterAsset%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPosterAsset()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `posterImages` to the URL query string
    if (getPosterImages() != null) {
      for (int i = 0; i < getPosterImages().size(); i++) {
        if (getPosterImages().get(i) != null) {
          joiner.add(getPosterImages().get(i).toUrlQueryString(String.format("%sposterImages%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `propertyValidations` to the URL query string
    if (getPropertyValidations() != null) {
      for (int i = 0; i < getPropertyValidations().size(); i++) {
        if (getPropertyValidations().get(i) != null) {
          joiner.add(getPropertyValidations().get(i).toUrlQueryString(String.format("%spropertyValidations%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `props` to the URL query string
    if (getProps() != null) {
      joiner.add(getProps().toUrlQueryString(prefix + "props" + suffix));
    }

    // add `reorder` to the URL query string
    if (getReorder() != null) {
      joiner.add(String.format("%sreorder%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReorder()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `searchQuery` to the URL query string
    if (getSearchQuery() != null) {
      joiner.add(String.format("%ssearchQuery%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSearchQuery()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `searchString` to the URL query string
    if (getSearchString() != null) {
      joiner.add(String.format("%ssearchString%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSearchString()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `searchURL` to the URL query string
    if (getSearchURL() != null) {
      joiner.add(String.format("%ssearchURL%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSearchURL()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `smartFolderHeader` to the URL query string
    if (getSmartFolderHeader() != null) {
      joiner.add(String.format("%ssmartFolderHeader%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSmartFolderHeader()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `taxonomies` to the URL query string
    if (getTaxonomies() != null) {
      for (int i = 0; i < getTaxonomies().size(); i++) {
        if (getTaxonomies().get(i) != null) {
          joiner.add(getTaxonomies().get(i).toUrlQueryString(String.format("%staxonomies%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `uploadHref` to the URL query string
    if (getUploadHref() != null) {
      joiner.add(String.format("%suploadHref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUploadHref()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

