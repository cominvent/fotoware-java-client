/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * FullAPIDescriptorUserManagement
 */
@JsonPropertyOrder({
  FullAPIDescriptorUserManagement.JSON_PROPERTY_USER_LIST,
  FullAPIDescriptorUserManagement.JSON_PROPERTY_GROUP_LIST,
  FullAPIDescriptorUserManagement.JSON_PROPERTY_GUEST_USER,
  FullAPIDescriptorUserManagement.JSON_PROPERTY_ADMIN_USER,
  FullAPIDescriptorUserManagement.JSON_PROPERTY_EVERYONE_GROUP,
  FullAPIDescriptorUserManagement.JSON_PROPERTY_REGISTERED_USERS_GROUP,
  FullAPIDescriptorUserManagement.JSON_PROPERTY_SITE_OWNER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-20T14:14:21.267957+01:00[Europe/Oslo]")
public class FullAPIDescriptorUserManagement {
  public static final String JSON_PROPERTY_USER_LIST = "userList";
  private String userList;

  public static final String JSON_PROPERTY_GROUP_LIST = "groupList";
  private String groupList;

  public static final String JSON_PROPERTY_GUEST_USER = "guestUser";
  private String guestUser;

  public static final String JSON_PROPERTY_ADMIN_USER = "adminUser";
  private String adminUser;

  public static final String JSON_PROPERTY_EVERYONE_GROUP = "everyoneGroup";
  private String everyoneGroup;

  public static final String JSON_PROPERTY_REGISTERED_USERS_GROUP = "registeredUsersGroup";
  private String registeredUsersGroup;

  public static final String JSON_PROPERTY_SITE_OWNER = "siteOwner";
  private String siteOwner;

  public FullAPIDescriptorUserManagement() { 
  }

  public FullAPIDescriptorUserManagement userList(String userList) {
    this.userList = userList;
    return this;
  }

   /**
   * Get userList
   * @return userList
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserList() {
    return userList;
  }


  @JsonProperty(JSON_PROPERTY_USER_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserList(String userList) {
    this.userList = userList;
  }


  public FullAPIDescriptorUserManagement groupList(String groupList) {
    this.groupList = groupList;
    return this;
  }

   /**
   * Get groupList
   * @return groupList
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUP_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGroupList() {
    return groupList;
  }


  @JsonProperty(JSON_PROPERTY_GROUP_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupList(String groupList) {
    this.groupList = groupList;
  }


  public FullAPIDescriptorUserManagement guestUser(String guestUser) {
    this.guestUser = guestUser;
    return this;
  }

   /**
   * Get guestUser
   * @return guestUser
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GUEST_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGuestUser() {
    return guestUser;
  }


  @JsonProperty(JSON_PROPERTY_GUEST_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGuestUser(String guestUser) {
    this.guestUser = guestUser;
  }


  public FullAPIDescriptorUserManagement adminUser(String adminUser) {
    this.adminUser = adminUser;
    return this;
  }

   /**
   * Get adminUser
   * @return adminUser
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADMIN_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdminUser() {
    return adminUser;
  }


  @JsonProperty(JSON_PROPERTY_ADMIN_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdminUser(String adminUser) {
    this.adminUser = adminUser;
  }


  public FullAPIDescriptorUserManagement everyoneGroup(String everyoneGroup) {
    this.everyoneGroup = everyoneGroup;
    return this;
  }

   /**
   * Get everyoneGroup
   * @return everyoneGroup
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVERYONE_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEveryoneGroup() {
    return everyoneGroup;
  }


  @JsonProperty(JSON_PROPERTY_EVERYONE_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEveryoneGroup(String everyoneGroup) {
    this.everyoneGroup = everyoneGroup;
  }


  public FullAPIDescriptorUserManagement registeredUsersGroup(String registeredUsersGroup) {
    this.registeredUsersGroup = registeredUsersGroup;
    return this;
  }

   /**
   * Get registeredUsersGroup
   * @return registeredUsersGroup
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REGISTERED_USERS_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRegisteredUsersGroup() {
    return registeredUsersGroup;
  }


  @JsonProperty(JSON_PROPERTY_REGISTERED_USERS_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegisteredUsersGroup(String registeredUsersGroup) {
    this.registeredUsersGroup = registeredUsersGroup;
  }


  public FullAPIDescriptorUserManagement siteOwner(String siteOwner) {
    this.siteOwner = siteOwner;
    return this;
  }

   /**
   * Get siteOwner
   * @return siteOwner
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SITE_OWNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSiteOwner() {
    return siteOwner;
  }


  @JsonProperty(JSON_PROPERTY_SITE_OWNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSiteOwner(String siteOwner) {
    this.siteOwner = siteOwner;
  }


  /**
   * Return true if this FullAPIDescriptor_userManagement object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FullAPIDescriptorUserManagement fullAPIDescriptorUserManagement = (FullAPIDescriptorUserManagement) o;
    return Objects.equals(this.userList, fullAPIDescriptorUserManagement.userList) &&
        Objects.equals(this.groupList, fullAPIDescriptorUserManagement.groupList) &&
        Objects.equals(this.guestUser, fullAPIDescriptorUserManagement.guestUser) &&
        Objects.equals(this.adminUser, fullAPIDescriptorUserManagement.adminUser) &&
        Objects.equals(this.everyoneGroup, fullAPIDescriptorUserManagement.everyoneGroup) &&
        Objects.equals(this.registeredUsersGroup, fullAPIDescriptorUserManagement.registeredUsersGroup) &&
        Objects.equals(this.siteOwner, fullAPIDescriptorUserManagement.siteOwner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userList, groupList, guestUser, adminUser, everyoneGroup, registeredUsersGroup, siteOwner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FullAPIDescriptorUserManagement {\n");
    sb.append("    userList: ").append(toIndentedString(userList)).append("\n");
    sb.append("    groupList: ").append(toIndentedString(groupList)).append("\n");
    sb.append("    guestUser: ").append(toIndentedString(guestUser)).append("\n");
    sb.append("    adminUser: ").append(toIndentedString(adminUser)).append("\n");
    sb.append("    everyoneGroup: ").append(toIndentedString(everyoneGroup)).append("\n");
    sb.append("    registeredUsersGroup: ").append(toIndentedString(registeredUsersGroup)).append("\n");
    sb.append("    siteOwner: ").append(toIndentedString(siteOwner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `userList` to the URL query string
    if (getUserList() != null) {
      joiner.add(String.format("%suserList%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserList()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `groupList` to the URL query string
    if (getGroupList() != null) {
      joiner.add(String.format("%sgroupList%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGroupList()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `guestUser` to the URL query string
    if (getGuestUser() != null) {
      joiner.add(String.format("%sguestUser%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGuestUser()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `adminUser` to the URL query string
    if (getAdminUser() != null) {
      joiner.add(String.format("%sadminUser%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAdminUser()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `everyoneGroup` to the URL query string
    if (getEveryoneGroup() != null) {
      joiner.add(String.format("%severyoneGroup%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEveryoneGroup()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `registeredUsersGroup` to the URL query string
    if (getRegisteredUsersGroup() != null) {
      joiner.add(String.format("%sregisteredUsersGroup%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRegisteredUsersGroup()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `siteOwner` to the URL query string
    if (getSiteOwner() != null) {
      joiner.add(String.format("%ssiteOwner%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSiteOwner()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

