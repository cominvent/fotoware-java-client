/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * APIDescriptorServices
 */
@JsonPropertyOrder({
  APIDescriptorServices.JSON_PROPERTY_LOGIN,
  APIDescriptorServices.JSON_PROPERTY_SEARCH,
  APIDescriptorServices.JSON_PROPERTY_RENDITION_REQUEST
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-20T14:14:21.267957+01:00[Europe/Oslo]")
public class APIDescriptorServices {
  public static final String JSON_PROPERTY_LOGIN = "login";
  private String login;

  public static final String JSON_PROPERTY_SEARCH = "search";
  private String search;

  public static final String JSON_PROPERTY_RENDITION_REQUEST = "rendition_request";
  private String renditionRequest;

  public APIDescriptorServices() { 
  }

  public APIDescriptorServices login(String login) {
    this.login = login;
    return this;
  }

   /**
   * Get login
   * @return login
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLogin() {
    return login;
  }


  @JsonProperty(JSON_PROPERTY_LOGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogin(String login) {
    this.login = login;
  }


  public APIDescriptorServices search(String search) {
    this.search = search;
    return this;
  }

   /**
   * Get search
   * @return search
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSearch() {
    return search;
  }


  @JsonProperty(JSON_PROPERTY_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSearch(String search) {
    this.search = search;
  }


  public APIDescriptorServices renditionRequest(String renditionRequest) {
    this.renditionRequest = renditionRequest;
    return this;
  }

   /**
   * Get renditionRequest
   * @return renditionRequest
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RENDITION_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRenditionRequest() {
    return renditionRequest;
  }


  @JsonProperty(JSON_PROPERTY_RENDITION_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRenditionRequest(String renditionRequest) {
    this.renditionRequest = renditionRequest;
  }


  /**
   * Return true if this APIDescriptor_services object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIDescriptorServices apIDescriptorServices = (APIDescriptorServices) o;
    return Objects.equals(this.login, apIDescriptorServices.login) &&
        Objects.equals(this.search, apIDescriptorServices.search) &&
        Objects.equals(this.renditionRequest, apIDescriptorServices.renditionRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(login, search, renditionRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIDescriptorServices {\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    renditionRequest: ").append(toIndentedString(renditionRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `login` to the URL query string
    if (getLogin() != null) {
      joiner.add(String.format("%slogin%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLogin()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `search` to the URL query string
    if (getSearch() != null) {
      joiner.add(String.format("%ssearch%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSearch()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `rendition_request` to the URL query string
    if (getRenditionRequest() != null) {
      joiner.add(String.format("%srendition_request%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRenditionRequest()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

