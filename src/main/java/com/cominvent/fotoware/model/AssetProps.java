/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.cominvent.fotoware.model.AssetPropsShares;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Common properties of this resource
 */
@JsonPropertyOrder({
  AssetProps.JSON_PROPERTY_SHARES,
  AssetProps.JSON_PROPERTY_COMMENTS,
  AssetProps.JSON_PROPERTY_ANNOTATIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-20T14:14:21.267957+01:00[Europe/Oslo]")
public class AssetProps {
  public static final String JSON_PROPERTY_SHARES = "shares";
  private AssetPropsShares shares;

  public static final String JSON_PROPERTY_COMMENTS = "comments";
  private AssetPropsShares comments;

  public static final String JSON_PROPERTY_ANNOTATIONS = "annotations";
  private AssetPropsShares annotations;

  public AssetProps() { 
  }

  public AssetProps shares(AssetPropsShares shares) {
    this.shares = shares;
    return this;
  }

   /**
   * Get shares
   * @return shares
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHARES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AssetPropsShares getShares() {
    return shares;
  }


  @JsonProperty(JSON_PROPERTY_SHARES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShares(AssetPropsShares shares) {
    this.shares = shares;
  }


  public AssetProps comments(AssetPropsShares comments) {
    this.comments = comments;
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AssetPropsShares getComments() {
    return comments;
  }


  @JsonProperty(JSON_PROPERTY_COMMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComments(AssetPropsShares comments) {
    this.comments = comments;
  }


  public AssetProps annotations(AssetPropsShares annotations) {
    this.annotations = annotations;
    return this;
  }

   /**
   * Get annotations
   * @return annotations
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AssetPropsShares getAnnotations() {
    return annotations;
  }


  @JsonProperty(JSON_PROPERTY_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnnotations(AssetPropsShares annotations) {
    this.annotations = annotations;
  }


  /**
   * Return true if this Asset_props object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetProps assetProps = (AssetProps) o;
    return Objects.equals(this.shares, assetProps.shares) &&
        Objects.equals(this.comments, assetProps.comments) &&
        Objects.equals(this.annotations, assetProps.annotations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shares, comments, annotations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetProps {\n");
    sb.append("    shares: ").append(toIndentedString(shares)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `shares` to the URL query string
    if (getShares() != null) {
      joiner.add(getShares().toUrlQueryString(prefix + "shares" + suffix));
    }

    // add `comments` to the URL query string
    if (getComments() != null) {
      joiner.add(getComments().toUrlQueryString(prefix + "comments" + suffix));
    }

    // add `annotations` to the URL query string
    if (getAnnotations() != null) {
      joiner.add(getAnnotations().toUrlQueryString(prefix + "annotations" + suffix));
    }

    return joiner.toString();
  }
}

