/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.api;

import com.cominvent.fotoware.client.ApiException;
import com.cominvent.fotoware.model.Asset;
import com.cominvent.fotoware.model.MetadataView;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for AssetsAndMetadataApi
 */
@Ignore
public class AssetsAndMetadataApiTest {

    private final AssetsAndMetadataApi api = new AssetsAndMetadataApi();

    
    /**
     * Get a metadata view representation
     *
     * Pass in the metadata view id to get the full representation of the view
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fotowebEditorsViewidGetTest() throws ApiException {
        String viewid = null;
        MetadataView response = 
        api.fotowebEditorsViewidGet(viewid);
        
        // TODO: test validations
    }
    
    /**
     * Get the json representation of an asset
     *
     * All asset resources have this representation. This includes assets in all kinds of collections, such as archives, albums and search results. Information returned about an asset may vary depending on the user that is making the request. In particular, the permissions and previews fields may contain different values for different users. They reflect the permissions that the requesting user has on the asset and the types of previews (size, watermarked or not watermarked, etc.) that are available to that user. The doctype field determines what subsections are present in the attributes section. For example, if the doctype is \&quot;image\&quot;, then attributes.imageattributes is always present. However, it is recommended to explicitly check for presence of these subsections instead whenever they are used 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssetDetailsTest() throws ApiException {
        String archiveid = null;
        String folderid = null;
        String asset = null;
        Asset response = 
        api.getAssetDetails(archiveid, folderid, asset);
        
        // TODO: test validations
    }
    
    /**
     * Update metadata on an asset
     *
     * Use patch on an asset to update the metadata. The metadata to update is defined in the request body. Required permissions - Edit Metadata on the archive containing the asset.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMetadataTest() throws ApiException {
        String archiveid = null;
        String folderid = null;
        String asset = null;
        Object body = null;
        Asset response = 
        api.patchMetadata(archiveid, folderid, asset, body);
        
        // TODO: test validations
    }
    
}
