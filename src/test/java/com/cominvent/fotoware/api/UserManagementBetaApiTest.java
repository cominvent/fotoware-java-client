/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.api;

import com.cominvent.fotoware.client.ApiException;
import com.cominvent.fotoware.model.ExternalId;
import com.cominvent.fotoware.model.Group;
import com.cominvent.fotoware.model.MemberProperty;
import com.cominvent.fotoware.model.MembershipIdListModel;
import java.util.UUID;
import com.cominvent.fotoware.model.User;
import com.cominvent.fotoware.model.ValueModelBoolean;
import com.cominvent.fotoware.model.ValueModelInteger;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for UserManagementBetaApi
 */
@Ignore
public class UserManagementBetaApiTest {

    private final UserManagementBetaApi api = new UserManagementBetaApi();

    
    /**
     * Add the user to one or more groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userAddUserMembershipsTest() throws ApiException {
        Integer id = null;
        MembershipIdListModel groups = null;
        
        api.userAddUserMemberships(id, groups);
        
        // TODO: test validations
    }
    
    /**
     * Count all users on the site
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCountAllUsersTest() throws ApiException {
        String licenseLevel = null;
        String licenseMode = null;
        Boolean isSso = null;
        String ssoProvider = null;
        ValueModelInteger response = 
        api.userCountAllUsers(licenseLevel, licenseMode, isSso, ssoProvider);
        
        // TODO: test validations
    }
    
    /**
     * Count all distinct groups that the user is a direct or indirect member of
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCountRecursiveUserMembershipsTest() throws ApiException {
        Integer id = null;
        ValueModelInteger response = 
        api.userCountRecursiveUserMemberships(id);
        
        // TODO: test validations
    }
    
    /**
     * Count all groups that the user is a direct member of
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCountUserDirectMembershipsTest() throws ApiException {
        Integer id = null;
        ValueModelInteger response = 
        api.userCountUserDirectMemberships(id);
        
        // TODO: test validations
    }
    
    /**
     * Create a new user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCreateNewUserTest() throws ApiException {
        User user = null;
        User response = 
        api.userCreateNewUser(user);
        
        // TODO: test validations
    }
    
    /**
     * Remove the user from all groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeleteAllUserMembershipsTest() throws ApiException {
        Integer id = null;
        
        api.userDeleteAllUserMemberships(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete all custom properties of a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeleteAllUserPropertiesTest() throws ApiException {
        Integer id = null;
        
        api.userDeleteAllUserProperties(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeleteUserTest() throws ApiException {
        Integer id = null;
        
        api.userDeleteUser(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete all external IDs of a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeleteUserExternalIdsTest() throws ApiException {
        Integer id = null;
        
        api.userDeleteUserExternalIds(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete the external ID of a user from a provider
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeleteUserExternalIdsFromProviderTest() throws ApiException {
        Integer id = null;
        UUID provider = null;
        
        api.userDeleteUserExternalIdsFromProvider(id, provider);
        
        // TODO: test validations
    }
    
    /**
     * Remove the user from a single group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeleteUserMembershipTest() throws ApiException {
        Integer id = null;
        Integer group = null;
        
        api.userDeleteUserMembership(id, group);
        
        // TODO: test validations
    }
    
    /**
     * Delete the password of a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeleteUserPasswordTest() throws ApiException {
        Integer id = null;
        
        api.userDeleteUserPassword(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete a custom property of a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeleteUserPropertiesTest() throws ApiException {
        Integer id = null;
        String key = null;
        
        api.userDeleteUserProperties(id, key);
        
        // TODO: test validations
    }
    
    /**
     * Get all users on the site
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetAllUsersTest() throws ApiException {
        List<User> response = 
        api.userGetAllUsers();
        
        // TODO: test validations
    }
    
    /**
     * Get all distinct groups that the user is a direct or indirect member of
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetRecursiveUserMembershipsTest() throws ApiException {
        Integer id = null;
        List<Group> response = 
        api.userGetRecursiveUserMemberships(id);
        
        // TODO: test validations
    }
    
    /**
     * Get user by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetUserByIdTest() throws ApiException {
        Integer id = null;
        User response = 
        api.userGetUserById(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all groups that the user is a direct member of
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetUserDirectMembershipsTest() throws ApiException {
        Integer id = null;
        List<Group> response = 
        api.userGetUserDirectMemberships(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all external IDs of a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetUserExternalIdsTest() throws ApiException {
        Integer id = null;
        List<ExternalId> response = 
        api.userGetUserExternalIds(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all custom properties of a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetUserPropertyBagTest() throws ApiException {
        Integer id = null;
        List<MemberProperty> response = 
        api.userGetUserPropertyBag(id);
        
        // TODO: test validations
    }
    
    /**
     * Enable or disable user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userSetUserEnabledTest() throws ApiException {
        Integer id = null;
        ValueModelBoolean value = null;
        
        api.userSetUserEnabled(id, value);
        
        // TODO: test validations
    }
    
    /**
     * Set the groups that the user is a direct member of
     *
     * The user is removed from all other groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userSetUserMembershipsTest() throws ApiException {
        Integer id = null;
        MembershipIdListModel groups = null;
        
        api.userSetUserMemberships(id, groups);
        
        // TODO: test validations
    }
    
    /**
     * Update a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userUpdateUserTest() throws ApiException {
        Integer id = null;
        User properties = null;
        
        api.userUpdateUser(id, properties);
        
        // TODO: test validations
    }
    
}
