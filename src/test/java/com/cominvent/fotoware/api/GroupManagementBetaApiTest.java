/*
 * FotoWare API
 * This reference documents the available endpoints for FotoWare's API. <br/> Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/> To enable authorization and testing of the API on an on-premises server, <a target=\"_blank\" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cominvent.fotoware.api;

import com.cominvent.fotoware.client.ApiException;
import com.cominvent.fotoware.model.ExternalId;
import com.cominvent.fotoware.model.Group;
import com.cominvent.fotoware.model.MemberIdListModel;
import com.cominvent.fotoware.model.MemberProperty;
import com.cominvent.fotoware.model.MembershipIdListModel;
import java.util.UUID;
import com.cominvent.fotoware.model.User;
import com.cominvent.fotoware.model.ValueModelInteger;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for GroupManagementBetaApi
 */
@Ignore
public class GroupManagementBetaApiTest {

    private final GroupManagementBetaApi api = new GroupManagementBetaApi();

    
    /**
     * Add groups to the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupAddGroupGroupMembersTest() throws ApiException {
        Integer id = null;
        MemberIdListModel members = null;
        
        api.groupAddGroupGroupMembers(id, members);
        
        // TODO: test validations
    }
    
    /**
     * Add users to the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupAddGroupMembersTest() throws ApiException {
        Integer id = null;
        MemberIdListModel members = null;
        
        api.groupAddGroupMembers(id, members);
        
        // TODO: test validations
    }
    
    /**
     * Add the group to one or more groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupAddGroupMembershipsTest() throws ApiException {
        Integer id = null;
        MembershipIdListModel groups = null;
        
        api.groupAddGroupMemberships(id, groups);
        
        // TODO: test validations
    }
    
    /**
     * Add users to the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupAddGroupUserMembersTest() throws ApiException {
        Integer id = null;
        MemberIdListModel members = null;
        
        api.groupAddGroupUserMembers(id, members);
        
        // TODO: test validations
    }
    
    /**
     * Count all groups on the site
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupCountAllGroupsTest() throws ApiException {
        Boolean isSso = null;
        String ssoProvider = null;
        ValueModelInteger response = 
        api.groupCountAllGroups(isSso, ssoProvider);
        
        // TODO: test validations
    }
    
    /**
     * Count all groups that the group is a direct member of
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupCountDirectGroupMembershipsTest() throws ApiException {
        Integer id = null;
        ValueModelInteger response = 
        api.groupCountDirectGroupMemberships(id);
        
        // TODO: test validations
    }
    
    /**
     * Count all groups that are direct members of the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupCountGroupDirectGroupMembersTest() throws ApiException {
        Integer id = null;
        ValueModelInteger response = 
        api.groupCountGroupDirectGroupMembers(id);
        
        // TODO: test validations
    }
    
    /**
     * Count all users that are direct members of the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupCountGroupDirectUserMembersTest() throws ApiException {
        Integer id = null;
        ValueModelInteger response = 
        api.groupCountGroupDirectUserMembers(id);
        
        // TODO: test validations
    }
    
    /**
     * Count all groups that are direct or indirect members of the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupCountGroupRecursiveGroupMembersTest() throws ApiException {
        Integer id = null;
        ValueModelInteger response = 
        api.groupCountGroupRecursiveGroupMembers(id);
        
        // TODO: test validations
    }
    
    /**
     * Count all users that are direct or indirect members of the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupCountGroupRecursiveUserMembersTest() throws ApiException {
        Integer id = null;
        ValueModelInteger response = 
        api.groupCountGroupRecursiveUserMembers(id);
        
        // TODO: test validations
    }
    
    /**
     * Count all distinct groups that the group is a direct or indirect member of
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupCountRecursiveUserMembershipsTest() throws ApiException {
        Integer id = null;
        ValueModelInteger response = 
        api.groupCountRecursiveUserMemberships(id);
        
        // TODO: test validations
    }
    
    /**
     * Create a new group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupCreateNewGroupTest() throws ApiException {
        Group group = null;
        Group response = 
        api.groupCreateNewGroup(group);
        
        // TODO: test validations
    }
    
    /**
     * Remove all groups from the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupDeleteAllGroupGroupMembersTest() throws ApiException {
        Integer id = null;
        
        api.groupDeleteAllGroupGroupMembers(id);
        
        // TODO: test validations
    }
    
    /**
     * Remove all members from the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupDeleteAllGroupMembersTest() throws ApiException {
        Integer id = null;
        
        api.groupDeleteAllGroupMembers(id);
        
        // TODO: test validations
    }
    
    /**
     * Remove the group from all groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupDeleteAllGroupMembershipsTest() throws ApiException {
        Integer id = null;
        
        api.groupDeleteAllGroupMemberships(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete all custom properties of a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupDeleteAllGroupPropertiesTest() throws ApiException {
        Integer id = null;
        
        api.groupDeleteAllGroupProperties(id);
        
        // TODO: test validations
    }
    
    /**
     * Remove all users from the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupDeleteAllGroupUserMembersTest() throws ApiException {
        Integer id = null;
        
        api.groupDeleteAllGroupUserMembers(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupDeleteGroupTest() throws ApiException {
        Integer id = null;
        
        api.groupDeleteGroup(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete all external IDs of a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupDeleteGroupExternalIdsTest() throws ApiException {
        Integer id = null;
        
        api.groupDeleteGroupExternalIds(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete the external ID of a group from a provider
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupDeleteGroupExternalIdsFromProviderTest() throws ApiException {
        Integer id = null;
        UUID provider = null;
        
        api.groupDeleteGroupExternalIdsFromProvider(id, provider);
        
        // TODO: test validations
    }
    
    /**
     * Remove a group from the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupDeleteGroupGroupMemberTest() throws ApiException {
        Integer id = null;
        Integer member = null;
        
        api.groupDeleteGroupGroupMember(id, member);
        
        // TODO: test validations
    }
    
    /**
     * Remove the group from a single group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupDeleteGroupMembershipTest() throws ApiException {
        Integer id = null;
        Integer group = null;
        
        api.groupDeleteGroupMembership(id, group);
        
        // TODO: test validations
    }
    
    /**
     * Delete a custom property of a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupDeleteGroupPropertiesTest() throws ApiException {
        Integer id = null;
        String key = null;
        
        api.groupDeleteGroupProperties(id, key);
        
        // TODO: test validations
    }
    
    /**
     * Remove a user from the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupDeleteGroupUserMemberTest() throws ApiException {
        Integer id = null;
        Integer member = null;
        
        api.groupDeleteGroupUserMember(id, member);
        
        // TODO: test validations
    }
    
    /**
     * Get all groups on the site
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupGetAllGroupsTest() throws ApiException {
        List<Group> response = 
        api.groupGetAllGroups();
        
        // TODO: test validations
    }
    
    /**
     * Get all groups that the group is a direct member of
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupGetDirectGroupMembershipsTest() throws ApiException {
        Integer id = null;
        List<Group> response = 
        api.groupGetDirectGroupMemberships(id);
        
        // TODO: test validations
    }
    
    /**
     * Get group by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupGetGroupByIdTest() throws ApiException {
        Integer id = null;
        Group response = 
        api.groupGetGroupById(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all groups that are direct members of the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupGetGroupDirectGroupMembersTest() throws ApiException {
        Integer id = null;
        List<Group> response = 
        api.groupGetGroupDirectGroupMembers(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all users that are direct members of the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupGetGroupDirectUserMembersTest() throws ApiException {
        Integer id = null;
        List<User> response = 
        api.groupGetGroupDirectUserMembers(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all external IDs of a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupGetGroupExternalIdsTest() throws ApiException {
        Integer id = null;
        List<ExternalId> response = 
        api.groupGetGroupExternalIds(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all custom properties of a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupGetGroupPropertyBagTest() throws ApiException {
        Integer id = null;
        List<MemberProperty> response = 
        api.groupGetGroupPropertyBag(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all groups that are direct or indirect members of the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupGetGroupRecursiveGroupembersTest() throws ApiException {
        Integer id = null;
        List<Group> response = 
        api.groupGetGroupRecursiveGroupembers(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all users that are direct or indirect members of the given group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupGetGroupRecursiveUserMembersTest() throws ApiException {
        Integer id = null;
        List<User> response = 
        api.groupGetGroupRecursiveUserMembers(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all distinct groups that the group is a direct or indirect member of
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupGetRecursiveGroupMembershipsTest() throws ApiException {
        Integer id = null;
        List<Group> response = 
        api.groupGetRecursiveGroupMemberships(id);
        
        // TODO: test validations
    }
    
    /**
     * Replace all groups that are direct members of a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupSetGroupGroupMembersTest() throws ApiException {
        Integer id = null;
        MemberIdListModel members = null;
        
        api.groupSetGroupGroupMembers(id, members);
        
        // TODO: test validations
    }
    
    /**
     * Replace all direct members of a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupSetGroupMembersTest() throws ApiException {
        Integer id = null;
        MemberIdListModel members = null;
        
        api.groupSetGroupMembers(id, members);
        
        // TODO: test validations
    }
    
    /**
     * Set the groups that the group is a direct member of
     *
     * The group is removed from all other groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupSetGroupMembershipsTest() throws ApiException {
        Integer id = null;
        MembershipIdListModel groups = null;
        
        api.groupSetGroupMemberships(id, groups);
        
        // TODO: test validations
    }
    
    /**
     * Replace all users that are direct members of a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupSetGroupUserMembersTest() throws ApiException {
        Integer id = null;
        MemberIdListModel members = null;
        
        api.groupSetGroupUserMembers(id, members);
        
        // TODO: test validations
    }
    
    /**
     * Update a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupUpdateGroupTest() throws ApiException {
        Integer id = null;
        Group properties = null;
        
        api.groupUpdateGroup(id, properties);
        
        // TODO: test validations
    }
    
}
