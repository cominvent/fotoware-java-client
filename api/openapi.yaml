openapi: 3.0.1
info:
  description: |
    This reference documents the available endpoints for FotoWare's API.
    <br/>
    Click the Authorize button at the top of the page to try the API with your own FotoWare as a Service tenant.<br/>
    To enable authorization and testing of the API on an on-premises server, <a target="_blank" href='https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Exploring_the_FotoWare_API_with_Swagger'>please follow the instructions in our software documentation</a><br/>
  title: FotoWare API
  version: 1.0.0
externalDocs:
  description: Go into more details in our API Documentation
  url: https://learn.fotoware.com/Integrations_and_APIs
servers:
- url: ""
security:
- FotoWareAccessToken: []
paths:
  /fotoweb/:
    get:
      description: "The Public entry point is for unauthenticated, read-only guest\
        \ access. It is only available if Guest access is enabled and licensed on\
        \ the FotoWeb server."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDescriptor'
            application/vnd.fotoware.api-descriptor+json:
              schema:
                $ref: '#/components/schemas/APIDescriptor'
          description: OK. Call successfuly completed
      security: []
      summary: Public entry point
      tags:
      - API Entry Points
      x-accepts: application/json
  /fotoweb/me/:
    get:
      description: "The Private entry point allows authenticated access to the server\
        \ to view and modify data. It requires authentication, either as administrator\
        \ (server-to-server authentication) or as a specific user."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullAPIDescriptor'
            application/vnd.fotoware.full-api-descriptor+json:
              schema:
                $ref: '#/components/schemas/FullAPIDescriptor'
          description: OK. Call successfuly completed
        "401":
          description: Unauthorized. Access is denied due to invalid credentials
      summary: Private entry point
      tags:
      - API Entry Points
      x-accepts: application/json
  /fotoweb/albums/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
            application/vnd.fotoware.collectionlist+json:
              schema:
                $ref: '#/components/schemas/CollectionList'
          description: OK
      summary: |
        Lists the public albums in the DAM. The list contains albums which are shared in Fotoware.
      tags:
      - Albums
      x-accepts: application/json
  /fotoweb/me/albums/:
    get:
      parameters:
      - description: Query for asset(s). See <a target="_blank" href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Collection_Queries">Collection
          Queries</a> for more information on querying.
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
            application/vnd.fotoware.collectionlist+json:
              schema:
                $ref: '#/components/schemas/CollectionList'
          description: OK
      summary: |
        Lists the albums accessible by the current user/access token. This list contains all albums that the user can access. Use the q parameter to search in multiple albums/collections (search in name, description and tags elements).
      tags:
      - Albums
      x-accepts: application/json
  /fotoweb/me/albums/mine/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
            application/vnd.fotoware.collectionlist+json:
              schema:
                $ref: '#/components/schemas/CollectionList'
          description: OK
      summary: Lists the albums owned by the current user/access token.
      tags:
      - Albums
      x-accepts: application/json
  /fotoweb/me/albums/shared-with-me/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
            application/vnd.fotoware.collectionlist+json:
              schema:
                $ref: '#/components/schemas/CollectionList'
          description: OK
      summary: List the albums shared with the current user/access token.
      tags:
      - Albums
      x-accepts: application/json
  /fotoweb/me/albums/archived/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
            application/vnd.fotoware.collectionlist+json:
              schema:
                $ref: '#/components/schemas/CollectionList'
          description: OK
      summary: List the archived albums owned by the current user/access token.
      tags:
      - Albums
      x-accepts: application/json
  /fotoweb/me/albums/deleted/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
            application/vnd.fotoware.collectionlist+json:
              schema:
                $ref: '#/components/schemas/CollectionList'
          description: OK
      summary: List the deleted albums owned by the current user/access token.
      tags:
      - Albums
      x-accepts: application/json
  /fotoweb/me/albums/contribute/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
            application/vnd.fotoware.collectionlist+json:
              schema:
                $ref: '#/components/schemas/CollectionList'
          description: OK
      summary: List the albums contributed to by the current user/access token.
      tags:
      - Albums
      x-accepts: application/json
  /fotoweb/me/people/:
    get:
      parameters:
      - description: |
          Query for user(s) and group(s), e.g. q=consumer
        explode: true
        in: query
        name: q
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeopleList'
            application/vnd.fotoware.people-list+json:
              schema:
                $ref: '#/components/schemas/PeopleList'
          description: OK
        "400":
          description: 400 Bad request
        "401":
          description: 401 Unauthorized
      summary: Search among the users and groups you have permission to share albums
        with
      tags:
      - Albums sharing
      x-accepts: application/json
  /fotoweb/users/{userid}/albums/{albumid}/:
    get:
      parameters:
      - description: Unique ID of the user
        explode: false
        in: path
        name: userid
        required: true
        schema:
          type: string
        style: simple
      - description: Unique ID of the album
        explode: false
        in: path
        name: albumid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionInfo'
            application/vnd.fotoware.collectioninfo+json:
              schema:
                $ref: '#/components/schemas/CollectionInfo'
          description: 200 OK
      summary: "Get all information for an album for a specfic user; including properties,\
        \ assets in the album etc."
      tags:
      - Albums sharing
      x-accepts: application/json
  /fotoweb/users/{userid}/albums/{albumid}/.shares/:
    get:
      parameters:
      - description: Unique ID of the user
        explode: false
        in: path
        name: userid
        required: true
        schema:
          type: string
        style: simple
      - description: Unique ID of the album
        explode: false
        in: path
        name: albumid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sharing'
            application/vnd.fotoware.sharing+json:
              schema:
                $ref: '#/components/schemas/Sharing'
          description: 200 OK
      summary: "Gets sharing details for an album for a specfic user; including any\
        \ shares, public link and user/groups shares"
      tags:
      - Albums sharing
      x-accepts: application/json
    patch:
      description: |
        This is mainly used for enabling/disabling Download permissions on public sharing link
      parameters:
      - description: Unique ID of the user
        explode: false
        in: path
        name: userid
        required: true
        schema:
          type: string
        style: simple
      - description: Unique ID of the album
        explode: false
        in: path
        name: albumid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.fotoware.sharing-update+json:
            schema:
              $ref: '#/components/schemas/SharingUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingLinkList'
            application/vnd.fotoware.sharing-link-list+json:
              schema:
                $ref: '#/components/schemas/SharingLinkList'
          description: 200 OK
      summary: Make updates to album sharing for an album.
      tags:
      - Albums sharing
      x-content-type: application/vnd.fotoware.sharing-update+json
      x-accepts: application/json
  /fotoweb/archives/{archiveid}/{folderpath}/{asset}.annotations/:
    get:
      parameters:
      - description: The id of the archive.
        explode: false
        in: path
        name: archiveid
        required: true
        schema:
          type: string
        style: simple
      - description: The folder path to where the asset is found.
        explode: false
        in: path
        name: folderpath
        required: true
        schema:
          type: string
        style: simple
      - description: Asset reference. Note that the reference is without the .info
          postfix.
        explode: false
        in: path
        name: asset
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationList'
            application/vnd.fotoware.annotation-list+json:
              schema:
                $ref: '#/components/schemas/AnnotationList'
            application/vnd.fotoware.count+json:
              schema:
                $ref: '#/components/schemas/Count'
          description: OK
      summary: Get all the annotations for an asset
      tags:
      - Annotations
      x-accepts: application/json
    post:
      parameters:
      - description: The id of the archive.
        explode: false
        in: path
        name: archiveid
        required: true
        schema:
          type: string
        style: simple
      - description: The folder path to where the asset is found.
        explode: false
        in: path
        name: folderpath
        required: true
        schema:
          type: string
        style: simple
      - description: Asset reference. Note that the reference is without the .info
          postfix.
        explode: false
        in: path
        name: asset
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Annotation'
          application/vnd.fotoware.annotation+json:
            schema:
              $ref: '#/components/schemas/Annotation'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
            application/vnd.fotoware.annotation+json:
              schema:
                $ref: '#/components/schemas/Annotation'
          description: OK
      summary: Add a new annotation for an asset
      tags:
      - Annotations
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/archives/{archiveid}/{folderpath}/{asset}.annotations/{annotationid}:
    delete:
      parameters:
      - description: The id of the archive.
        explode: false
        in: path
        name: archiveid
        required: true
        schema:
          type: string
        style: simple
      - description: The folder path to where the asset is found.
        explode: false
        in: path
        name: folderpath
        required: true
        schema:
          type: string
        style: simple
      - description: Asset reference. Note that the reference is without the .info
          postfix.
        explode: false
        in: path
        name: asset
        required: true
        schema:
          type: string
        style: simple
      - description: The unique id of the annotation.
        explode: false
        in: path
        name: annotationid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: OK
        "404":
          description: Annotation not found
      summary: Delete an annotation from an asset
      tags:
      - Annotations
      x-accepts: application/json
    get:
      parameters:
      - description: The id of the archive.
        explode: false
        in: path
        name: archiveid
        required: true
        schema:
          type: string
        style: simple
      - description: The folder path to where the asset is found.
        explode: false
        in: path
        name: folderpath
        required: true
        schema:
          type: string
        style: simple
      - description: Asset reference. Note that the reference is without the .info
          postfix.
        explode: false
        in: path
        name: asset
        required: true
        schema:
          type: string
        style: simple
      - description: The unique id of the annotation.
        explode: false
        in: path
        name: annotationid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
            application/vnd.fotoware.annotation+json:
              schema:
                $ref: '#/components/schemas/Annotation'
          description: OK
      summary: Get the annotation for an asset based on the annotation id
      tags:
      - Annotations
      x-accepts: application/json
    patch:
      parameters:
      - description: The id of the archive.
        explode: false
        in: path
        name: archiveid
        required: true
        schema:
          type: string
        style: simple
      - description: The folder path to where the asset is found.
        explode: false
        in: path
        name: folderpath
        required: true
        schema:
          type: string
        style: simple
      - description: Asset reference. Note that the reference is without the .info
          postfix.
        explode: false
        in: path
        name: asset
        required: true
        schema:
          type: string
        style: simple
      - description: The unique id of the annotation.
        explode: false
        in: path
        name: annotationid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Annotation'
          application/vnd.fotoware.annotation+json:
            schema:
              $ref: '#/components/schemas/Annotation'
      responses:
        "204":
          description: OK
      summary: Edit an annotation on an asset
      tags:
      - Annotations
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/archives/:
    get:
      externalDocs:
        description: Archives
        url: https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Archives
      parameters:
      - description: Query for asset(s). See <a target="_blank" href="https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Collection_Queries">Collection
          Queries</a> for more information on querying.
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
            application/vnd.fotoware.collectionlist+json:
              schema:
                $ref: '#/components/schemas/CollectionList'
          description: OK. Call successfuly completed
      security: []
      summary: |
        Get all publically available archives in the FotoWare DAM instance. To search, add the q parameter.
      tags:
      - Archives
      x-accepts: application/json
  /fotoweb/me/archives/:
    get:
      externalDocs:
        description: Archives
        url: https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Archives
      operationId: GetPrivateArchiveList
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
            application/vnd.fotoware.collectionlist+json:
              schema:
                $ref: '#/components/schemas/CollectionList'
          description: OK. Call successfuly completed
        "401":
          description: Unauthorized. Access is denied due to invalid credentials
      summary: Lists the archives accessible by the current user/access token.
      tags:
      - Archives
      x-accepts: application/json
  /fotoweb/archives/{id}/:
    get:
      operationId: GetArchive
      parameters:
      - description: Unique ID of the archive
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
            application/vnd.fotoware.collection+json:
              schema:
                $ref: '#/components/schemas/Collection'
            application/vnd.fotoware.collectioninfo+json:
              schema:
                $ref: '#/components/schemas/CollectionInfo'
            application/vnd.fotoware.collectionlist+json:
              schema:
                $ref: '#/components/schemas/CollectionList'
            application/vnd.fotoware.assetlist+json:
              schema:
                $ref: '#/components/schemas/AssetList'
          description: OK. Call successfuly completed
        "401":
          description: Unauthorized. Access is denied due to invalid credentials
      summary: Get all information about an archive
      tags:
      - Archives
      x-accepts: application/json
  /fotoweb/editors/{viewid}:
    get:
      description: Pass in the metadata view id to get the full representation of
        the view
      externalDocs:
        description: Metadata Views
        url: https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Metadata_Views
      parameters:
      - description: Unique ID of the metadata view
        explode: false
        in: path
        name: viewid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataView'
            application/vnd.fotoware.metadata-set+json:
              schema:
                $ref: '#/components/schemas/MetadataView'
          description: OK. Call successfuly completed
        "401":
          description: Unauthorized. Access is denied due to invalid credentials
        "403":
          description: Forbidden. The authenticated user do not have access to get
            the metadata view representation
      summary: Get a metadata view representation
      tags:
      - Assets and Metadata
      x-accepts: application/json
  /fotoweb/archives/{archiveid}/{folderid}/{asset}:
    get:
      description: |
        All asset resources have this representation. This includes assets in all kinds of collections, such as archives, albums and search results.
        Information returned about an asset may vary depending on the user that is making the request. In particular, the permissions and previews fields may contain different values for different users. They reflect the permissions that the requesting user has on the asset and the types of previews (size, watermarked or not watermarked, etc.) that are available to that user.
        The doctype field determines what subsections are present in the attributes section. For example, if the doctype is "image", then attributes.imageattributes is always present. However, it is recommended to explicitly check for presence of these subsections instead whenever they are used
      operationId: GetAssetDetails
      parameters:
      - description: Unique ID of the archive
        explode: false
        in: path
        name: archiveid
        required: true
        schema:
          type: string
        style: simple
      - description: Unique ID of the folder
        explode: false
        in: path
        name: folderid
        required: true
        schema:
          type: string
        style: simple
      - description: Unique asset
        explode: false
        in: path
        name: asset
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
            application/vnd.fotoware.asset+json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: OK
      summary: Get the json representation of an asset
      tags:
      - Assets and Metadata
      x-accepts: application/json
    patch:
      description: Use patch on an asset to update the metadata. The metadata to update
        is defined in the request body. Required permissions - Edit Metadata on the
        archive containing the asset.
      externalDocs:
        description: Updating metadata on an asset
        url: https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Updating_metadata_on_an_asset
      operationId: PatchMetadata
      parameters:
      - description: Unique ID of the archive
        explode: false
        in: path
        name: archiveid
        required: true
        schema:
          type: string
        style: simple
      - description: Unique ID of the folder
        explode: false
        in: path
        name: folderid
        required: true
        schema:
          type: string
        style: simple
      - description: Unique asset
        explode: false
        in: path
        name: asset
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.fotoware.assetupdate+json:
            schema:
              $ref: '#/components/schemas/AssetUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
            application/vnd.fotoware.asset+json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: OK. Call successfuly completed
        "400":
          description: Bad Request. For instance if the metadata object is formatted
            wrong
      summary: Update metadata on an asset
      tags:
      - Assets and Metadata
      x-content-type: application/vnd.fotoware.assetupdate+json
      x-accepts: application/json
  /fotoweb/me/cart:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
            application/vnd.fotoware.count+json:
              schema:
                $ref: '#/components/schemas/Count'
            application/vnd.fotoware.order+json:
              schema:
                $ref: '#/components/schemas/Order'
          description: OK
        "401":
          description: Unauthorized
      summary: Get the count of items in the users cart
      tags:
      - Orders
      x-accepts: application/json
    post:
      description: Add one or more items to the users shopping cart by using the assets
        url.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetLinkList'
          application/vnd.fotoware.assetlinklist+json:
            schema:
              $ref: '#/components/schemas/AssetLinkList'
      responses:
        "204":
          description: OK
        "403":
          description: Forbidden. No access to add items to the users cart.
        "400":
          description: Bad request. For instance malformed url to asset.
      summary: Add item(s) to users personal cart
      tags:
      - Orders
      x-content-type: application/json
      x-accepts: application/json
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartUpdate'
          application/vnd.fotoware.cart-update+json:
            schema:
              $ref: '#/components/schemas/CartUpdate'
      responses:
        "204":
          description: OK
        "403":
          description: Forbidden
        "400":
          description: Bad request
      summary: Edit the content of a cart
      tags:
      - Orders
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/me/orders/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
            application/vnd.fotoware.orderlist+json:
              schema:
                $ref: '#/components/schemas/OrderList'
          description: OK
      summary: Users personal order list
      tags:
      - Orders
      x-accepts: application/json
    post:
      requestBody:
        content:
          application/vnd.fotoware.cart-update+json:
            schema:
              $ref: '#/components/schemas/CartUpdate'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSubmissionInfo'
            application/vnd.fotoware.order-submission-info+json:
              schema:
                $ref: '#/components/schemas/OrderSubmissionInfo'
          description: Created
        "403":
          description: Forbidden. The user does not have "Order" permission in the
            archives of any of the assets in the request
        "400":
          description: Bad request
      summary: Submit the shopping cart to an order
      tags:
      - Orders
      x-content-type: application/vnd.fotoware.cart-update+json
      x-accepts: application/json
  /fotoweb/orders/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
            application/vnd.fotoware.count+json:
              schema:
                $ref: '#/components/schemas/Count'
            application/vnd.fotoware.orderlist+json:
              schema:
                $ref: '#/components/schemas/OrderList'
          description: OK
      summary: Site's global order history
      tags:
      - Orders
      x-accepts: application/json
  /fotoweb/orders/pending/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
            application/vnd.fotoware.count+json:
              schema:
                $ref: '#/components/schemas/Count'
            application/vnd.fotoware.orderlist+json:
              schema:
                $ref: '#/components/schemas/OrderList'
          description: OK
      summary: Site's global list of pending orders
      tags:
      - Orders
      x-accepts: application/json
  /fotoweb/orders/approved/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
            application/vnd.fotoware.count+json:
              schema:
                $ref: '#/components/schemas/Count'
            application/vnd.fotoware.orderlist+json:
              schema:
                $ref: '#/components/schemas/OrderList'
          description: OK
      summary: Site's global list of approved orders
      tags:
      - Orders
      x-accepts: application/json
  /fotoweb/orders/rejected/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
            application/vnd.fotoware.count+json:
              schema:
                $ref: '#/components/schemas/Count'
            application/vnd.fotoware.orderlist+json:
              schema:
                $ref: '#/components/schemas/OrderList'
          description: OK
        "401":
          description: 401 Unauthorized
      summary: Site's global list of rejected orders
      tags:
      - Orders
      x-accepts: application/json
  /fotoweb/orders/{orderhref}:
    patch:
      parameters:
      - description: Unique ID of the order
        explode: false
        in: path
        name: orderhref
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'
          application/vnd.fotoware.orderupdate+json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'
      responses:
        "200":
          content:
            application/vnd.fotoware.order+json:
              schema:
                $ref: '#/components/schemas/Order'
          description: OK
      summary: This request can be used to modify an existing order that is in pending
        or created state
      tags:
      - Orders
      x-content-type: application/json
      x-accepts: application/vnd.fotoware.order+json
  /fotoweb/services/renditions:
    post:
      description: |
        The representation of an asset gives you a list with predefined renditions available for the asset. This request uses the url
        to one of those renditions to generate a download url for the asset rendition.
      externalDocs:
        description: Downloading asset renditions
        url: https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Downloading_asset_renditions_using_the_RESTful_API
      requestBody:
        content:
          application/vnd.fotoware.rendition-request+json:
            schema:
              $ref: '#/components/schemas/RenditionRequest'
      responses:
        "200":
          content:
            application/vnd.fotoware.rendition-response+json:
              schema:
                $ref: '#/components/schemas/RenditionResponse'
          description: OK
        "401":
          description: Unauthorized. Access is denied due to invalid credentials
        "403":
          description: Forbidden. The user does not have permission to download the
            rendition.
      summary: Get the rendition download url
      tags:
      - Renditions
      x-content-type: application/vnd.fotoware.rendition-request+json
      x-accepts: application/vnd.fotoware.rendition-response+json
  /fotoweb/me/background-tasks/{id}:
    get:
      description: Gives you the status and info of a submitted background task
      parameters:
      - description: Unique id of the background tasks
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadStatus'
            application/vnd.fotoware.task-status+json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
            application/vnd.fotoware.upload-status+json:
              schema:
                $ref: '#/components/schemas/UploadStatus'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found
      summary: Polls the status of a tasks
      tags:
      - Background tasks
      x-accepts: application/json
  /fotoweb/me/background-tasks/:
    post:
      description: |
        FotoWeb uses a system of background tasks for some user-triggered operations. These operations cannot be run in a normal request handler as they would take too long time to finish. These operations include: Download | Metadata updates | Actions and marker actions | General File operations (move, copy, rotate etc) | Upload
      requestBody:
        content:
          application/vnd.fotoware.metadata-edit-request+json:
            schema:
              $ref: '#/components/schemas/MetadataEditRequest'
          application/vnd.fotoware.action-request+json:
            schema:
              $ref: '#/components/schemas/ActionRequest'
          application/vnd.fotoware.marker-request+json:
            schema:
              $ref: '#/components/schemas/MarkerRequest'
          application/vnd.fotoware.duplicate-request+json:
            schema:
              $ref: '#/components/schemas/DuplicateRequest'
          application/vnd.fotoware.delete-request+json:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
          application/vnd.fotoware.rename-request+json:
            schema:
              $ref: '#/components/schemas/RenameRequest'
          application/vnd.fotoware.move-request+json:
            schema:
              $ref: '#/components/schemas/MoveRequest'
          application/vnd.fotoware.copy-request+json:
            schema:
              $ref: '#/components/schemas/CopyRequest'
          application/vnd.fotoware.rotate-request+json:
            schema:
              $ref: '#/components/schemas/RotateRequest'
      responses:
        "201":
          content:
            application/vnd.fotoware.metadata-edit-response+json:
              schema:
                $ref: '#/components/schemas/MetadataEditResponse'
            application/vnd.fotoware.action-response+json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
            application/vnd.fotoware.marker-response+json:
              schema:
                $ref: '#/components/schemas/MarkerResponse'
            application/vnd.fotoware.duplicate-response+json:
              schema:
                $ref: '#/components/schemas/DuplicateResponse'
            application/vnd.fotoware.delete-response+json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
            application/vnd.fotoware.rename-response+json:
              schema:
                $ref: '#/components/schemas/RenameResponse'
            application/vnd.fotoware.move-response+json:
              schema:
                $ref: '#/components/schemas/MoveResponse'
            application/vnd.fotoware.copy-response+json:
              schema:
                $ref: '#/components/schemas/CopyResponse'
            application/vnd.fotoware.rotate-response+json:
              schema:
                $ref: '#/components/schemas/RotateResponse'
          description: "Background task created, returns reference to polling url"
      summary: Triggers a background task that runs an operation on an asset
      tags:
      - Background tasks
      x-content-type: application/vnd.fotoware.metadata-edit-request+json
      x-accepts: "application/vnd.fotoware.action-response+json,application/vnd.fotoware.copy-response+json,application/vnd.fotoware.delete-response+json,application/vnd.fotoware.duplicate-response+json,application/vnd.fotoware.marker-response+json,application/vnd.fotoware.metadata-edit-response+json,application/vnd.fotoware.move-response+json,application/vnd.fotoware.rename-response+json,application/vnd.fotoware.rotate-response+json"
  /fotoweb/api/taxonomies/:
    get:
      description: |
        A paged list of taxononmies is returned. The list has one item for each metadata field with taxonomy enabled. The page URLs of this paged list can be obtained from the paging information in the result.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxonomyList'
            application/vnd.fotoware.taxonomy-list+json:
              schema:
                $ref: '#/components/schemas/TaxonomyList'
          description: Taxonomy list
        "406":
          description: Invalid type requested and paging header specified
      summary: List all fields with taxonomy enabled
      tags:
      - Taxonomies
      x-accepts: application/json
    post:
      description: |
        Creates a new taxonomy and enables the taxonomy for a field. The url to the new taxonomy is returned in the Location header in the response.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxonomyCreationInfo'
          application/vnd.fotoware.taxonomy-creation-info+json:
            schema:
              $ref: '#/components/schemas/TaxonomyCreationInfo'
      responses:
        "201":
          description: Taxonomy created
          headers:
            Location:
              description: URL of the new taxonomy
              explode: false
              schema:
                type: string
              style: simple
        "401":
          description: Unauthorized
        "403":
          description: User is not allowed to create taxonomy
      summary: Create a new taxonomy
      tags:
      - Taxonomies
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/taxonomies/;p={p}:
    get:
      description: |
        This request returns a paged list of taxonomies with one item for each metadata field for which taxonomy is enabled.
        The page URLs of this paged list can also be obtained from the paging information of each page.
      parameters:
      - description: Page Number
        explode: false
        in: path
        name: p
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxonomyList'
            application/vnd.fotoware.taxonomy-list+json:
              schema:
                $ref: '#/components/schemas/TaxonomyList'
          description: Taxonomy list
        "406":
          description: Invalid type requested and paging header specified
      summary: List all fields with taxonomy enabled
      tags:
      - Taxonomies
      x-accepts: application/json
  /fotoweb/api/taxonomies/{fieldId}/:
    delete:
      parameters:
      - description: Numeric ID of the metadata field
        explode: false
        in: path
        name: fieldId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: Taxonomy has been deleted or was not enabled
        "401":
          description: Unauthorized
        "403":
          description: User is not allowed to delete taxonomy
        "404":
          description: Metadata field not valid
      summary: Delete a taxonomy
      tags:
      - Taxonomies
      x-accepts: application/json
    get:
      description: |
        Returns the description of the taxonomy and/or a paged list of top level items in the taxonomy.

        The page URLs of this paged list can also be obtained from the paging information of each page.

        If a paging parameter is specified, then this request always returns a taxonomy item list, and other content types are not acceptable.
      parameters:
      - description: Numeric ID of the metadata field
        explode: false
        in: path
        name: fieldId
        required: true
        schema:
          type: integer
        style: simple
      - description: Query string
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Taxonomy'
            application/vnd.fotoware.taxonomy+json:
              schema:
                $ref: '#/components/schemas/Taxonomy'
            application/vnd.fotoware.taxonomy-info+json:
              schema:
                $ref: '#/components/schemas/TaxonomyInfo'
            application/vnd.fotoware.taxonomy-item-list+json:
              schema:
                $ref: '#/components/schemas/TaxonomyItemList'
          description: Taxonomy
        "404":
          description: "Metadata field is not valid, or taxonomy not enabled"
        "406":
          description: Invalid type requested and paging header specified
      summary: "Get taxonomy of a metadata field, list root items"
      tags:
      - Taxonomies
      x-accepts: application/json
    post:
      parameters:
      - description: Numeric ID of the metadata field
        explode: false
        in: path
        name: fieldId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxonomyItemCreationInfo'
          application/vnd.fotoware.taxonomy-item-creation-info+json:
            schema:
              $ref: '#/components/schemas/TaxonomyItemCreationInfo'
      responses:
        "201":
          description: Taxonomy item has been created
          headers:
            Location:
              description: URL of the new taxonomy item
              explode: false
              schema:
                type: string
              style: simple
        "401":
          description: Unauthorized
        "403":
          description: User is not allowed to create taxonomy item
        "404":
          description: "Metadata field not valid, or taxonomy not enabled"
      summary: Create a new taxonomy item at the root of the taxonomy
      tags:
      - Taxonomies
      x-content-type: application/json
      x-accepts: application/json
    put:
      parameters:
      - description: Numeric ID of the metadata field
        explode: false
        in: path
        name: fieldId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxonomyUpdate'
          application/vnd.fotoware.taxonomy-update+json:
            schema:
              $ref: '#/components/schemas/TaxonomyUpdate'
      responses:
        "204":
          description: Taxonomy has been updated
        "401":
          description: Unauthorized
        "403":
          description: User is not allowed to update taxonomy
      summary: Update a taxonomy field
      tags:
      - Taxonomies
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/taxonomies/{fieldId}/;p={p}:
    get:
      description: |
        Returns the description of the taxonomy and/or a paged list of top level items in the taxonomy.

        The page URLs of this paged list can also be obtained from the paging information of each page.

        If a paging parameter is specified,then this request always returns a taxonomy item list, and other content types are not acceptable.
      parameters:
      - description: Numeric ID of the metadata field
        explode: false
        in: path
        name: fieldId
        required: true
        schema:
          type: integer
        style: simple
      - description: Page Number
        explode: false
        in: path
        name: p
        required: true
        schema:
          type: integer
        style: simple
      - description: Query string
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Taxonomy'
            application/vnd.fotoware.taxonomy+json:
              schema:
                $ref: '#/components/schemas/Taxonomy'
            application/vnd.fotoware.taxonomy-info+json:
              schema:
                $ref: '#/components/schemas/TaxonomyInfo'
            application/vnd.fotoware.taxonomy-item-list+json:
              schema:
                $ref: '#/components/schemas/TaxonomyItemList'
          description: Taxonomy
        "404":
          description: "Metadata field is not valid, or taxonomy not enabled"
        "406":
          description: Invalid type requested and paging header specified
      summary: "Get taxonomy of a metadata field, list root items"
      tags:
      - Taxonomies
      x-accepts: application/json
  /fotoweb/api/taxonomies/{fieldId}/{itemId}:
    delete:
      parameters:
      - description: Numeric ID of the metadata field
        explode: false
        in: path
        name: fieldId
        required: true
        schema:
          type: integer
        style: simple
      - description: Unique ID of the taxonomy item
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Taxonomy item has been deleted or did not exist
        "401":
          description: Unauthorized
        "403":
          description: User is not allowed to update taxonomy items
      summary: Delete a taxonomy item
      tags:
      - Taxonomies
      x-accepts: application/json
    get:
      description: |
        Returns the description of the taxonomy item and a paged list of child items.
      parameters:
      - description: Numeric ID of the metadata field
        explode: false
        in: path
        name: fieldId
        required: true
        schema:
          type: integer
        style: simple
      - description: Unique ID of the taxonomy item
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxonomyItem'
            application/vnd.fotoware.taxonomy-item+json:
              schema:
                $ref: '#/components/schemas/TaxonomyItem'
            application/vnd.fotoware.taxonomy-item-info+json:
              schema:
                $ref: '#/components/schemas/TaxonomyItemInfo'
            application/vnd.fotoware.taxonomy-item-list+json:
              schema:
                $ref: '#/components/schemas/TaxonomyItemList'
          description: Taxonomy
        "404":
          description: Taxonomy item not found
        "406":
          description: Invalid type requested and paging header specified
      summary: Get taxonomy item and list children
      tags:
      - Taxonomies
      x-accepts: application/json
    post:
      parameters:
      - description: Numeric ID of the metadata field
        explode: false
        in: path
        name: fieldId
        required: true
        schema:
          type: integer
        style: simple
      - description: Unique ID of the taxonomy item
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxonomyItemCreationInfo'
          application/vnd.fotoware.taxonomy-item-creation-info+json:
            schema:
              $ref: '#/components/schemas/TaxonomyItemCreationInfo'
      responses:
        "201":
          description: Taxonomy item has been created
          headers:
            Location:
              description: URL of the new taxonomy item
              explode: false
              schema:
                type: string
              style: simple
        "401":
          description: Unauthorized
        "403":
          description: User is not allowed to create taxonomy items
        "404":
          description: "Metadata field not valid, or taxonomy not enabled"
      summary: Create a new taxonomy item under an existing item
      tags:
      - Taxonomies
      x-content-type: application/json
      x-accepts: application/json
    put:
      parameters:
      - description: Numeric ID of the metadata field
        explode: false
        in: path
        name: fieldId
        required: true
        schema:
          type: integer
        style: simple
      - description: Unique ID of the taxonomy item
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxonomyItemUpdate'
          application/vnd.fotoware.taxonomy-item-update+json:
            schema:
              $ref: '#/components/schemas/TaxonomyItemUpdate'
      responses:
        "204":
          description: Taxonomy item has been updated
        "401":
          description: Unauthorized
        "403":
          description: User is not allowed to update taxonomy item
        "404":
          description: Taxonomy item not found
      summary: Update the description of a taxonomy item
      tags:
      - Taxonomies
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/taxonomies/{fieldId}/{itemId}/;p={p}:
    get:
      description: |
        Returns the description of the taxonomy item and a paged list of its child items. The URLs of this paged list can also be obtained from the paging information in the result.
      parameters:
      - description: Numeric ID of the metadata field
        explode: false
        in: path
        name: fieldId
        required: true
        schema:
          type: integer
        style: simple
      - description: Unique ID of the taxonomy item
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      - description: Page Number
        explode: false
        in: path
        name: p
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxonomyItem'
            application/vnd.fotoware.taxonomy-item+json:
              schema:
                $ref: '#/components/schemas/TaxonomyItem'
            application/vnd.fotoware.taxonomy-item-info+json:
              schema:
                $ref: '#/components/schemas/TaxonomyItemInfo'
            application/vnd.fotoware.taxonomy-item-list+json:
              schema:
                $ref: '#/components/schemas/TaxonomyItemList'
          description: Taxonomy
        "404":
          description: Taxonomy item not found
      summary: Get a taxonomy item and list its children
      tags:
      - Taxonomies
      x-accepts: application/json
  /fotoweb/api/taxonomies/archives/{archiveID}:
    get:
      description: |
        Returns a list of taxonomy fields with root items for the archive id that is passed as a parameter.
      parameters:
      - description: Numeric ID of the archive
        explode: false
        in: path
        name: archiveID
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Taxonomy'
                type: array
          description: Taxonomy field list with root items
        "404":
          description: Archive not found
      summary: Get all the taxonomies for an archive
      tags:
      - Taxonomies
      x-accepts: application/json
  /fotoweb/api/taxonomies/info:
    post:
      requestBody:
        content:
          application/json:
            schema:
              items:
                description: Taxonomy item ID.
                type: string
              type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TaxonomyItem'
                type: array
          description: Taxonomy item list
      summary: Get a taxonomy item list by passing in an item id list
      tags:
      - Taxonomies
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/me/upload-to/:
    get:
      externalDocs:
        description: Detailed info on ingestion
        url: https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Ingestion
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
            application/vnd.fotoware.collectionlist+json:
              schema:
                $ref: '#/components/schemas/CollectionList'
          description: Collection List
      summary: List of collections that are available to be uploaded to
      tags:
      - Upload
      x-accepts: application/json
  /fotoweb/archives/{archiveHREF}/:
    post:
      description: |
        Note:
          * The upload location URL (upload_location_url) must be the URL found in the href attribute of the archive representation. Please do not hard-code upload location URLs.
          * To get the upload request URL of an already known archive (with a known API URL), first request the archive representation of the archive, then use the value of the href-attribute for the upload request
          * If the archive has a custom input folder, then assets can only be uploaded to the root URL of the archive. It is not possible to upload to a specific sub folder or to create a new sub folder during upload.
      externalDocs:
        description: Upload assets using the API
        url: https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Uploading_assets_using_the_API
      parameters:
      - description: The url to the archive
        explode: false
        in: path
        name: archiveHREF
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Ignored by FotoWeb. Should match the MIME type of the file, but can safely be set to application/octet-stream regardless of file type.
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/vnd.fotoware.upload-response+json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
          description: |
            202 Accepted.
            Once the file transfer has finished, the API returns a response with status code 202 Accepted. At this time, the upload is not finished. The server has to do further processing, such as applying metadata, doing consistency and security checks, copying the file to its storage location, and generating renditions. It is not guaranteed that all of these operations will complete successfully. Clients should not attempt to make any API requests that rely on the existence of the uploaded assets before the upload has finished successfully. The response includes a URL which can be used for polling the status of the upload. Use the background-tasks endpoint.
      summary: |
        Assets are uploaded by making a POST request to the URL of the archive. Each request can contain one or more assets. Upload uses HTTP Multipart requests, as defined in RFC1341.
        It is also possible to create a new folder (or a hierarchy of nested folders) and upload assets to the new folder.
      tags:
      - Upload
      x-accepts: application/vnd.fotoware.upload-response+json
  /fotoweb/api/uploads:
    post:
      description: |
        This initial upload request begins the process for uploading a single asset by setting up an upload task with a unique Upload ID which is used in all following API requests.
      externalDocs:
        description: Send initial upload request
        url: https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Upload_API#1._Send_initial_upload_request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUploadCreate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUploadInfo'
          description: |
            OK. Call successfuly completed
        "400":
          description: |
            Bad Request. For instance if a parameter is invalid or the destination url is invalid
        "403":
          description: |
            Forbidden. If the user does not have permission to upload, or the checkoutId exists but does not belong to the user
      summary: |
        Create a new upload task
      tags:
      - Upload
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/uploads/{uploadId}/status:
    get:
      description: |
        This request is made to poll the status of an upload task.
      externalDocs:
        description: Poll status for completion
        url: https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Upload_API#4._Poll_status_for_completion
      parameters:
      - description: Unique ID of the upload task
        explode: false
        in: path
        name: uploadId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUploadStatus'
          description: |
            OK. Call successfuly completed
        "403":
          description: |
            Forbidden. The <UPLOAD_ID> does not exist OR belongs to a different user
      summary: |
        Get the upload task status
      tags:
      - Upload
      x-accepts: application/json
  /fotoweb/api/uploads/{uploadId}/chunks/{chunkIndex}:
    post:
      description: |
        This request uploads a chunk of the file being uploaded. The chunk size and number of chunks to upload is returned in the response
        to the create upload task call.
      externalDocs:
        description: Send file data
        url: https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Upload_API#2._Send_file_data
      parameters:
      - description: Unique ID of the upload task
        explode: false
        in: path
        name: uploadId
        required: true
        schema:
          type: string
        style: simple
      - description: Numeric index of the uploaded chunk
        explode: false
        in: path
        name: chunkIndex
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/_fotoweb_api_uploads__uploadId__chunks__chunkIndex__post_request'
      responses:
        "204":
          description: |
            No Content. Call successfuly completed
        "400":
          description: |
            Bad Request. For instance if the chunk index is invalid or the chunk size is wrong
        "404":
          description: |
            Not Found. There is no upload task with ID <UPLOAD_ID> that belongs to the requesting user
        "409":
          description: |
            Conflict. A chunk with the same index has already been received successfully or the same chunk is already being uploaded by another process
        "415":
          description: |
            Unsupported Media Type. The request body is not multipart/form-data
      summary: |
        Upload a chunk to an upload task
      tags:
      - Upload
      x-content-type: multipart/form-data
      x-accepts: application/json
  /fotoweb/api/uploads/{uploadId}/xmp:
    post:
      description: "This is an optional request to upload an XMP sidecar file that\
        \ contains the metadata of the asset file. XMP sidecars are assumed to be\
        \ \nsmall, so they can be uploaded in one request. If a file has an XMP sidecar,\
        \ then the initial upload request must declare it.\n"
      externalDocs:
        description: Send XMP sidecar file (if required)
        url: https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Upload_API#3._Send_XMP_sidecar_file_(if_required)
      parameters:
      - description: Unique ID of the upload task
        explode: false
        in: path
        name: uploadId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/_fotoweb_api_uploads__uploadId__chunks__chunkIndex__post_request'
      responses:
        "204":
          description: |
            No Content. Call successfuly completed
        "400":
          description: |
            Bad Request. For instance if metadata is invalid or metadata was not expected for the upload
        "404":
          description: |
            Not Found. There is no upload task with ID <UPLOAD_ID> that belongs to the requesting user
        "409":
          description: |
            Conflict. There was a conflict, either XMP was already uploaded or the upload already finished
        "415":
          description: |
            Unsupported Media Type. The request body is not multipart/form-data
      summary: |
        Upload the XMP file to an upload task
      tags:
      - Upload
      x-content-type: multipart/form-data
      x-accepts: application/json
  /fotoweb/api/groups/{id}:
    delete:
      operationId: Group_DeleteGroup
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete a group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
    get:
      operationId: Group_GetGroupById
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: OK
      summary: Get group by ID
      tags:
      - Group Management (Beta)
      x-accepts: application/json
    put:
      operationId: Group_UpdateGroup
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        description: New group properties
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Update a group
      tags:
      - Group Management (Beta)
      x-codegen-request-body-name: properties
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/groups:
    get:
      operationId: Group_GetAllGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: OK
      summary: Get all groups on the site
      tags:
      - Group Management (Beta)
      x-accepts: application/json
    post:
      operationId: Group_CreateNewGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        description: Group properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: OK
      summary: Create a new group
      tags:
      - Group Management (Beta)
      x-codegen-request-body-name: group
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/groups/count:
    get:
      operationId: Group_CountAllGroups
      parameters:
      - description: Count only SSO groups
        explode: true
        in: query
        name: isSso
        required: false
        schema:
          type: boolean
        style: form
      - description: Count only groups from the given SSO provider
        explode: true
        in: query
        name: ssoProvider
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueModelInteger'
          description: OK
      summary: Count all groups on the site
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/external-ids:
    delete:
      operationId: Group_DeleteGroupExternalIds
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete all external IDs of a group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
    get:
      operationId: Group_GetGroupExternalIds
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ExternalId'
                type: array
          description: OK
      summary: Get all external IDs of a group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/external-ids/{provider}:
    delete:
      operationId: Group_DeleteGroupExternalIdsFromProvider
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: ID of the SSO provider
        explode: false
        in: path
        name: provider
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete the external ID of a group from a provider
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/properties:
    delete:
      operationId: Group_DeleteAllGroupProperties
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete all custom properties of a group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
    get:
      operationId: Group_GetGroupPropertyBag
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MemberProperty'
                type: array
          description: OK
      summary: Get all custom properties of a group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/properties/{key}:
    delete:
      operationId: Group_DeleteGroupProperties
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Property key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete a custom property of a group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/member-of:
    delete:
      operationId: Group_DeleteAllGroupMemberships
      parameters:
      - description: ID of group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Remove the group from all groups
      tags:
      - Group Management (Beta)
      x-accepts: application/json
    get:
      operationId: Group_GetDirectGroupMemberships
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: OK
      summary: Get all groups that the group is a direct member of
      tags:
      - Group Management (Beta)
      x-accepts: application/json
    post:
      operationId: Group_AddGroupMemberships
      parameters:
      - description: ID of group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipIdListModel'
        description: IDs of groups
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Add the group to one or more groups
      tags:
      - Group Management (Beta)
      x-codegen-request-body-name: groups
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: The group is removed from all other groups
      operationId: Group_SetGroupMemberships
      parameters:
      - description: ID of group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipIdListModel'
        description: IDs of groups
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Set the groups that the group is a direct member of
      tags:
      - Group Management (Beta)
      x-codegen-request-body-name: groups
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/groups/{id}/member-of/count:
    get:
      operationId: Group_CountDirectGroupMemberships
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueModelInteger'
          description: OK
      summary: Count all groups that the group is a direct member of
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/member-of/{group}:
    delete:
      operationId: Group_DeleteGroupMembership
      parameters:
      - description: ID of group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: ID of group
        explode: false
        in: path
        name: group
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Remove the group from a single group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/member-of-recursive:
    get:
      operationId: Group_GetRecursiveGroupMemberships
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: OK
      summary: Get all distinct groups that the group is a direct or indirect member
        of
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/member-of-recursive/count:
    get:
      operationId: Group_CountRecursiveUserMemberships
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueModelInteger'
          description: OK
      summary: Count all distinct groups that the group is a direct or indirect member
        of
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/users:
    delete:
      operationId: Group_DeleteAllGroupUserMembers
      parameters:
      - description: ID of group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Remove all users from the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
    get:
      operationId: Group_GetGroupDirectUserMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: OK
      summary: Get all users that are direct members of the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
    post:
      operationId: Group_AddGroupUserMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberIdListModel'
        description: IDs of members
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Add users to the given group
      tags:
      - Group Management (Beta)
      x-codegen-request-body-name: members
      x-content-type: application/json
      x-accepts: application/json
    put:
      operationId: Group_SetGroupUserMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberIdListModel'
        description: IDs of new members
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Replace all users that are direct members of a group
      tags:
      - Group Management (Beta)
      x-codegen-request-body-name: members
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/groups/{id}/users/count:
    get:
      operationId: Group_CountGroupDirectUserMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueModelInteger'
          description: OK
      summary: Count all users that are direct members of the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/users-recursive:
    get:
      operationId: Group_GetGroupRecursiveUserMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: OK
      summary: Get all users that are direct or indirect members of the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/users-recursive/count:
    get:
      operationId: Group_CountGroupRecursiveUserMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueModelInteger'
          description: OK
      summary: Count all users that are direct or indirect members of the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/groups:
    delete:
      operationId: Group_DeleteAllGroupGroupMembers
      parameters:
      - description: ID of group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Remove all groups from the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
    get:
      operationId: Group_GetGroupDirectGroupMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: OK
      summary: Get all groups that are direct members of the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
    post:
      operationId: Group_AddGroupGroupMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberIdListModel'
        description: IDs of members
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Add groups to the given group
      tags:
      - Group Management (Beta)
      x-codegen-request-body-name: members
      x-content-type: application/json
      x-accepts: application/json
    put:
      operationId: Group_SetGroupGroupMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberIdListModel'
        description: IDs of new members
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Replace all groups that are direct members of a group
      tags:
      - Group Management (Beta)
      x-codegen-request-body-name: members
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/groups/{id}/groups/count:
    get:
      operationId: Group_CountGroupDirectGroupMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueModelInteger'
          description: OK
      summary: Count all groups that are direct members of the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/groups-recursive:
    get:
      operationId: Group_GetGroupRecursiveGroupembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: OK
      summary: Get all groups that are direct or indirect members of the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/groups-recursive/count:
    get:
      operationId: Group_CountGroupRecursiveGroupMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueModelInteger'
          description: OK
      summary: Count all groups that are direct or indirect members of the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/members:
    delete:
      operationId: Group_DeleteAllGroupMembers
      parameters:
      - description: ID of group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Remove all members from the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
    post:
      operationId: Group_AddGroupMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberIdListModel'
        description: IDs of members
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Add users to the given group
      tags:
      - Group Management (Beta)
      x-codegen-request-body-name: members
      x-content-type: application/json
      x-accepts: application/json
    put:
      operationId: Group_SetGroupMembers
      parameters:
      - description: ID of the group
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberIdListModel'
        description: IDs of new members
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Replace all direct members of a group
      tags:
      - Group Management (Beta)
      x-codegen-request-body-name: members
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/groups/{id}/users/{member}:
    delete:
      operationId: Group_DeleteGroupUserMember
      parameters:
      - description: ID of group to remove from
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: ID of member to remove
        explode: false
        in: path
        name: member
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Remove a user from the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/groups/{id}/groups/{member}:
    delete:
      operationId: Group_DeleteGroupGroupMember
      parameters:
      - description: ID of group to remove from
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: ID of member to remove
        explode: false
        in: path
        name: member
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Remove a group from the given group
      tags:
      - Group Management (Beta)
      x-accepts: application/json
  /fotoweb/api/users/{id}:
    delete:
      operationId: User_DeleteUser
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete a user
      tags:
      - User Management (Beta)
      x-accepts: application/json
    get:
      operationId: User_GetUserById
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      summary: Get user by ID
      tags:
      - User Management (Beta)
      x-accepts: application/json
    put:
      operationId: User_UpdateUser
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: New user properties
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Update a user
      tags:
      - User Management (Beta)
      x-codegen-request-body-name: properties
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/users:
    get:
      operationId: User_GetAllUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: OK
      summary: Get all users on the site
      tags:
      - User Management (Beta)
      x-accepts: application/json
    post:
      operationId: User_CreateNewUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      summary: Create a new user
      tags:
      - User Management (Beta)
      x-codegen-request-body-name: user
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/users/count:
    get:
      operationId: User_CountAllUsers
      parameters:
      - description: Count only users with the given license level
        explode: true
        in: query
        name: licenseLevel
        required: false
        schema:
          enum:
          - None
          - Portal
          - Consumer
          - Contributor
          - Standard
          - Plus
          - Main
          - Editor
          - Pro
          type: string
        style: form
      - description: Count only users with the given license concurrency mode
        explode: true
        in: query
        name: licenseMode
        required: false
        schema:
          enum:
          - Named
          - Concurrent
          type: string
        style: form
      - description: Count only SSO users
        explode: true
        in: query
        name: isSso
        required: false
        schema:
          type: boolean
        style: form
      - description: Count only users from the given SSO provider
        explode: true
        in: query
        name: ssoProvider
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueModelInteger'
          description: OK
      summary: Count all users on the site
      tags:
      - User Management (Beta)
      x-accepts: application/json
  /fotoweb/api/users/{id}/password:
    delete:
      operationId: User_DeleteUserPassword
      parameters:
      - description: ID of user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete the password of a user
      tags:
      - User Management (Beta)
      x-accepts: application/json
  /fotoweb/api/users/{id}/external-ids:
    delete:
      operationId: User_DeleteUserExternalIds
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete all external IDs of a user
      tags:
      - User Management (Beta)
      x-accepts: application/json
    get:
      operationId: User_GetUserExternalIds
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ExternalId'
                type: array
          description: OK
      summary: Get all external IDs of a user
      tags:
      - User Management (Beta)
      x-accepts: application/json
  /fotoweb/api/users/{id}/external-ids/{provider}:
    delete:
      operationId: User_DeleteUserExternalIdsFromProvider
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: ID of the SSO provider
        explode: false
        in: path
        name: provider
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete the external ID of a user from a provider
      tags:
      - User Management (Beta)
      x-accepts: application/json
  /fotoweb/api/users/{id}/properties:
    delete:
      operationId: User_DeleteAllUserProperties
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete all custom properties of a user
      tags:
      - User Management (Beta)
      x-accepts: application/json
    get:
      operationId: User_GetUserPropertyBag
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MemberProperty'
                type: array
          description: OK
      summary: Get all custom properties of a user
      tags:
      - User Management (Beta)
      x-accepts: application/json
  /fotoweb/api/users/{id}/properties/{key}:
    delete:
      operationId: User_DeleteUserProperties
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Property key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete a custom property of a user
      tags:
      - User Management (Beta)
      x-accepts: application/json
  /fotoweb/api/users/{id}/member-of:
    delete:
      operationId: User_DeleteAllUserMemberships
      parameters:
      - description: ID of user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Remove the user from all groups
      tags:
      - User Management (Beta)
      x-accepts: application/json
    get:
      operationId: User_GetUserDirectMemberships
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: OK
      summary: Get all groups that the user is a direct member of
      tags:
      - User Management (Beta)
      x-accepts: application/json
    post:
      operationId: User_AddUserMemberships
      parameters:
      - description: ID of user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipIdListModel'
        description: IDs of groups
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Add the user to one or more groups
      tags:
      - User Management (Beta)
      x-codegen-request-body-name: groups
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: The user is removed from all other groups
      operationId: User_SetUserMemberships
      parameters:
      - description: ID of user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipIdListModel'
        description: IDs of groups
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Set the groups that the user is a direct member of
      tags:
      - User Management (Beta)
      x-codegen-request-body-name: groups
      x-content-type: application/json
      x-accepts: application/json
  /fotoweb/api/users/{id}/member-of/count:
    get:
      operationId: User_CountUserDirectMemberships
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueModelInteger'
          description: OK
      summary: Count all groups that the user is a direct member of
      tags:
      - User Management (Beta)
      x-accepts: application/json
  /fotoweb/api/users/{id}/member-of/{group}:
    delete:
      operationId: User_DeleteUserMembership
      parameters:
      - description: ID of user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: ID of group
        explode: false
        in: path
        name: group
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
      summary: Remove the user from a single group
      tags:
      - User Management (Beta)
      x-accepts: application/json
  /fotoweb/api/users/{id}/member-of-recursive:
    get:
      operationId: User_GetRecursiveUserMemberships
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: OK
      summary: Get all distinct groups that the user is a direct or indirect member
        of
      tags:
      - User Management (Beta)
      x-accepts: application/json
  /fotoweb/api/users/{id}/member-of-recursive/count:
    get:
      operationId: User_CountRecursiveUserMemberships
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueModelInteger'
          description: OK
      summary: Count all distinct groups that the user is a direct or indirect member
        of
      tags:
      - User Management (Beta)
      x-accepts: application/json
  /fotoweb/api/users/{id}/enabled:
    put:
      operationId: User_SetUserEnabled
      parameters:
      - description: User ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValueModelBoolean'
        description: "true to enable, false to disable user"
        required: true
      responses:
        "204":
          content: {}
          description: No Content
      summary: Enable or disable user
      tags:
      - User Management (Beta)
      x-codegen-request-body-name: value
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    Sharing:
      example:
        shares:
        - name: name
          href: href
          acl:
          - view
          - preview
          type: type
          sharedHREF: sharedHREF
        - name: name
          href: href
          acl:
          - view
          - preview
          type: type
          sharedHREF: sharedHREF
        originalHref: originalHref
        showcase:
          from: from
          to: to
          acl:
          - view
          - preview
          - download
          type: type
          sharedHREF: sharedHREF
        href: href
        message:
          title: title
          body: body
      properties:
        message:
          $ref: '#/components/schemas/Sharing_message'
        shares:
          items:
            $ref: '#/components/schemas/Sharing_shares_inner'
          type: array
        showcase:
          $ref: '#/components/schemas/Sharing_showcase'
        href:
          type: string
        originalHref:
          type: string
      type: object
    SharingLinkList:
      example:
        addedShares:
        - acl:
          - view
          - preview
          - download
          type: type
          sharedHREF: sharedHREF
        - acl:
          - view
          - preview
          - download
          type: type
          sharedHREF: sharedHREF
      properties:
        addedShares:
          items:
            $ref: '#/components/schemas/SharingLinkList_addedShares_inner'
          type: array
      type: object
    SharingUpdate:
      properties:
        addShares:
          description: "Used to add shares, or update existing ones"
          items:
            $ref: '#/components/schemas/SharingUpdate_addShares_inner'
          type: array
        removeShares:
          description: Used to remove shares
          items:
            $ref: '#/components/schemas/SharingUpdate_removeShares_inner'
          type: array
        message:
          $ref: '#/components/schemas/SharingUpdate_message'
      type: object
    Annotation:
      example:
        owner:
          avatarHref: avatarHref
          name: name
        allowDelete: true
        color: color
        created: created
        type: type
        props:
          comments:
            count: 0
            href: href
            enabled: true
        fragmentHref: fragmentHref
        top: 5
        left: 1
        width: 6
        modified: modified
        href: href
        text: text
        allowUpdate: true
        height: 0
      properties:
        height:
          type: integer
        href:
          type: string
        width:
          type: integer
        allowUpdate:
          type: boolean
        created:
          type: string
        owner:
          $ref: '#/components/schemas/Annotation_owner'
        text:
          type: string
        props:
          $ref: '#/components/schemas/Annotation_props'
        modified:
          type: string
        fragmentHref:
          type: string
        allowDelete:
          type: boolean
        type:
          type: string
        left:
          type: integer
        color:
          type: string
        top:
          type: integer
      type: object
    AnnotationList:
      description: AnnotationList
      example:
        data:
        - owner:
            avatarHref: avatarHref
            name: name
          allowDelete: true
          color: color
          created: created
          type: type
          props:
            comments:
              count: 0
              href: href
              enabled: true
          fragmentHref: fragmentHref
          top: 6
          left: 5
          width: 1
          modified: modified
          text: text
          href: href
          allowUpdate: true
          height: 5
        - owner:
            avatarHref: avatarHref
            name: name
          allowDelete: true
          color: color
          created: created
          type: type
          props:
            comments:
              count: 0
              href: href
              enabled: true
          fragmentHref: fragmentHref
          top: 6
          left: 5
          width: 1
          modified: modified
          text: text
          href: href
          allowUpdate: true
          height: 5
      properties:
        data:
          items:
            $ref: '#/components/schemas/AnnotationList_data_inner'
          type: array
      type: object
    APIDescriptor:
      example:
        utc_offset: 0
        server: server
        archives: archives
        albums: albums
        screens: screens
        taxonomies: taxonomies
        searchURL: searchURL
        services:
          rendition_request: rendition_request
          search: search
          login: login
        href: href
        background_tasks: background_tasks
      properties:
        server:
          type: string
        screens:
          type: string
        utc_offset:
          type: integer
        archives:
          type: string
        albums:
          type: string
        taxonomies:
          type: string
        services:
          $ref: '#/components/schemas/APIDescriptor_services'
        href:
          type: string
        background_tasks:
          type: string
        searchURL:
          type: string
      type: object
    FullAPIDescriptor:
      example:
        utc_offset: 1
        server: server
        userManagement:
          registeredUsersGroup: registeredUsersGroup
          userList: userList
          adminUser: adminUser
          everyoneGroup: everyoneGroup
          groupList: groupList
          siteOwner: siteOwner
          guestUser: guestUser
        albums: albums
        archives: archives
        upload:
          preserveMetadata: true
        pins: pins
        albums_own: albums_own
        people_search: people_search
        widgets:
          fwdt:
            osx:
              minVersion: minVersion
              installer:
                href: href
                version: version
            services:
              edit: edit
              open: open
              crop: crop
            win:
              installer:
                href: href
                version: version
              minVersion: minVersion
            views:
              install: install
          selection: selection
        users_search: users_search
        bookmarks: bookmarks
        copy_to: copy_to
        security:
          allowFileSystemDestinations: true
        permissions:
          albums:
            showOnHomepage: true
            shareWithGuests: true
            create: true
            comment: true
            addAssets: true
          showAdvancedBreadcrumb: true
          shareCropAndDownloadPresets: true
          delegateDownload: true
          hasAuditPermission: true
          canTogglePositionedMarkers: true
          canManageExports: true
          print: true
          allowTaxonomyEditing: true
          hasManageSettingsPermission: true
          allowShareBookmark: true
          hasAdvancedVideoControls: true
          moderateComments: true
          hasManageServicesPermission: true
          allowRetranscode: true
          canLinkInAdobeCC: true
          hasManageWorkflowsPermission: true
          hasManageArchivesPermission: true
        upload_tokens: upload_tokens
        searchURL: searchURL
        tokens: tokens
        href: href
        albums_archived: albums_archived
        siteConfigurationHref: siteConfigurationHref
        views:
          manage_exports: manage_exports
          manageInvitations: manageInvitations
          edit_taxonomy_item: edit_taxonomy_item
          upload: upload
          loggedOut: loggedOut
          admin_webhooks: admin_webhooks
          subscription:
            siteCreatedDate: siteCreatedDate
            origin: origin
            state: state
          manageConsentForms: manageConsentForms
          pro: pro
          signUpAdmin: signUpAdmin
          changePassword: changePassword
          createInvitations: createInvitations
          selection: selection
          manageSubscription: manageSubscription
        order:
          admin:
            approved: approved
            rejected: rejected
            pending: pending
            history: history
            views:
              pending: pending
          history: history
          config: config
          views:
            history: history
            cart: cart
          cart: cart
        user_preferences: user_preferences
        upload_to: upload_to
        actionCropPresets: actionCropPresets
        signups: signups
        cropDownloadPresets: cropDownloadPresets
        apiFeatureLevels:
          consentFormsApiFeatureLevel: 5
        destinations: destinations
        groups: groups
        albums_deleted: albums_deleted
        services:
          rendition_request: rendition_request
          logout: logout
          search: search
          keepalive:
            interval: 0
            href: href
          navigate_next: navigate_next
          retranscode: retranscode
          navigate_prev: navigate_prev
        background_tasks: background_tasks
        users: users
        alerts: alerts
        albums_shared: albums_shared
        appearance:
          favicon: favicon
          loginLogo: loginLogo
          mobileLogo: mobileLogo
          homepageImage: homepageImage
          mainLogo: mainLogo
          customCss: customCss
        albums_contribute: albums_contribute
        taxonomies: taxonomies
        move_to: move_to
        groups_search: groups_search
        markers: markers
        actions: actions
        user:
          firstName: firstName
          lastName: lastName
          isGuest: true
          userAvatarHref: userAvatarHref
          fullName: fullName
          href: href
          userName: userName
          userId: 6
          email: email
      properties:
        actionCropPresets:
          type: string
        actions:
          type: string
        alerts:
          type: string
        albums:
          description: URL of the list of albums accessible by current user. This
            list contains all albums that the user can access.
          type: string
        albums_archived:
          type: string
        albums_contribute:
          type: string
        albums_deleted:
          description: URL of the list of deleted albums owned by the current user.
          type: string
        albums_own:
          description: URL of the list of albums owned by the current user.
          type: string
        albums_shared:
          description: URL of the list of albums shared with the current user.
          type: string
        appearance:
          $ref: '#/components/schemas/FullAPIDescriptor_appearance'
        archives:
          description: |
            URL of the list of archives that the current user can access. If server-to-server authentication is used, then this list contains all archives on the site.
          type: string
        background_tasks:
          type: string
        bookmarks:
          type: string
        copy_to:
          description: URL of list of collections which to which assets can be copied.
          type: string
        cropDownloadPresets:
          type: string
        destinations:
          type: string
        groups:
          type: string
        groups_search:
          type: string
        href:
          type: string
        markers:
          type: string
        move_to:
          description: URL of list of collections which to which assets can be moved.
          type: string
        order:
          $ref: '#/components/schemas/FullAPIDescriptor_order'
        people_search:
          type: string
        permissions:
          $ref: '#/components/schemas/FullAPIDescriptor_permissions'
        pins:
          type: string
        searchURL:
          description: |
            URL template for global searches in all collections on the site.
            By replacing the placeholders in the template with search parameters, a client can search in all collections.
          type: string
        security:
          $ref: '#/components/schemas/FullAPIDescriptor_security'
        server:
          type: string
        services:
          $ref: '#/components/schemas/FullAPIDescriptor_services'
        signups:
          type: string
        siteConfigurationHref:
          type: string
        taxonomies:
          type: string
        tokens:
          type: string
        upload:
          $ref: '#/components/schemas/FullAPIDescriptor_upload'
        upload_to:
          description: URL of list of collections which to which assets can be uploaded.
          type: string
        upload_tokens:
          type: string
        user:
          $ref: '#/components/schemas/FullAPIDescriptor_user'
        userManagement:
          $ref: '#/components/schemas/FullAPIDescriptor_userManagement'
        user_preferences:
          type: string
        users_search:
          type: string
        users:
          type: string
        utc_offset:
          type: integer
        widgets:
          $ref: '#/components/schemas/FullAPIDescriptor_widgets'
        views:
          $ref: '#/components/schemas/FullAPIDescriptor_views'
        apiFeatureLevels:
          $ref: '#/components/schemas/FullAPIDescriptor_apiFeatureLevels'
      type: object
    Asset:
      example:
        metadata: "{}"
        physicalFileId: physicalFileId
        filesize: 7
        pincount: 4
        permissions:
        - View
        - Preview
        - CropAndDownload
        revisioncount: 1
        consentStatus:
          countByConsentFormState:
          - consentFormCount: 3
            consentFormState: null
          - consentFormCount: 3
            consentFormState: null
          assetConsentState: null
          approvedConsents:
          - title: Photos can be used in social media
            key: C1
          - title: Photos can be used in social media
            key: C1
          ConsentFlags:
          - null
          - null
          consentFormCount: 9
          declinedConsents:
          - title: Photos can be used in social media
            key: C1
          - title: Photos can be used in social media
            key: C1
        modified: modified
        modifiedBy: modifiedBy
        renditions:
        - default: true
          original: true
          sizeFixed: true
          profile: profile
          width: 6
          description: description
          href: http://example.com/aeiou
          display_name: display_name
          height: 7
        - default: true
          original: true
          sizeFixed: true
          profile: profile
          width: 6
          description: description
          href: http://example.com/aeiou
          display_name: display_name
          height: 7
        downloadcount: 2
        href: href
        ancestors:
        - data: data
          name: name
          href: href
        - data: data
          name: name
          href: href
        uniqueid: uniqueid
        capabilities:
          printWithAnnotations: true
          print: true
          crop: true
        archiveHREF: archiveHREF
        created: created
        metadataEditor:
          name: name
          href: href
        dropHREF: dropHREF
        builtinFields:
        - field: field
          value: value
          required: true
        - field: field
          value: value
          required: true
        props:
          shares:
            enabled: true
          comments:
            enabled: true
          annotations:
            enabled: true
        doctype: doctype
        filename: filename
        metadataeditcount: 2
        createdBy: createdBy
        workflowcount: 4
        previews:
        - square: true
          size: 1
          width: 5
          href: href
          height: 5
        - square: true
          size: 1
          width: 5
          href: href
          height: 5
        quickRenditions:
        - square: true
          size: 1
          width: 1
          name: name
          href: href
          height: 1
        - square: true
          size: 1
          width: 1
          name: name
          href: href
          height: 1
        attributes:
          imageattributes:
            colorspace: colorspace
            rotation: 5
            flipmirror: 1
            pixelheight: 0
            resolution: 6
            pixelwidth: 5
        previewcount: 7
        previewToken: previewToken
        linkstance: linkstance
        thumbnailFields:
          secondLine:
            value: value
          label:
            value: value
          firstLine:
            value: value
      properties:
        archiveHREF:
          description: |
            Links to Archive. URL of the archive which contains the asset. Each asset is contained in only one archive.
            If the asset was discovered in a different kind of collection (such as an album, a search result or a folder), then this attribute can be used for finding the root URL of the original archive.
          type: string
        ancestors:
          items:
            $ref: '#/components/schemas/Asset_ancestors_inner'
          type: array
        attributes:
          $ref: '#/components/schemas/Asset_attributes'
        builtinFields:
          items:
            $ref: '#/components/schemas/Asset_builtinFields_inner'
          type: array
        capabilities:
          $ref: '#/components/schemas/Asset_capabilities'
        created:
          description: The date and time on which the asset was created
          type: string
        createdBy:
          type: string
        doctype:
          description: |
            Type of this asset. For possible values, please see document types. This attribute determines which sub sections of the attributes section are present.
          type: string
        downloadcount:
          type: integer
        dropHREF:
          type: string
        filesize:
          description: Size of the file in bytes
          type: integer
        filename:
          description: Name of the file without path
          type: string
        href:
          description: |
            Links to asset. Original URL of the asset within the originating archive. This URL is used for most workflow operations.
          type: string
        linkstance:
          description: |
            Links to asset. The asset is then said to have multiple instances, one instance per distinct collection.
            For archives and folders, linkstance is always identical to href, which is called the original instance of the asset.
            Use linkstance to follow links from asset lists to individual assets
          type: string
        consentStatus:
          $ref: '#/components/schemas/ConsentStatus'
        physicalFileId:
          description: |
            A physical file is a distinct representation of an asset in a single storage location with its own state (metadata, file properties, etc.).
            A physical file ID is a string of the form <POOL_ID><RELATIVE_PATH> where
            <POOL_ID> is the pool ID as returned by the /fotoweb/api/config/pools API today. A hash-based pseudo ID is used on-premises.
            <RELATIVE_PATH> is the canonical path to the file within the pool starting with /, same as in its FWP URL.
          type: string
        metadata:
          description: |
            Contains values of metadata fields of this asset which are exposed by the API. Usually, the metadata set associated with the archive to which the asset belongs controls which fields are available.
          type: object
        metadataeditcount:
          type: integer
        metadataEditor:
          $ref: '#/components/schemas/Asset_metadataEditor'
        modified:
          description: The date and time on which the asset was last modified
          type: string
        modifiedBy:
          type: string
        permissions:
          description: "List of permissions that the requesting user has on this asset.\
            \ For possible values, please see permissions."
          example:
          - View
          - Preview
          - CropAndDownload
          items: {}
          type: array
        pincount:
          type: integer
        previewcount:
          type: integer
        previews:
          description: "List of available thumbnail and preview images of this asset.\
            \ For details, please see preview lists"
          items:
            $ref: '#/components/schemas/Asset_previews_inner'
          type: array
        previewToken:
          type: string
        props:
          $ref: '#/components/schemas/Asset_props'
        quickRenditions:
          items:
            $ref: '#/components/schemas/Asset_quickRenditions_inner'
          type: array
        renditions:
          description: "List of available renditions of this asset. Renditions are\
            \ used for downloading assets, either original or processed."
          items:
            $ref: '#/components/schemas/Asset_renditions_inner'
          type: array
        revisioncount:
          type: integer
        thumbnailFields:
          $ref: '#/components/schemas/Asset_thumbnailFields'
        uniqueid:
          description: Unique ID of the asset. This ID is globally unique and created
            by IndexManager upon indexing
          type: string
        workflowcount:
          type: integer
      type: object
    AssetList:
      description: Paged list of assets
      properties:
        data:
          items:
            $ref: '#/components/schemas/Asset'
          type: array
        paging:
          $ref: '#/components/schemas/PagingInfo'
      required:
      - data
      - paging
      type: object
    AssetRepresentionApiModel:
      description: API model to describe a for archive represention of an asset
      properties:
        archiveHref:
          description: URL of the archive
          type: string
        archiveId:
          description: Unique ID of the archive
          type: integer
        archiveName:
          description: The name of the archive
          type: string
        assetHref:
          description: URL of the asset representation in the archive
          type: string
      type: object
    AssetUpdate:
      description: |
        The AssetUpdate request contains a body describing which metadata fields that needs to update and what their values should be updated to.
      externalDocs:
        description: Metadata in asset update
        url: https://learn.fotoware.com/Integrations_and_APIs/001_The_FotoWare_API/FotoWare_API_Overview/Updating_metadata_on_an_asset
      type: object
    Previews:
      items:
        $ref: '#/components/schemas/Previews_inner'
      type: array
    ActionRequest:
      properties:
        assets:
          items:
            $ref: '#/components/schemas/ActionRequest_assets_inner'
          type: array
        action-href:
          type: string
      type: object
    ActionResponse:
      properties:
        status:
          type: string
        max-interval:
          type: integer
        maxInterval:
          type: integer
        location:
          type: string
      type: object
    CopyRequest:
      description: Get a list of available destinations by using the copy-to reference
        from APIDescriptor
      properties:
        assets:
          items:
            $ref: '#/components/schemas/ActionRequest_assets_inner'
          type: array
        job-destination:
          type: string
      type: object
    CopyResponse:
      properties:
        location:
          type: string
        status:
          type: string
        max-interval:
          type: integer
        maxInterval:
          type: integer
      type: object
    DeleteRequest:
      properties:
        assets:
          items:
            $ref: '#/components/schemas/ActionRequest_assets_inner'
          type: array
      type: object
    DeleteResponse:
      properties:
        location:
          type: string
        status:
          type: string
        max-interval:
          type: integer
        maxInterval:
          type: integer
      type: object
    DuplicateRequest:
      properties:
        assets:
          items:
            $ref: '#/components/schemas/ActionRequest_assets_inner'
          type: array
      type: object
    DuplicateResponse:
      properties:
        location:
          type: string
        status:
          type: string
        max-interval:
          type: integer
        maxInterval:
          type: integer
      type: object
    MarkerRequest:
      properties:
        assets:
          items:
            $ref: '#/components/schemas/ActionRequest_assets_inner'
          type: array
        marker-href:
          type: string
      type: object
    MarkerResponse:
      properties:
        status:
          type: string
        max-interval:
          type: integer
        maxInterval:
          type: integer
        location:
          type: string
      type: object
    MetadataEditRequest:
      properties:
        assets:
          items:
            $ref: '#/components/schemas/ActionRequest_assets_inner'
          type: array
        job-metadata:
          items:
            $ref: '#/components/schemas/MetadataEditRequest_job_metadata_inner'
          type: array
      type: object
    MetadataEditResponse:
      properties:
        max-interval:
          type: integer
        maxInterval:
          type: integer
        location:
          type: string
        status:
          type: string
      type: object
    MoveRequest:
      description: Receive a list of available destinations using the move-to endpoint
        from the API descriptor
      properties:
        assets:
          items:
            $ref: '#/components/schemas/ActionRequest_assets_inner'
          type: array
        job-destination:
          type: string
      type: object
    MoveResponse:
      properties:
        status:
          type: string
        max-interval:
          type: integer
        maxInterval:
          type: integer
        location:
          type: string
      type: object
    RenameRequest:
      properties:
        assets:
          items:
            $ref: '#/components/schemas/ActionRequest_assets_inner'
          type: array
        job-filename:
          type: string
      type: object
    RenameResponse:
      properties:
        status:
          type: string
        max-interval:
          type: integer
        maxInterval:
          type: integer
        location:
          type: string
      type: object
    RotateRequest:
      properties:
        direction:
          type: string
        assets:
          items:
            $ref: '#/components/schemas/ActionRequest_assets_inner'
          type: array
      type: object
    RotateResponse:
      properties:
        status:
          type: string
        max-interval:
          type: integer
        maxInterval:
          type: integer
        location:
          type: string
      type: object
    TaskStatus:
      description: Status for a pending or done job
      properties:
        job:
          $ref: '#/components/schemas/TaskStatus_job'
        task:
          $ref: '#/components/schemas/TaskStatus_task'
      type: object
    Collection:
      example:
        data: data
        hasChildren: true
        canBeArchived: true
        orderRootHref: orderRootHref
        type: type
        dataTemplate: dataTemplate
        assets: "{}"
        pin: ""
        children: "{}"
        propertyValidations:
        - regex: regex
          min: 2
          max: 7
          name: name
        - regex: regex
          min: 2
          max: 7
          name: name
        permissions:
        - null
        - null
        searchQuery: searchQuery
        create:
        - href: href
          type: type
        - href: href
          type: type
        modified: modified
        canHaveChildren: true
        assetCount: 0
        href: href
        canCopyTo: true
        canCreateFolders: true
        isSelectable: true
        smartFolderHeader: smartFolderHeader
        edit: true
        created: created
        isSmartFolderNavigationEnabled: true
        isFolderNavigationEnabled: true
        props:
          shares:
            enabled: true
          comments:
            enabled: true
          annotations:
            enabled: true
        alt_orders:
        - asc:
            data: data
            urlComponents:
            - value: value
              key: key
            - value: value
              key: key
            href: href
          name: name
          key: key
          desc:
            default: true
            data: data
            urlComponents:
            - value: value
              key: key
            - value: value
              key: key
            href: href
        - asc:
            data: data
            urlComponents:
            - value: value
              key: key
            - value: value
              key: key
            href: href
          name: name
          key: key
          desc:
            default: true
            data: data
            urlComponents:
            - value: value
              key: key
            - value: value
              key: key
            href: href
        uploadHref: uploadHref
        taxonomies:
        - pluralName: Bugs
          field: 25
          hasChildren: true
          name: Bug
          description: description
          href: href
          taxonomyHref: taxonomyHref
          items:
            data:
            - field: 25
              hasChildren: true
              name: Bug
              customSearch: customSearch
              description: description
              href: href
              acl:
              - Set
              - Query
              - Navigate
              taxonomyHref: taxonomyHref
              value: value
            - field: 25
              hasChildren: true
              name: Bug
              customSearch: customSearch
              description: description
              href: href
              acl:
              - Set
              - Query
              - Navigate
              taxonomyHref: taxonomyHref
              value: value
            paging:
              next: next
              last: last
              prev: prev
              first: first
        - pluralName: Bugs
          field: 25
          hasChildren: true
          name: Bug
          description: description
          href: href
          taxonomyHref: taxonomyHref
          items:
            data:
            - field: 25
              hasChildren: true
              name: Bug
              customSearch: customSearch
              description: description
              href: href
              acl:
              - Set
              - Query
              - Navigate
              taxonomyHref: taxonomyHref
              value: value
            - field: 25
              hasChildren: true
              name: Bug
              customSearch: customSearch
              description: description
              href: href
              acl:
              - Set
              - Query
              - Navigate
              taxonomyHref: taxonomyHref
              value: value
            paging:
              next: next
              last: last
              prev: prev
              first: first
        name: name
        matchingHref: matchingHref
        description: description
        reorder: ""
        archived: archived
        searchURL: searchURL
        isSearchable: true
        posterImages:
        - square: true
          size: 1
          width: 5
          href: href
          height: 5
        - square: true
          size: 1
          width: 5
          href: href
          height: 5
        canBeDeleted: true
        canIngestToChildren: true
        metadataEditor:
          name: name
          href: href
        alertHref: ""
        childCount: 6
        originalURL: originalURL
        isLinkCollection: true
        clearSearch:
          data: data
          href: href
        canMoveTo: true
        searchString: searchString
        canUploadTo: true
        deleted: deleted
        canSelect: true
        posterAsset: posterAsset
      properties:
        alt_orders:
          items:
            $ref: '#/components/schemas/Collection_alt_orders_inner'
          type: array
        alertHref:
          description: alertHref
        archived:
          description: |
            If not null, then the collection has been archived, and this is the date and time on which the collection was archived.
            Unless stated otherwise, a collection list never contains archived collections, so API clients can ignore this field.
          type: string
        assets:
          description: List of assets in the collection
          type: object
        assetCount:
          description: Number of assets in the collection
          type: integer
        canBeArchived:
          description: "true if it is possible to archive the collection, false otherwise."
          type: boolean
        canBeDeleted:
          description: "true if it is possible to delete the collection, false otherwise."
          type: boolean
        canCopyTo:
          description: "true if it is possible to copy assets to this collection,\
            \ false otherwise."
          type: boolean
        canCreateFolders:
          description: "true if it is possible to create new folders when copying,\
            \ moving or uploading assets to this collection, false otherwise."
          type: boolean
        canHaveChildren:
          description: "true if this collection may have sub collection, false otherwise"
          type: boolean
        canIngestToChildren:
          description: "true if there may be sub collections where at least one of\
            \ canCopyTo, canMoveTo or canUploadTo is true, false otherwise."
          type: boolean
        canMoveTo:
          description: "true if it is possible to move assets to this collection,\
            \ false otherwise."
          type: boolean
        canSelect:
          description: "true if it is possible to select assets in user interfaces\
            \ for this collection, false otherwise"
          type: boolean
        canUploadTo:
          description: "true if it is possible to upload assets to this collection,\
            \ false otherwise."
          type: boolean
        children:
          description: List of sub collections in the collection
          type: object
        childCount:
          description: Number of sub collections in the collection
          type: integer
        clearSearch:
          $ref: '#/components/schemas/Collection_clearSearch'
        create:
          description: create
          items:
            $ref: '#/components/schemas/Collection_create_inner'
          type: array
        created:
          description: Date and time on which the collection was created
          type: string
        data:
          description: |
            User-specific data URL of the collection. Usually, this is the URL that the collection was requested from.
            In collection lists, this is the URL that should be followed in order to get assets and sub collections of the collection.
          type: string
        dataTemplate:
          description: dataTemplate
          type: string
        deleted:
          description: |
            If not null, then the collection has been deleted, and this is the date and time on which the collection was deleted.
            Unless stated otherwise, a collection list never contains deleted collections, so API clients can ignore this field.
          type: string
        description:
          description: Long description of the collection
          type: string
        edit:
          description: edit
          type: boolean
        hasChildren:
          description: "true if the collection can have sub collections, false otherwise"
          type: boolean
        href:
          description: Links to a Collection. Canonical public URL of the collection.
          type: string
        isFolderNavigationEnabled:
          description: "true if folder navigation is enabled in user interfaces for\
            \ this collection, false otherwise"
          type: boolean
        isLinkCollection:
          description: "true if this collection is a link collection (e.g., an album),\
            \ false otherwise."
          type: boolean
        isSearchable:
          description: "true if the collection supports search, false otherwise"
          type: boolean
        isSelectable:
          description: "true if assets in the collection can be selected in the selection\
            \ widget, false otherwise"
          type: boolean
        isSmartFolderNavigationEnabled:
          description: isSmartFolderNavigationEnabled
          type: boolean
        matchingHref:
          description: matchingHref
          type: string
        metadataEditor:
          $ref: '#/components/schemas/Collection_metadataEditor'
        modified:
          description: "Date and time on which the collection last modified. If the\
            \ collection was never modified, then this is equal to created."
          type: string
        name:
          description: Displayable title of the collection
          type: string
        orderRootHref:
          description: orderRootHref
          type: string
        originalURL:
          description: |
            If the collection is a search result, then this is the URL of the collection the search was performed in (without any search parameters).
          type: string
        permissions:
          description: List of permissions that the requesting user has on this asset
          items:
            $ref: '#/components/schemas/Permission'
          type: array
        pin:
          description: pin
        posterAsset:
          description: URL of the asset which is currently used as poster image for
            this collection. May be null.
          type: string
        posterImages:
          description: posterImages
          items:
            $ref: '#/components/schemas/Asset_previews_inner'
          type: array
        propertyValidations:
          items:
            $ref: '#/components/schemas/Collection_propertyValidations_inner'
          type: array
        props:
          $ref: '#/components/schemas/Collection_props'
        reorder:
          description: reorder
        searchQuery:
          description: searchQuery
          type: string
        searchString:
          description: searchString
          type: string
        searchURL:
          description: |
            URL template for collection queries (searches) in the collection.
            By replacing the placeholders in the template with search parameters, a client can search in the collection. If this attribute is null, then the collection does not support searching.
          type: string
        smartFolderHeader:
          description: smartFolderHeader
          type: string
        type:
          description: Type of the collection
          type: string
        taxonomies:
          description: |
            Contains top-level taxonomy nodes for all metadata fields which are enabled in the API for this collection and which have taxonomy enabled.
          items:
            $ref: '#/components/schemas/Taxonomy'
          type: array
        uploadHref:
          description: URL to use in upload requests
          type: string
      type: object
    CollectionInfo:
      example:
        data: data
        hasChildren: true
        canBeArchived: true
        description: description
        reorder: ""
        orderRootHref: orderRootHref
        type: type
        archived: archived
        dataTemplate: dataTemplate
        pin: ""
        propertyValidations:
        - regex: regex
          min: 2
          max: 7
          name: name
        - regex: regex
          min: 2
          max: 7
          name: name
        permissions:
        - null
        - null
        searchQuery: searchQuery
        create:
        - href: href
          type: type
        - href: href
          type: type
        modified: modified
        canHaveChildren: true
        searchURL: searchURL
        href: href
        isSearchable: true
        posterImages:
        - square: true
          size: 1
          width: 5
          href: href
          height: 5
        - square: true
          size: 1
          width: 5
          href: href
          height: 5
        ancestors:
        - data: data
          name: name
          href: href
        - data: data
          name: name
          href: href
        canCopyTo: true
        canCreateFolders: true
        isSelectable: true
        smartFolderHeader: smartFolderHeader
        canBeDeleted: true
        canIngestToChildren: true
        edit: true
        created: created
        metadataEditor:
          name: name
          href: href
        alertHref: ""
        isSmartFolderNavigationEnabled: true
        originalURL: originalURL
        isFolderNavigationEnabled: true
        isLinkCollection: true
        props:
          shares:
            enabled: true
          comments:
            enabled: true
          annotations:
            enabled: true
        alt_orders:
        - asc:
            data: data
            urlComponents:
            - value: value
              key: key
            - value: value
              key: key
            href: href
          name: name
          key: key
          desc:
            default: true
            data: data
            urlComponents:
            - value: value
              key: key
            - value: value
              key: key
            href: href
        - asc:
            data: data
            urlComponents:
            - value: value
              key: key
            - value: value
              key: key
            href: href
          name: name
          key: key
          desc:
            default: true
            data: data
            urlComponents:
            - value: value
              key: key
            - value: value
              key: key
            href: href
        clearSearch:
          data: data
          href: href
        uploadHref: uploadHref
        canMoveTo: true
        searchString: searchString
        canUploadTo: true
        deleted: deleted
        taxonomies:
        - pluralName: Bugs
          field: 25
          hasChildren: true
          name: Bug
          description: description
          href: href
          taxonomyHref: taxonomyHref
          items:
            data:
            - field: 25
              hasChildren: true
              name: Bug
              customSearch: customSearch
              description: description
              href: href
              acl:
              - Set
              - Query
              - Navigate
              taxonomyHref: taxonomyHref
              value: value
            - field: 25
              hasChildren: true
              name: Bug
              customSearch: customSearch
              description: description
              href: href
              acl:
              - Set
              - Query
              - Navigate
              taxonomyHref: taxonomyHref
              value: value
            paging:
              next: next
              last: last
              prev: prev
              first: first
        - pluralName: Bugs
          field: 25
          hasChildren: true
          name: Bug
          description: description
          href: href
          taxonomyHref: taxonomyHref
          items:
            data:
            - field: 25
              hasChildren: true
              name: Bug
              customSearch: customSearch
              description: description
              href: href
              acl:
              - Set
              - Query
              - Navigate
              taxonomyHref: taxonomyHref
              value: value
            - field: 25
              hasChildren: true
              name: Bug
              customSearch: customSearch
              description: description
              href: href
              acl:
              - Set
              - Query
              - Navigate
              taxonomyHref: taxonomyHref
              value: value
            paging:
              next: next
              last: last
              prev: prev
              first: first
        canSelect: true
        posterAsset: posterAsset
        name: name
        matchingHref: matchingHref
      properties:
        ancestors:
          description: |
            Lists the collection to which the asset belongs, is parent collection and the remaining ancestors in the collection hierarchy.
            Can be used for rendering a breadcrumb, implementing an "up" button or finding the collection to which this instance of the asset belongs.
          items:
            $ref: '#/components/schemas/Asset_ancestors_inner'
          type: array
        alertHref:
          description: alertHref
        alt_orders:
          items:
            $ref: '#/components/schemas/Collection_alt_orders_inner'
          type: array
        archived:
          description: |
            If not null, then the collection has been archived, and this is the date and time on which the collection was archived.
            Unless stated otherwise, a collection list never contains archived collections, so API clients can ignore this field.
          type: string
        canBeArchived:
          description: "true if it is possible to archive the collection, false otherwise."
          type: boolean
        canBeDeleted:
          description: "true if it is possible to delete the collection, false otherwise."
          type: boolean
        canCopyTo:
          description: "true if it is possible to copy assets to this collection,\
            \ false otherwise."
          type: boolean
        canCreateFolders:
          description: |
            true if it is possible to create new folders when copying, moving or uploading assets to this collection, false otherwise.
          type: boolean
        canHaveChildren:
          description: "true if this collection may have sub collection, false otherwise"
          type: boolean
        canIngestToChildren:
          description: "true if there may be sub collections where at least one of\
            \ canCopyTo, canMoveTo or canUploadTo is true, false otherwise."
          type: boolean
        canMoveTo:
          description: "true if it is possible to move assets to this collection,\
            \ false otherwise."
          type: boolean
        canSelect:
          description: "true if it is possible to select assets in user interfaces\
            \ for this collection, false otherwise"
          type: boolean
        canUploadTo:
          description: "true if it is possible to upload assets to this collection,\
            \ false otherwise."
          type: boolean
        clearSearch:
          $ref: '#/components/schemas/CollectionInfo_clearSearch'
        create:
          description: create
          items:
            $ref: '#/components/schemas/Collection_create_inner'
          type: array
        created:
          description: Date and time on which the collection was created
          type: string
        data:
          description: |
            User-specific data URL of the collection. Usually, this is the URL that the collection was requested from.
            In collection lists, this is the URL that should be followed in order to get assets and sub collections of the collection.
          type: string
        dataTemplate:
          type: string
        deleted:
          description: |
            If not null, then the collection has been deleted, and this is the date and time on which the collection was deleted.
            Unless stated otherwise, a collection list never contains deleted collections, so API clients can ignore this field.
          type: string
        description:
          description: Long description of the collection
          type: string
        edit:
          description: edit
          type: boolean
        hasChildren:
          description: "true if the collection can have sub collections, false otherwise"
          type: boolean
        href:
          description: Canonical public URL of the collection.
          type: string
        isFolderNavigationEnabled:
          description: "true if folder navigation is enabled in user interfaces for\
            \ this collection, false otherwise"
          type: boolean
        isLinkCollection:
          description: "true if this collection is a link collection (e.g., an album),\
            \ false otherwise."
          type: boolean
        isSearchable:
          description: "true if the collection supports search, false otherwise"
          type: boolean
        isSelectable:
          description: "true if assets in the collection can be selected in the selection\
            \ widget, false otherwise"
          type: boolean
        isSmartFolderNavigationEnabled:
          type: boolean
        matchingHref:
          type: string
        metadataEditor:
          $ref: '#/components/schemas/CollectionInfo_metadataEditor'
        modified:
          description: "Date and time on which the collection last modified. If the\
            \ collection was never modified, then this is equal to created."
          type: string
        name:
          description: Displayable title of the collection
          type: string
        orderRootHref:
          type: string
        originalURL:
          description: |
            If the collection is a search result, then this is the URL of the collection the search was performed in (without any search parameters).
          type: string
        permissions:
          description: List of permissions that the requesting user has on this asset
          items:
            $ref: '#/components/schemas/Permission'
          type: array
        pin:
          description: pin
        posterAsset:
          description: URL of the asset which is currently used as poster image for
            this collection. May be null.
          type: string
        posterImages:
          description: posterImages
          items:
            $ref: '#/components/schemas/Asset_previews_inner'
          type: array
        propertyValidations:
          items:
            $ref: '#/components/schemas/Collection_propertyValidations_inner'
          type: array
        props:
          $ref: '#/components/schemas/Collection_props'
        reorder:
          description: reorder
        searchQuery:
          type: string
        searchString:
          type: string
        searchURL:
          description: |
            URL template for collection queries (searches) in the collection.
            By replacing the placeholders in the template with search parameters, a client can search in the collection. If this attribute is null, then the collection does not support searching.
          type: string
        smartFolderHeader:
          type: string
        taxonomies:
          description: |
            Contains top-level taxonomy nodes for all metadata fields which are enabled in the API for this collection and which have taxonomy enabled.
          items:
            $ref: '#/components/schemas/Taxonomy'
          type: array
        type:
          description: Type of the collection
          type: string
        uploadHref:
          description: URL to use in upload requests
          type: string
      type: object
    CollectionList:
      example:
        data:
        - data: data
          hasChildren: true
          canBeArchived: true
          orderRootHref: orderRootHref
          type: type
          dataTemplate: dataTemplate
          assets: "{}"
          pin: ""
          children: "{}"
          propertyValidations:
          - regex: regex
            min: 2
            max: 7
            name: name
          - regex: regex
            min: 2
            max: 7
            name: name
          permissions:
          - null
          - null
          searchQuery: searchQuery
          create:
          - href: href
            type: type
          - href: href
            type: type
          modified: modified
          canHaveChildren: true
          assetCount: 0
          href: href
          canCopyTo: true
          canCreateFolders: true
          isSelectable: true
          smartFolderHeader: smartFolderHeader
          edit: true
          created: created
          isSmartFolderNavigationEnabled: true
          isFolderNavigationEnabled: true
          props:
            shares:
              enabled: true
            comments:
              enabled: true
            annotations:
              enabled: true
          alt_orders:
          - asc:
              data: data
              urlComponents:
              - value: value
                key: key
              - value: value
                key: key
              href: href
            name: name
            key: key
            desc:
              default: true
              data: data
              urlComponents:
              - value: value
                key: key
              - value: value
                key: key
              href: href
          - asc:
              data: data
              urlComponents:
              - value: value
                key: key
              - value: value
                key: key
              href: href
            name: name
            key: key
            desc:
              default: true
              data: data
              urlComponents:
              - value: value
                key: key
              - value: value
                key: key
              href: href
          uploadHref: uploadHref
          taxonomies:
          - pluralName: Bugs
            field: 25
            hasChildren: true
            name: Bug
            description: description
            href: href
            taxonomyHref: taxonomyHref
            items:
              data:
              - field: 25
                hasChildren: true
                name: Bug
                customSearch: customSearch
                description: description
                href: href
                acl:
                - Set
                - Query
                - Navigate
                taxonomyHref: taxonomyHref
                value: value
              - field: 25
                hasChildren: true
                name: Bug
                customSearch: customSearch
                description: description
                href: href
                acl:
                - Set
                - Query
                - Navigate
                taxonomyHref: taxonomyHref
                value: value
              paging:
                next: next
                last: last
                prev: prev
                first: first
          - pluralName: Bugs
            field: 25
            hasChildren: true
            name: Bug
            description: description
            href: href
            taxonomyHref: taxonomyHref
            items:
              data:
              - field: 25
                hasChildren: true
                name: Bug
                customSearch: customSearch
                description: description
                href: href
                acl:
                - Set
                - Query
                - Navigate
                taxonomyHref: taxonomyHref
                value: value
              - field: 25
                hasChildren: true
                name: Bug
                customSearch: customSearch
                description: description
                href: href
                acl:
                - Set
                - Query
                - Navigate
                taxonomyHref: taxonomyHref
                value: value
              paging:
                next: next
                last: last
                prev: prev
                first: first
          name: name
          matchingHref: matchingHref
          description: description
          reorder: ""
          archived: archived
          searchURL: searchURL
          isSearchable: true
          posterImages:
          - square: true
            size: 1
            width: 5
            href: href
            height: 5
          - square: true
            size: 1
            width: 5
            href: href
            height: 5
          canBeDeleted: true
          canIngestToChildren: true
          metadataEditor:
            name: name
            href: href
          alertHref: ""
          childCount: 6
          originalURL: originalURL
          isLinkCollection: true
          clearSearch:
            data: data
            href: href
          canMoveTo: true
          searchString: searchString
          canUploadTo: true
          deleted: deleted
          canSelect: true
          posterAsset: posterAsset
        - data: data
          hasChildren: true
          canBeArchived: true
          orderRootHref: orderRootHref
          type: type
          dataTemplate: dataTemplate
          assets: "{}"
          pin: ""
          children: "{}"
          propertyValidations:
          - regex: regex
            min: 2
            max: 7
            name: name
          - regex: regex
            min: 2
            max: 7
            name: name
          permissions:
          - null
          - null
          searchQuery: searchQuery
          create:
          - href: href
            type: type
          - href: href
            type: type
          modified: modified
          canHaveChildren: true
          assetCount: 0
          href: href
          canCopyTo: true
          canCreateFolders: true
          isSelectable: true
          smartFolderHeader: smartFolderHeader
          edit: true
          created: created
          isSmartFolderNavigationEnabled: true
          isFolderNavigationEnabled: true
          props:
            shares:
              enabled: true
            comments:
              enabled: true
            annotations:
              enabled: true
          alt_orders:
          - asc:
              data: data
              urlComponents:
              - value: value
                key: key
              - value: value
                key: key
              href: href
            name: name
            key: key
            desc:
              default: true
              data: data
              urlComponents:
              - value: value
                key: key
              - value: value
                key: key
              href: href
          - asc:
              data: data
              urlComponents:
              - value: value
                key: key
              - value: value
                key: key
              href: href
            name: name
            key: key
            desc:
              default: true
              data: data
              urlComponents:
              - value: value
                key: key
              - value: value
                key: key
              href: href
          uploadHref: uploadHref
          taxonomies:
          - pluralName: Bugs
            field: 25
            hasChildren: true
            name: Bug
            description: description
            href: href
            taxonomyHref: taxonomyHref
            items:
              data:
              - field: 25
                hasChildren: true
                name: Bug
                customSearch: customSearch
                description: description
                href: href
                acl:
                - Set
                - Query
                - Navigate
                taxonomyHref: taxonomyHref
                value: value
              - field: 25
                hasChildren: true
                name: Bug
                customSearch: customSearch
                description: description
                href: href
                acl:
                - Set
                - Query
                - Navigate
                taxonomyHref: taxonomyHref
                value: value
              paging:
                next: next
                last: last
                prev: prev
                first: first
          - pluralName: Bugs
            field: 25
            hasChildren: true
            name: Bug
            description: description
            href: href
            taxonomyHref: taxonomyHref
            items:
              data:
              - field: 25
                hasChildren: true
                name: Bug
                customSearch: customSearch
                description: description
                href: href
                acl:
                - Set
                - Query
                - Navigate
                taxonomyHref: taxonomyHref
                value: value
              - field: 25
                hasChildren: true
                name: Bug
                customSearch: customSearch
                description: description
                href: href
                acl:
                - Set
                - Query
                - Navigate
                taxonomyHref: taxonomyHref
                value: value
              paging:
                next: next
                last: last
                prev: prev
                first: first
          name: name
          matchingHref: matchingHref
          description: description
          reorder: ""
          archived: archived
          searchURL: searchURL
          isSearchable: true
          posterImages:
          - square: true
            size: 1
            width: 5
            href: href
            height: 5
          - square: true
            size: 1
            width: 5
            href: href
            height: 5
          canBeDeleted: true
          canIngestToChildren: true
          metadataEditor:
            name: name
            href: href
          alertHref: ""
          childCount: 6
          originalURL: originalURL
          isLinkCollection: true
          clearSearch:
            data: data
            href: href
          canMoveTo: true
          searchString: searchString
          canUploadTo: true
          deleted: deleted
          canSelect: true
          posterAsset: posterAsset
        searchURL: searchURL
        paging:
          next: next
          last: last
          prev: prev
          first: first
      properties:
        searchURL:
          description: |
            URL template for multi-collection searches in all collections in the collection list.
            By replacing the placeholders in the template with search parameters, a client can search in all collections in the collection list
          type: string
        data:
          description: List of elements in this part of the list. Each element is
            of the collection format.
          items:
            $ref: '#/components/schemas/Collection'
          type: array
        paging:
          $ref: '#/components/schemas/Paging'
      type: object
    MetadataValue:
      description: Represents a complete value of a metadata field
      properties:
        s:
          description: "String representation of the raw value of the metadata field.\
            \ It is always present, except for bag fields."
          nullable: true
          type: string
        "n":
          description: Numeric representation of the value. It is only present if
            the field is a number field.
          nullable: true
          type: integer
        dt:
          description: Date/time representation of the value. It is only present if
            the field is a date/time field.
          nullable: true
          type: string
      type: object
    MetadataView:
      example:
        detailRegions:
        - name: name
          fields:
          - field:
              multiline: true
              multi-instance: true
              max-size: 1
              data-type: data-type
              id: 1
              label: label
              taxonomyHref: taxonomyHref
              validation: "{}"
            taxonomy-only: true
            isWritable: true
            required: true
          - field:
              multiline: true
              multi-instance: true
              max-size: 1
              data-type: data-type
              id: 1
              label: label
              taxonomyHref: taxonomyHref
              validation: "{}"
            taxonomy-only: true
            isWritable: true
            required: true
        - name: name
          fields:
          - field:
              multiline: true
              multi-instance: true
              max-size: 1
              data-type: data-type
              id: 1
              label: label
              taxonomyHref: taxonomyHref
              validation: "{}"
            taxonomy-only: true
            isWritable: true
            required: true
          - field:
              multiline: true
              multi-instance: true
              max-size: 1
              data-type: data-type
              id: 1
              label: label
              taxonomyHref: taxonomyHref
              validation: "{}"
            taxonomy-only: true
            isWritable: true
            required: true
        name: name
        preserveModificationTime: true
        builtinFields:
          notes:
            field:
              multiline: true
              multi-instance: true
              max-size: 0
              data-type: data-type
              id: 6
              label: label
              validation: "{}"
            taxonomy-only: true
            isWritable: true
            required: true
          rating:
            field:
              multiline: true
              max-size: 7
              multi-instance: true
              data-type: data-type
              id: 9
              label: label
              validation: "{}"
            taxonomy-only: true
            isWritable: true
            required: true
          description:
            field:
              multiline: true
              multi-instance: true
              max-size: 2
              data-type: data-type
              id: 3
              label: label
              validation: "{}"
            taxonomy-only: true
            isWritable: true
            required: true
          title:
            field:
              multiline: true
              multi-instance: true
              max-size: 7
              id: 4
              label: label
              data-type: data-type
              validation: "{}"
            taxonomy-only: true
            isWritable: true
            required: true
          tags:
            field:
              multiline: true
              multi-instance: true
              max-size: 5
              id: 1
              label: label
              data-type: data-type
              taxonomyHref: taxonomyHref
              validation: "{}"
            taxonomy-only: true
            isWritable: true
            required: true
          status:
            field:
              multiline: true
              multi-instance: true
              max-size: 2
              data-type: data-type
              id: 5
              label: label
              validation: "{}"
            taxonomy-only: true
            isWritable: true
            required: true
        href: href
        id: id
        thumbnailFields:
          secondLine:
            valueStore: valueStore
            field:
              multiline: true
              multi-instance: true
              max-size: 2
              data-type: data-type
              id: 5
              label: label
              validation: "{}"
            taxonomy-only: true
            isWritable: true
            required: true
          label:
            valueStore: valueStore
            taxonomy-only: true
            isWritable: true
            required: true
          firstLine:
            valueStore: valueStore
            field:
              multiline: true
              multi-instance: true
              max-size: 6
              data-type: data-type
              id: 1
              label: label
              taxonomyHref: taxonomyHref
              validation: "{}"
            taxonomy-only: true
            isWritable: true
            required: true
      properties:
        builtinFields:
          $ref: '#/components/schemas/MetadataView_builtinFields'
        name:
          description: Human-readable display name
          type: string
        detailRegions:
          description: Contains descriptions of all metadata fields
          items:
            $ref: '#/components/schemas/MetadataView_detailRegions_inner'
          type: array
        thumbnailFields:
          $ref: '#/components/schemas/MetadataView_thumbnailFields'
        preserveModificationTime:
          type: boolean
        href:
          description: URL
          type: string
        id:
          description: Unique ID
          type: string
      type: object
    AssetLinkList:
      example:
        data:
        - href: href
        - href: href
      properties:
        data:
          description: An array of assets to add to the cart
          items:
            $ref: '#/components/schemas/AssetLinkList_data_inner'
          type: array
      type: object
    CartUpdate:
      description: |
        Used to edit the content of the cart, e.g. add or remove ordered items, change renditions for ordered assets, add custom order data or add a customer's comment to the order.
      example:
        userComment: userComment
        orderItems:
        - rendition: rendition
        - rendition: rendition
      properties:
        orderItems:
          description: Complete list of ordered items. This replaces the existing
            list.
          items:
            $ref: '#/components/schemas/CartUpdate_orderItems_inner'
          type: array
        userComment:
          description: Comment by the customer on the order.
          type: string
      type: object
    Order:
      example:
        owner:
          address:
            profession: profession
            lastName: lastName
            country: country
            zipCode: zipCode
            initial: initial
            city: city
            title: title
            firstName: firstName
            phone: phone
            organization: organization
            state: state
            businessType: businessType
            fax: fax
            email: email
            homepage: homepage
          username: username
        userComment: userComment
        created: created
        modified: modified
        href: href
        adminComment: adminComment
        state: state
        orderItems:
        - expired: true
          rendition:
            name: name
            href: href
          adminComment: adminComment
          asset: asset
        - expired: true
          rendition:
            name: name
            href: href
          adminComment: adminComment
          asset: asset
      properties:
        modified:
          type: string
        href:
          type: string
        userComment:
          type: string
        orderItems:
          items:
            $ref: '#/components/schemas/Order_orderItems_inner'
          type: array
        owner:
          $ref: '#/components/schemas/Order_owner'
        created:
          type: string
        adminComment:
          type: string
        state:
          type: string
      type: object
    OrderList:
      description: Orderlist
      example:
        data:
        - owner:
            address:
              profession: profession
              country: country
              zipCode: zipCode
              lastName: lastName
              city: city
              initial: initial
              title: title
              firstName: firstName
              phone: phone
              streetAddress:
              - Address line 1
              organization: organization
              state: state
              businessType: businessType
              fax: fax
              email: email
              homepage: homepage
            username: username
          expires: expires
          userComment: userComment
          created: created
          orderReference: orderReference
          modified: modified
          adminComment: adminComment
          href: href
          state: "[\"pending - The order is waiting for administrator approval.\"\
            ,\"approved - The order has been approved.\",\"rejected - The order has\
            \ been rejected.\",\"expired - The order has expired.\",\"created - The\
            \ order has been created but not submitted yet.\",\"cart - the order is\
            \ a customer's personal shopping cart.\"]"
          orderItems:
          - expires: expires
            expired: true
            rendition:
              download: download
              name: name
              href: href
            adminComment: adminComment
            asset: asset
          - expires: expires
            expired: true
            rendition:
              download: download
              name: name
              href: href
            adminComment: adminComment
            asset: asset
        - owner:
            address:
              profession: profession
              country: country
              zipCode: zipCode
              lastName: lastName
              city: city
              initial: initial
              title: title
              firstName: firstName
              phone: phone
              streetAddress:
              - Address line 1
              organization: organization
              state: state
              businessType: businessType
              fax: fax
              email: email
              homepage: homepage
            username: username
          expires: expires
          userComment: userComment
          created: created
          orderReference: orderReference
          modified: modified
          adminComment: adminComment
          href: href
          state: "[\"pending - The order is waiting for administrator approval.\"\
            ,\"approved - The order has been approved.\",\"rejected - The order has\
            \ been rejected.\",\"expired - The order has expired.\",\"created - The\
            \ order has been created but not submitted yet.\",\"cart - the order is\
            \ a customer's personal shopping cart.\"]"
          orderItems:
          - expires: expires
            expired: true
            rendition:
              download: download
              name: name
              href: href
            adminComment: adminComment
            asset: asset
          - expires: expires
            expired: true
            rendition:
              download: download
              name: name
              href: href
            adminComment: adminComment
            asset: asset
        paging:
          last: last
          first: first
      properties:
        paging:
          $ref: '#/components/schemas/OrderList_paging'
        data:
          items:
            $ref: '#/components/schemas/OrderList_data_inner'
          type: array
      type: object
    OrderSubmissionInfo:
      description: Info on submitted Order
      example:
        orderReference: orderReference
        orderLocation: orderLocation
        checkoutPageLocation: checkoutPageLocation
      properties:
        orderLocation:
          description: URL of the order. Links to an Order representation.
          type: string
        orderReference:
          description: |
            A human-readable string that uniquely identifies the order on the site.
            May be shown in notifications and used for communication with users. Same as the orderReference attribute in the Order representation.
          type: string
        checkoutPageLocation:
          description: |
            URL of the checkout page to show to the user.
            This page SHOULD be shown to the customer in a browser window in order to proceed with the ordering process. Depending on the site settings, this may be the standard FotoWeb checkout page or a custom page (which may include payment options). A native application may provide its own native checkout user interface and ignore this parameter. This is equal to the checkoutPageLocation attribute of the Order representation.
          type: string
      type: object
    OrderUpdate:
      description: Updating an order
      example:
        expires: expires
        orderData:
        - owner:
            address:
              profession: profession
              lastName: lastName
              country: country
              zipCode: zipCode
              initial: initial
              city: city
              title: title
              firstName: firstName
              phone: phone
              organization: organization
              state: state
              businessType: businessType
              fax: fax
              email: email
              homepage: homepage
            username: username
          userComment: userComment
          created: created
          modified: modified
          href: href
          adminComment: adminComment
          state: state
          orderItems:
          - expired: true
            rendition:
              name: name
              href: href
            adminComment: adminComment
            asset: asset
          - expired: true
            rendition:
              name: name
              href: href
            adminComment: adminComment
            asset: asset
        - owner:
            address:
              profession: profession
              lastName: lastName
              country: country
              zipCode: zipCode
              initial: initial
              city: city
              title: title
              firstName: firstName
              phone: phone
              organization: organization
              state: state
              businessType: businessType
              fax: fax
              email: email
              homepage: homepage
            username: username
          userComment: userComment
          created: created
          modified: modified
          href: href
          adminComment: adminComment
          state: state
          orderItems:
          - expired: true
            rendition:
              name: name
              href: href
            adminComment: adminComment
            asset: asset
          - expired: true
            rendition:
              name: name
              href: href
            adminComment: adminComment
            asset: asset
        adminComment: adminComment
        orderItems:
        - expires: expires
          rendition: rendition
          adminComment: adminComment
        - expires: expires
          rendition: rendition
          adminComment: adminComment
      properties:
        orderItems:
          description: "Complete list of ordered items. This replaces the existing\
            \ list. (Set to [] to empty the order.)"
          items:
            $ref: '#/components/schemas/OrderUpdate_orderItems_inner'
          type: array
        expires:
          description: |
            Time when this order expires, null if if never expires.
            After the expiration time, the customer cannot download any renditions from this order any more.
          type: string
        adminComment:
          description: Comment by the administrator on the order.
          type: string
        orderData:
          description: Custom order data for the order. Completely replaces existing
            custom order data.
          items:
            $ref: '#/components/schemas/Order'
          type: array
      type: object
    Taxonomy:
      description: A taxonomy (including properties and root items)
      example:
        pluralName: Bugs
        field: 25
        hasChildren: true
        name: Bug
        description: description
        href: href
        taxonomyHref: taxonomyHref
        items:
          data:
          - field: 25
            hasChildren: true
            name: Bug
            customSearch: customSearch
            description: description
            href: href
            acl:
            - Set
            - Query
            - Navigate
            taxonomyHref: taxonomyHref
            value: value
          - field: 25
            hasChildren: true
            name: Bug
            customSearch: customSearch
            description: description
            href: href
            acl:
            - Set
            - Query
            - Navigate
            taxonomyHref: taxonomyHref
            value: value
          paging:
            next: next
            last: last
            prev: prev
            first: first
      properties:
        name:
          description: Display name
          example: Bug
          type: string
        pluralName:
          description: Plural Name
          example: Bugs
          type: string
        description:
          description: Description
          type: string
        hasChildren:
          description: To know if the item has children
          example: true
          type: boolean
        field:
          description: Numeric ID of metadata field
          example: 25
          type: integer
        href:
          description: URL of this taxonomy item
          type: string
        taxonomyHref:
          description: URL of the root of this taxonomy
          type: string
        items:
          $ref: '#/components/schemas/TaxonomyItemList'
      required:
      - field
      - href
      - pluralName
      type: object
    TaxonomyAncestors:
      description: Taxonomy parent of a Taxonomy Item
      example:
        name: Bug
        href: href
      properties:
        name:
          description: Display name
          example: Bug
          type: string
        href:
          description: URL of this taxonomy item
          type: string
      required:
      - name
      type: object
    TaxonomyCreationInfo:
      description: Properties to create a taxonomy field
      example:
        pluralName: A Plural Taxonomy Name
        field: 25
        name: A Taxonomy Name
        description: description
      properties:
        field:
          description: Numeric ID of metadata field
          example: 25
          type: integer
        name:
          description: Taxonomy Name
          example: A Taxonomy Name
          type: string
        pluralName:
          description: Display name
          example: A Plural Taxonomy Name
          type: string
        description:
          description: Description
          type: string
      required:
      - field
      - pluralName
      type: object
    TaxonomyInfo:
      description: Properties of a taxonomy field
      example:
        pluralName: Bugs
        field: 25
        hasChildren: true
        name: Bug
        description: description
        href: href
        taxonomyHref: taxonomyHref
      properties:
        name:
          description: Display name
          example: Bug
          type: string
        pluralName:
          description: Plural Name
          example: Bugs
          type: string
        description:
          description: Description
          type: string
        hasChildren:
          description: To know if the item has children
          example: true
          type: boolean
        field:
          description: Numeric ID of metadata field
          example: 25
          type: integer
        href:
          description: URL of this taxonomy item
          type: string
        taxonomyHref:
          description: URL of the root of this taxonomy
          type: string
      required:
      - field
      - href
      - pluralName
      type: object
    TaxonomyItem:
      description: A taxonomy item (including child items and ancestors)
      example:
        field: 25
        children:
          data:
          - field: 25
            hasChildren: true
            name: Bug
            customSearch: customSearch
            description: description
            href: href
            acl:
            - Set
            - Query
            - Navigate
            taxonomyHref: taxonomyHref
            value: value
          - field: 25
            hasChildren: true
            name: Bug
            customSearch: customSearch
            description: description
            href: href
            acl:
            - Set
            - Query
            - Navigate
            taxonomyHref: taxonomyHref
            value: value
          paging:
            next: next
            last: last
            prev: prev
            first: first
        hasChildren: true
        name: Bug
        customSearch: customSearch
        description: description
        href: href
        acl:
        - Set
        - Query
        - Navigate
        taxonomyHref: taxonomyHref
        ancestors:
        - name: Bug
          href: href
        - name: Bug
          href: href
        value: value
      properties:
        name:
          description: Display name
          example: Bug
          type: string
        description:
          description: Description
          type: string
        hasChildren:
          description: To know if the item has children
          example: true
          type: boolean
        field:
          description: Numeric ID of metadata field
          example: 25
          type: integer
        href:
          description: URL of this taxonomy item
          type: string
        taxonomyHref:
          description: URL of the root of this taxonomy
          type: string
        acl:
          description: |
            Capabilities / access list:
              * `Set` - The value of this item can be assigned to a field
              * `Query` - This item can be used in search queries
              * `Navigate` - Users can browse children of this item
              * `Hint` - (currently unused)
          example:
          - Set
          - Query
          - Navigate
          items:
            type: string
          type: array
        value:
          description: Metadata value (for search)
          type: string
        customSearch:
          description: Custom search expression
          type: string
        children:
          $ref: '#/components/schemas/TaxonomyItemList'
        ancestors:
          items:
            $ref: '#/components/schemas/TaxonomyAncestors'
          type: array
      type: object
    TaxonomyItemCreationInfo:
      description: Properties to create a taxonomy item
      example:
        name: A taxonomy name
        customSearch: customSearch
        description: description
        acl:
        - Set
        - Query
        - Navigate
        value: value
      properties:
        name:
          description: Display name
          example: A taxonomy name
          type: string
        description:
          description: Description
          type: string
        acl:
          description: |
            Capabilities / access list:
              * `Set` - The value of this item can be assigned to a field
              * `Query` - This item can be used in search queries
              * `Navigate` - Users can browse children of this item
              * `Hint` - (currently unused)
          example:
          - Set
          - Query
          - Navigate
          items:
            type: string
          type: array
        value:
          description: Metadata value (for search)
          type: string
        customSearch:
          description: Custom search expression
          type: string
      required:
      - name
      type: object
    TaxonomyItemInfo:
      description: Properties of a taxonomy item
      example:
        field: 25
        hasChildren: true
        name: Bug
        customSearch: customSearch
        description: description
        href: href
        acl:
        - Set
        - Query
        - Navigate
        taxonomyHref: taxonomyHref
        value: value
      properties:
        name:
          description: Display name
          example: Bug
          type: string
        description:
          description: Description
          type: string
        hasChildren:
          description: To know if the item has children
          example: true
          type: boolean
        field:
          description: Numeric ID of metadata field
          example: 25
          type: integer
        href:
          description: URL of this taxonomy item
          type: string
        taxonomyHref:
          description: URL of the root of this taxonomy
          type: string
        acl:
          description: |
            Capabilities / access list:
              * `Set` - The value of this item can be assigned to a field
              * `Query` - This item can be used in search queries
              * `Navigate` - Users can browse children of this item
              * `Hint` - (currently unused)
          example:
          - Set
          - Query
          - Navigate
          items:
            type: string
          type: array
        value:
          description: Metadata value (for search)
          type: string
        customSearch:
          description: Custom search expression
          type: string
      required:
      - name
      type: object
    TaxonomyItemList:
      description: Paged list of taxonomy items
      example:
        data:
        - field: 25
          hasChildren: true
          name: Bug
          customSearch: customSearch
          description: description
          href: href
          acl:
          - Set
          - Query
          - Navigate
          taxonomyHref: taxonomyHref
          value: value
        - field: 25
          hasChildren: true
          name: Bug
          customSearch: customSearch
          description: description
          href: href
          acl:
          - Set
          - Query
          - Navigate
          taxonomyHref: taxonomyHref
          value: value
        paging:
          next: next
          last: last
          prev: prev
          first: first
      properties:
        paging:
          $ref: '#/components/schemas/PagingInfo'
        data:
          items:
            $ref: '#/components/schemas/TaxonomyItemInfo'
          type: array
      required:
      - data
      - paging
      type: object
    TaxonomyItemUpdate:
      description: Properties to update a taxonomy item
      example:
        name: Bug
        customSearch: customSearch
        description: description
        acl:
        - Set
        - Query
        - Navigate
        value: value
      properties:
        name:
          description: Display name
          example: Bug
          type: string
        description:
          description: Description
          type: string
        acl:
          description: |
            Capabilities / access list:
              * `Set` - The value of this item can be assigned to a field
              * `Query` - This item can be used in search queries
              * `Navigate` - Users can browse children of this item
              * `Hint` - (currently unused)
          example:
          - Set
          - Query
          - Navigate
          items:
            type: string
          type: array
        value:
          description: Metadata value (for search)
          type: string
        customSearch:
          description: Custom search expression
          type: string
      required:
      - acl
      - description
      - name
      - value
      type: object
    TaxonomyList:
      description: Paged list of taxonomy fields
      example:
        data:
        - pluralName: Bugs
          field: 25
          hasChildren: true
          name: Bug
          description: description
          href: href
          taxonomyHref: taxonomyHref
        - pluralName: Bugs
          field: 25
          hasChildren: true
          name: Bug
          description: description
          href: href
          taxonomyHref: taxonomyHref
        paging:
          next: next
          last: last
          prev: prev
          first: first
      properties:
        paging:
          $ref: '#/components/schemas/PagingInfo'
        data:
          items:
            $ref: '#/components/schemas/TaxonomyInfo'
          type: array
      required:
      - data
      - paging
      type: object
    TaxonomySearchItem:
      description: Paged list of taxonomy items with Ancestorrs
      properties:
        name:
          description: Display name
          example: Bug
          type: string
        description:
          description: Description
          type: string
        hasChildren:
          description: To know if the item has children
          example: true
          type: boolean
        field:
          description: Numeric ID of metadata field
          example: 25
          type: integer
        href:
          description: URL of this taxonomy item
          type: string
        taxonomyHref:
          description: URL of the root of this taxonomy
          type: string
        acl:
          description: |
            Capabilities / access list:
              * `Set` - The value of this item can be assigned to a field
              * `Query` - This item can be used in search queries
              * `Navigate` - Users can browse children of this item
              * `Hint` - (currently unused)
          example:
          - Set
          - Query
          - Navigate
          items:
            type: string
          type: array
        value:
          description: Metadata value (for search)
          type: string
        customSearch:
          description: Custom search expression
          type: string
        ancestors:
          description: Taxonomy parents of the taxonomy item
          items:
            $ref: '#/components/schemas/TaxonomyAncestors'
          type: array
      required:
      - name
      type: object
    TaxonomySearchItemList:
      description: Paged list of taxonomy items
      properties:
        paging:
          $ref: '#/components/schemas/PagingInfo'
        data:
          items:
            $ref: '#/components/schemas/TaxonomySearchItem'
          type: array
      required:
      - data
      - paging
      type: object
    TaxonomyUpdate:
      description: Properties to update a taxonomy field
      example:
        pluralName: A Plural Taxonomy Name
        name: A Taxonomy Name
        description: description
      properties:
        name:
          description: Taxonomy Name
          example: A Taxonomy Name
          type: string
        pluralName:
          description: Display name
          example: A Plural Taxonomy Name
          type: string
        description:
          description: Description
          type: string
      required:
      - pluralName
      type: object
    BatchUploadCreate:
      description: API model to create a new batch upload task used to upload a file
      example:
        metadata:
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          fields:
          - action: add
            id: 6
            value: "{}"
          - action: add
            id: 6
            value: "{}"
        folder: folder
        filename: filename
        hasXmp: true
        fileSize: 0
        destination: destination
        comment: comment
        checkoutId: checkoutId
      properties:
        destination:
          description: |
            * URL of the collection (e.g. archive or folder) to upload to OR
            * URL of the asset to upload a new revision
          type: string
        folder:
          description: "A folder path relative to the destination (when it is a collection\
            \ URL). \nThe folder may or may not exist, and it is created if it does\
            \ not exist.\n"
          type: string
        filename:
          description: |
            Filename of the file being uploaded. It must be given when uploading to a folder.
          type: string
        hasXmp:
          description: |
            * true: An XMP sidecar file with metadata is uploaded along with the master file
            * false: No XMP sidecar file is uploaded
          type: boolean
        fileSize:
          description: |
            The exact size of the file (in bytes)
          type: integer
        checkoutId:
          description: |
            This parameter must be set to null. It is used by internal FotoWare plug-ins to upload a new version of a checked-out file.
          type: string
        metadata:
          $ref: '#/components/schemas/BatchUploadMetadata'
        comment:
          description: "Comment to add to the revision. Set comment to null when not\
            \ required. When uploading a new revision of a file that already exists,\
            \ this becomes the comment of the new revision. \n"
          type: string
      required:
      - destination
      - fileSize
      type: object
    BatchUploadMetadata:
      description: API model to describe the metadata applied to an asset on upload.
      example:
        attributes:
        - value: value
          key: key
        - value: value
          key: key
        fields:
        - action: add
          id: 6
          value: "{}"
        - action: add
          id: 6
          value: "{}"
      properties:
        fields:
          items:
            $ref: '#/components/schemas/BatchUploadMetadataFields'
          type: array
        attributes:
          items:
            $ref: '#/components/schemas/BatchUploadMetadataAttributes'
          type: array
      type: object
    BatchUploadMetadataFields:
      description: API model to describe the metadata fields updated in the upload
      example:
        action: add
        id: 6
        value: "{}"
      properties:
        id:
          description: Numeric ID of the destination metadata field
          type: integer
        action:
          default: add
          description: Metadata action to perform
          enum:
          - add
          - append
          - prepend
          - erase
          type: string
        value:
          description: |
            Metadata value(s) to set or add.
            This parameter is optional or required, depending on the action.
            Depending on the action and field type, this can be a single value (given as a string) or zero or multiple values (given as an array of strings).
          type: object
      type: object
    BatchUploadMetadataAttributes:
      description: API model to describe the attributes used to set file attributes
        in the upload
      example:
        value: value
        key: key
      properties:
        key:
          description: Specifies which attribute to set.
          type: string
        value:
          description: Specifies the value of the attribute.
          type: string
      type: object
    BatchUploadInfo:
      description: API model for the response from creating a batch upload task.
      example:
        numChunks: 6
        chunkSize: 0
        hasXmp: true
        id: id
      properties:
        id:
          description: |
            Random 128-bit GUID encoded as BASE64URL.
          type: string
        chunkSize:
          description: |
            The upload chunk size in bytes.
          type: integer
        numChunks:
          description: |
            Total number of chunks to upload.
          type: integer
        hasXmp:
          description: |
            Specifies if an XMP sidecar file with metadata is to be uploaded along with the master file.
          type: boolean
      type: object
    BatchUploadStatus:
      description: API model to describe the batch upload status.
      example:
        result:
          assetDetails: assetDetails
          assetUrl: assetUrl
        error:
          message: message
          value: value
        status: status
      properties:
        status:
          description: "* awaitingData - Some chunks or the XMP file have not been\
            \ received yet\n* pending - The upload is finalized and has been queued\
            \ for processing\n* inProgress - The upload is finalized and is being\
            \ processed\n* done - The upload has completed successfully, and result\
            \ contains more information\n* failed - The upload has failed, and error\
            \ contains more information \n"
          type: string
        result:
          $ref: '#/components/schemas/BatchUploadStatusResult'
        error:
          $ref: '#/components/schemas/BatchUploadStatusError'
      type: object
    BatchUploadStatusError:
      description: Information about the failed upload
      example:
        message: message
        value: value
      properties:
        value:
          description: Symbolic name of the type of error that has occurred when uploading
            this asset
          type: string
        message:
          description: Human-readable description of error that has occurred
          type: string
      type: object
    BatchUploadStatusResult:
      description: Information about the successful upload
      example:
        assetDetails: assetDetails
        assetUrl: assetUrl
      properties:
        assetUrl:
          description: The API URL of the uploaded asset
          type: string
        assetDetails:
          description: The asset representation of the asset
          type: string
      type: object
    UploadResponse:
      properties:
        href:
          type: string
      type: object
    UploadStatus:
      example:
        task:
          created: created
          modified: modified
          type: type
        job:
          result:
          - result
          - result
          status: status
      properties:
        job:
          $ref: '#/components/schemas/UploadStatus_job'
        task:
          $ref: '#/components/schemas/UploadStatus_task'
      type: object
    PeopleList:
      example:
        data:
        - unique_name: unique_name
          href: href
          type: type
          display_name: display_name
        - unique_name: unique_name
          href: href
          type: type
          display_name: display_name
        paging:
          first: first
      properties:
        data:
          items:
            $ref: '#/components/schemas/PeopleList_data_inner'
          type: array
        paging:
          $ref: '#/components/schemas/PeopleList_paging'
      type: object
    Permission:
      description: "* View - User has permission to access the information about and\
        \ the contents of a collection. The API only exposes collections to which\
        \ the request user has access, so this permission is always present * Preview\
        \ - Quick renditions are available in asset data. * Download - Renditions\
        \ are available in asset data. * EditText - User has permission to update\
        \ metadata on assets. * CropRotate - User has permission to crop and rotate\
        \ assets directly in FotoWeb. * Delete - User has permission to delete assets.\
        \ * Comping - User has permission to request zoomed previews of assets. *\
        \ TrdParty1 - Custom permission. Can be used to define custom behavior for\
        \ assets in third-party applications using the API and the access list. *\
        \ TrdParty2 - Custom permission. Can be used to define custom behavior for\
        \ assets in third-party applications using the API and the access list. *\
        \ TrdParty3 - Custom permission. Can be used to define custom behavior for\
        \ assets in third-party applications using the API and the access list. *\
        \ TrdParty4 - Custom permission. Can be used to define custom behavior for\
        \ assets in third-party applications using the API and the access list. *\
        \ Alert - User has permission to create alerts in a collection. * CopyTo -\
        \ User has permission to copy assets to a collection.  * MoveTo - \tUser has\
        \ permission to move assets to a collection. * CopyFrom - User has permission\
        \ to copy assets to other collections. * MoveFrom - User has permissions to\
        \ move assets to other collections. * Rename - User has permission to rename\
        \ assets. * OpenFile - User has permission to open assets in FotoWeb Desktop.\
        \ * EditFile - User has permission to edit assets in FotoWeb Desktop. * CropFile\
        \ - User has permission to crop assets in FotoWeb Desktop. * UploadFile -\
        \ User has permission to upload new assets to a collection. * FwdtPlace -\
        \ User has permission to place assets in documents using FotoWeb Desktop extensions.\
        \ * Export - User has permission to export assets to external systems. * Comment\
        \ - User has permission to comment on assets, collections or other resources.\
        \ * Remove - User has permission to remove assets from a link collection.\
        \ * Reorder - User has permission to change the order of assets in a link\
        \ collection. * SetPosterAsset - User has permission to change the poster\
        \ asset of a collection. * Add - User has permission to add assets to a link\
        \ collection.\n"
      enum:
      - View
      - Preview
      - Download
      - EditText
      - CropRotate
      - Delete
      - Comping
      - TrdParty1
      - TrdParty2
      - TrdParty3
      - TrdParty4
      - Alert
      - CopyTo
      - MoveTo
      - CopyFrom
      - MoveFrom
      - Rename
      - OpenFile
      - EditFile
      - CropFile
      - UploadFile
      - FwdtPlace
      - Export
      - Comment
      - Remove
      - Reorder
      - SetPosterAsset
      - Add
      type: string
    QuickRenditions:
      description: This is a list of available quick renditions
      items:
        $ref: '#/components/schemas/QuickRenditions_inner'
      type: array
    RenditionRequest:
      description: Rendition request
      properties:
        href:
          description: Rendition url
          type: string
      type: object
    RenditionResponse:
      description: Rendition response
      properties:
        href:
          description: download url
          type: string
      type: object
    ConsentStatus:
      description: Consent status of an asset
      example:
        countByConsentFormState:
        - consentFormCount: 3
          consentFormState: null
        - consentFormCount: 3
          consentFormState: null
        assetConsentState: null
        approvedConsents:
        - title: Photos can be used in social media
          key: C1
        - title: Photos can be used in social media
          key: C1
        ConsentFlags:
        - null
        - null
        consentFormCount: 9
        declinedConsents:
        - title: Photos can be used in social media
          key: C1
        - title: Photos can be used in social media
          key: C1
      properties:
        assetConsentState:
          $ref: '#/components/schemas/ConsentFormAssetConsentState'
        approvedConsents:
          description: An intersection of valid and approved consent categories from
            the linked consent forms
          items:
            $ref: '#/components/schemas/AssetConsentCategoryApiModel'
          type: array
        declinedConsents:
          description: An sum of declined consent categories from the linked consent
            forms
          items:
            $ref: '#/components/schemas/AssetConsentCategoryApiModel'
          type: array
        ConsentFlags:
          description: A collection of consent flags for the asset
          items:
            $ref: '#/components/schemas/AssetConsentFlag'
          minItems: 1
          type: array
          uniqueItems: true
        consentFormCount:
          description: The number of consent forms linked to the asset
          type: integer
        countByConsentFormState:
          description: A collection of information about the count of consent form
            per state
          items:
            $ref: '#/components/schemas/ConsentFormStateCount'
          readOnly: true
          type: array
      type: object
    ConsentFormAssetConsentState:
      description: The overall consent status for the asset
      enum:
      - NoConsentInfo
      - NoConsentNeeded
      - Pending
      - NoConsent
      - PartialConsent
      - FullConsent
      - MoreConsentNeeded
      type: string
    AssetConsentCategoryApiModel:
      description: API model for representing a consent category on level of assets
      example:
        title: Photos can be used in social media
        key: C1
      properties:
        key:
          description: "Unique key on handy short string format (e.f. \"C1\", \"C2\"\
            , \"C3\") used to uniqly identify the consent category within the template"
          example: C1
          type: string
        title:
          description: Display title
          example: Photos can be used in social media
          type: string
      type: object
    AssetConsentFlag:
      description: The different consent flags that can be applies to an asset
      enum:
      - NoConsentNeeded
      - MoreConsentNeeded
      type: string
    ConsentFormStateCount:
      description: API model containing information about the usage of a single consent
        form state
      example:
        consentFormCount: 3
        consentFormState: null
      properties:
        consentFormState:
          $ref: '#/components/schemas/ConsentFormState'
        consentFormCount:
          description: Number of consent form
          format: int32
          type: integer
      type: object
    ConsentFormState:
      description: The state of the consent form
      enum:
      - Pending
      - Signed
      - PartiallySigned
      - Declined
      - Revoked
      type: string
    Group:
      description: Group properties
      example:
        created: 2000-01-23T04:56:07.000+00:00
        externalIds:
        - provider: provider
          id: id
        - provider: provider
          id: id
        description: description
        isRegisteredUsers: true
        isBuiltIn: true
        revision: 6
        license:
          mode: Named
          level: None
        isEveryone: true
        deleted: 2000-01-23T04:56:07.000+00:00
        permissions:
          changeSiteAppearance: true
          manageWebhooks: true
          configureConsentForms: true
          albums:
            restrictToFriends: true
            showOnHomepage: true
            shareWithGuests: true
            create: true
            shareWithGroups: true
            comment: true
            shareWithUsers: true
            delegateDownloads: true
          shareBookmarks: true
          approvePendingSignups: true
          uploadToUploadArea: true
          manageWorkflows: true
          manageServices: true
          manageActivityLogging: true
          manageSettings: true
          audit: true
          moderateComments: true
          manageExports: true
          api: true
          manageArchives: true
          approveOrders: true
          manageTaxonomies: true
          shareCropAndDownloadPresets: true
          manageAlbums: true
          inviteUsers: true
          manageUsers: true
          manageAnnotations: true
          isInDesignEditor: true
          manageActivityExports: true
        name: name
        modified: 2000-01-23T04:56:07.000+00:00
        id: 0
        properties:
        - value: value
          key: key
        - value: value
          key: key
      properties:
        isEveryone:
          description: Group is the built-in group of everyone (including guest)
          readOnly: true
          type: boolean
        isRegisteredUsers:
          description: Group is the built-in group of all registered users (not including
            guest)
          readOnly: true
          type: boolean
        isBuiltIn:
          description: Group is built-in
          readOnly: true
          type: boolean
        id:
          description: Group ID
          format: int32
          readOnly: true
          type: integer
        created:
          description: Timestamp when the group was created
          format: date-time
          readOnly: true
          type: string
        modified:
          description: Timestamp when the group was modified the last time
          format: date-time
          readOnly: true
          type: string
        revision:
          description: Revision
          format: int32
          readOnly: true
          type: integer
        name:
          description: Group name
          type: string
        description:
          description: Group description
          type: string
        license:
          $ref: '#/components/schemas/UserLicenseSettings'
        permissions:
          $ref: '#/components/schemas/GroupPermissions'
        properties:
          description: Custom properties
          items:
            $ref: '#/components/schemas/MemberProperty'
          type: array
        externalIds:
          description: External IDs for SSO
          items:
            $ref: '#/components/schemas/ExternalId'
          type: array
        deleted:
          description: Deletion time (if group is marked as deleted in database)
          format: date-time
          type: string
      required:
      - externalIds
      - license
      - name
      - permissions
      - properties
      type: object
    GroupPermissions:
      description: Available permissions for groups
      example:
        changeSiteAppearance: true
        manageWebhooks: true
        configureConsentForms: true
        albums:
          restrictToFriends: true
          showOnHomepage: true
          shareWithGuests: true
          create: true
          shareWithGroups: true
          comment: true
          shareWithUsers: true
          delegateDownloads: true
        shareBookmarks: true
        approvePendingSignups: true
        uploadToUploadArea: true
        manageWorkflows: true
        manageServices: true
        manageActivityLogging: true
        manageSettings: true
        audit: true
        moderateComments: true
        manageExports: true
        api: true
        manageArchives: true
        approveOrders: true
        manageTaxonomies: true
        shareCropAndDownloadPresets: true
        manageAlbums: true
        inviteUsers: true
        manageUsers: true
        manageAnnotations: true
        isInDesignEditor: true
        manageActivityExports: true
      properties:
        albums:
          $ref: '#/components/schemas/AlbumPermissions'
        uploadToUploadArea:
          description: Upload to upload area
          type: boolean
        manageTaxonomies:
          description: Manage taxonomies
          type: boolean
        changeSiteAppearance:
          description: Change site appearance
          type: boolean
        approvePendingSignups:
          description: Approve pending signups
          type: boolean
        manageWebhooks:
          description: Manage webhooks
          type: boolean
        shareBookmarks:
          description: Share bookmarks
          type: boolean
        moderateComments:
          description: Moderate comments
          type: boolean
        manageAlbums:
          description: Manage albums
          type: boolean
        manageExports:
          description: Manage exports
          type: boolean
        manageSettings:
          description: Manage settings
          type: boolean
        inviteUsers:
          description: Invite users
          type: boolean
        approveOrders:
          description: Approve orders
          type: boolean
        shareCropAndDownloadPresets:
          description: Share crop and download presets
          type: boolean
        isInDesignEditor:
          description: Is in design editor
          type: boolean
        manageUsers:
          description: Manage users
          type: boolean
        manageAnnotations:
          description: Manage annotations
          type: boolean
        manageArchives:
          description: Manage archives
          type: boolean
        manageWorkflows:
          description: Manage workflows
          type: boolean
        manageServices:
          description: Manage services
          type: boolean
        audit:
          description: Audit
          type: boolean
        configureConsentForms:
          description: Configure consent forms
          type: boolean
        api:
          description: API
          type: boolean
        manageActivityExports:
          description: Manage activity exports
          type: boolean
        manageActivityLogging:
          description: Manage activity logging
          type: boolean
      type: object
    MemberProperty:
      description: Custom properties
      example:
        value: value
        key: key
      properties:
        key:
          description: Custom property name
          type: string
        value:
          description: Custom property value
          type: string
      type: object
    MembershipIdListModel:
      description: List of group IDs
      example:
        groups:
        - 0
        - 0
      properties:
        groups:
          description: List of groups
          items:
            description: Group ID
            format: int32
            type: integer
          type: array
      type: object
    MemberIdListModel:
      description: List of member IDs
      example:
        groups:
        - 6
        - 6
        users:
        - 0
        - 0
      properties:
        users:
          description: List of members of user type
          items:
            description: User ID
            format: int32
            type: integer
          type: array
        groups:
          description: List of members of group type
          items:
            description: Group ID
            format: int32
            type: integer
          type: array
      type: object
    ExternalId:
      description: External ID of an SSO user
      example:
        provider: provider
        id: id
      properties:
        provider:
          description: Provider ID
          type: string
        id:
          description: External user or group ID
          type: string
      type: object
    AlbumPermissions:
      description: Available permissions for albums
      example:
        restrictToFriends: true
        showOnHomepage: true
        shareWithGuests: true
        create: true
        shareWithGroups: true
        comment: true
        shareWithUsers: true
        delegateDownloads: true
      properties:
        create:
          description: Create
          type: boolean
        shareWithGroups:
          description: Share with groups
          type: boolean
        shareWithUsers:
          description: Share with users
          type: boolean
        restrictToFriends:
          description: Restrict to friends
          type: boolean
        shareWithGuests:
          description: Share with guests
          type: boolean
        delegateDownloads:
          description: Delegate downloads
          type: boolean
        showOnHomepage:
          description: Show on home page
          type: boolean
        comment:
          description: Comment
          type: boolean
      type: object
    User:
      description: User properties
      example:
        address:
          profession: profession
          zipCode: zipCode
          country: country
          city: city
          givenName: givenName
          title: title
          streetAddress:
          - streetAddress
          - streetAddress
          phone: phone
          surname: surname
          organization: organization
          middleName: middleName
          state: state
          businessType: businessType
          fax: fax
          email: email
          homepage: homepage
        isGuest: true
        created: 2000-01-23T04:56:07.000+00:00
        isBuiltInAdministrator: true
        description: description
        fullName: fullName
        commerce:
          accountId: accountId
          paymentMethod: NoCharge
          discount: 1.4658129805029452
          category: category
        isBuiltIn: true
        revision: 6
        license:
          mode: Named
          level: None
        deleted: 2000-01-23T04:56:07.000+00:00
        permissions:
          isSiteOwner: true
        modified: 2000-01-23T04:56:07.000+00:00
        id: 0
        account:
          password: password
          expires: 2000-01-23T04:56:07.000+00:00
          allowPasswordChange: true
          forcePasswordChange: true
          isEnabled: true
          externalIds:
          - provider: provider
            id: id
          - provider: provider
            id: id
          hasPassword: true
          lastLoginDate: 2000-01-23T04:56:07.000+00:00
          deletePassword: true
          isSsoUser: true
        properties:
        - value: value
          key: key
        - value: value
          key: key
        username: username
      properties:
        id:
          description: User ID
          format: int32
          readOnly: true
          type: integer
        created:
          description: Timestamp when the user was created
          format: date-time
          readOnly: true
          type: string
        modified:
          description: Timestamp when the user was modified the last time
          format: date-time
          readOnly: true
          type: string
        revision:
          description: Revision
          format: int32
          readOnly: true
          type: integer
        username:
          description: Username
          type: string
        description:
          description: Description
          type: string
        address:
          $ref: '#/components/schemas/Address'
        license:
          $ref: '#/components/schemas/UserLicenseSettings'
        commerce:
          $ref: '#/components/schemas/CommerceInfo'
        account:
          $ref: '#/components/schemas/Account'
        permissions:
          $ref: '#/components/schemas/UserPermissions'
        properties:
          description: Custom properties
          items:
            $ref: '#/components/schemas/MemberProperty'
          type: array
        fullName:
          description: Full real name
          readOnly: true
          type: string
        isGuest:
          description: User is guest
          readOnly: true
          type: boolean
        isBuiltInAdministrator:
          description: User is built-in Administrator
          readOnly: true
          type: boolean
        isBuiltIn:
          description: User is built-in
          readOnly: true
          type: boolean
        deleted:
          description: Deletion time (if user is marked as deleted in database)
          format: date-time
          type: string
      required:
      - account
      - address
      - commerce
      - license
      - permissions
      - properties
      - username
      type: object
    UserLicenseSettings:
      description: User license settings
      example:
        mode: Named
        level: None
      properties:
        level:
          description: License level
          enum:
          - None
          - Portal
          - Consumer
          - Contributor
          - Standard
          - Plus
          - Main
          - Editor
          - Pro
          type: string
        mode:
          description: License concurrency mode
          enum:
          - Named
          - Concurrent
          type: string
      type: object
    UserPermissions:
      description: User permissions
      example:
        isSiteOwner: true
      properties:
        isSiteOwner:
          description: User is site owner
          readOnly: true
          type: boolean
      type: object
    Address:
      description: Address
      example:
        profession: profession
        zipCode: zipCode
        country: country
        city: city
        givenName: givenName
        title: title
        streetAddress:
        - streetAddress
        - streetAddress
        phone: phone
        surname: surname
        organization: organization
        middleName: middleName
        state: state
        businessType: businessType
        fax: fax
        email: email
        homepage: homepage
      properties:
        title:
          description: Title
          type: string
        givenName:
          description: First name
          type: string
        middleName:
          description: Initials
          type: string
        surname:
          description: Last name
          type: string
        organization:
          description: Organization
          type: string
        email:
          description: Email
          type: string
        profession:
          description: Profession
          type: string
        businessType:
          description: Business type
          type: string
        streetAddress:
          description: Street addresses
          items:
            description: Street address
            type: string
          type: array
        city:
          description: City
          type: string
        state:
          description: State
          type: string
        zipCode:
          description: Zip code
          type: string
        country:
          description: Country
          type: string
        phone:
          description: Phone number
          type: string
        fax:
          description: Fax number
          type: string
        homepage:
          description: Home page
          type: string
      required:
      - email
      - givenName
      - streetAddress
      - surname
      type: object
    CommerceInfo:
      description: User commerce info
      example:
        accountId: accountId
        paymentMethod: NoCharge
        discount: 1.4658129805029452
        category: category
      properties:
        category:
          description: Category
          type: string
        accountId:
          description: Account ID
          type: string
        paymentMethod:
          description: Payment method
          enum:
          - NoCharge
          - Invoice
          - CreditCard
          - ManualAccept
          type: string
        discount:
          description: Discount
          format: double
          type: number
      type: object
    Account:
      description: User account information
      example:
        password: password
        expires: 2000-01-23T04:56:07.000+00:00
        allowPasswordChange: true
        forcePasswordChange: true
        isEnabled: true
        externalIds:
        - provider: provider
          id: id
        - provider: provider
          id: id
        hasPassword: true
        lastLoginDate: 2000-01-23T04:56:07.000+00:00
        deletePassword: true
        isSsoUser: true
      properties:
        password:
          description: The password hash stored in MongoDB
          type: string
        hasPassword:
          description: User has a password
          readOnly: true
          type: boolean
        deletePassword:
          description: Delete password
          type: boolean
        forcePasswordChange:
          description: Force password change on next login
          type: boolean
        allowPasswordChange:
          description: Allow user to change password
          type: boolean
        lastLoginDate:
          description: Last login date
          format: date-time
          readOnly: true
          type: string
        expires:
          description: Expiry time
          format: date-time
          type: string
        isEnabled:
          description: User is enabled (not locked out)
          type: boolean
        externalIds:
          description: External IDs for SSO
          items:
            $ref: '#/components/schemas/ExternalId'
          type: array
        isSsoUser:
          description: User is SSO user (has external IDs)
          readOnly: true
          type: boolean
      required:
      - externalIds
      type: object
    Count:
      description: Count of x
      example:
        count: 0
      properties:
        count:
          type: integer
      type: object
    doctype:
      enum:
      - Image
      - Movie
      - Audio
      - Document
      - Graphic
      - Generic
      type: string
    ErrorMessage:
      properties:
        message:
          description: Message describing the error
          type: string
        href:
          description: url
          type: string
      type: object
    Paging:
      description: "Paging information. If null, then the list is not paged, i.e.,\
        \ the representation contains the entire list."
      example:
        next: next
        last: last
        prev: prev
        first: first
      properties:
        prev:
          description: "URL of previous page. If null, then there is no previous page,\
            \ and the current representation is the first page."
          type: string
        next:
          description: "URL of next page. If null, then there is no next page, and\
            \ the current representation is the last page."
          type: string
        first:
          description: |
            URL of first page. This attribute is never null and can be used for restarting navigation at the beginning of the list.
          type: string
        last:
          description: |
            URL of last page. If null, then the last page is not known, because it is not known how many pages there are.
            The last page (if the list has finite length) can be �discovered� by following paging.next repeatedly
          type: string
      type: object
    PagingInfo:
      description: Paging information in a paged list
      example:
        next: next
        last: last
        prev: prev
        first: first
      properties:
        next:
          description: URL of next page (null if next page)
          nullable: true
          type: string
        prev:
          description: URL of previous page (null if first page)
          nullable: true
          type: string
        first:
          description: URL of first page
          type: string
        last:
          description: URL of last page
          type: string
      required:
      - first
      - last
      - next
      - prev
    ValueModelBoolean:
      example:
        value: true
      properties:
        value:
          type: boolean
      type: object
    ValueModelInteger:
      example:
        value: 0
      properties:
        value:
          format: int32
          type: integer
      type: object
    _fotoweb_api_uploads__uploadId__chunks__chunkIndex__post_request:
      properties:
        fileName:
          format: binary
          type: string
      type: object
    Sharing_message:
      example:
        title: title
        body: body
      properties:
        title:
          type: string
        body:
          type: string
      type: object
    Sharing_shares_inner:
      example:
        name: name
        href: href
        acl:
        - view
        - preview
        type: type
        sharedHREF: sharedHREF
      properties:
        type:
          type: string
        href:
          type: string
        name:
          type: string
        acl:
          example:
          - view
          - preview
          items: {}
          type: array
        sharedHREF:
          type: string
      type: object
    Sharing_showcase:
      example:
        from: from
        to: to
        acl:
        - view
        - preview
        - download
        type: type
        sharedHREF: sharedHREF
      properties:
        from:
          type: string
        to:
          type: string
        acl:
          example:
          - view
          - preview
          - download
          items: {}
          type: array
        sharedHREF:
          type: string
        type:
          type: string
      type: object
    SharingLinkList_addedShares_inner:
      example:
        acl:
        - view
        - preview
        - download
        type: type
        sharedHREF: sharedHREF
      properties:
        type:
          type: string
        acl:
          example:
          - view
          - preview
          - download
          items: {}
          type: array
        sharedHREF:
          type: string
      type: object
    SharingUpdate_addShares_inner:
      properties:
        type:
          description: "everyone, user or group"
          type: string
        href:
          description: user or group to share with
          type: string
        acl:
          example:
          - view
          - preview
          - download
          items: {}
          type: array
      type: object
    SharingUpdate_removeShares_inner:
      properties:
        type:
          description: "everyone, user or group"
          type: string
        href:
          description: When removing user/group permissions/shares we need the unique
            reference
          type: string
      type: object
    SharingUpdate_message:
      description: "Optional, add a message to the added shares"
      properties:
        body:
          description: Body of the message
          type: string
        title:
          description: Title of the message
          type: string
      type: object
    Annotation_owner:
      example:
        avatarHref: avatarHref
        name: name
      properties:
        name:
          type: string
        avatarHref:
          type: string
      type: object
    Annotation_props_comments:
      example:
        count: 0
        href: href
        enabled: true
      properties:
        count:
          type: integer
        href:
          type: string
        enabled:
          type: boolean
      type: object
    Annotation_props:
      example:
        comments:
          count: 0
          href: href
          enabled: true
      properties:
        comments:
          $ref: '#/components/schemas/Annotation_props_comments'
      type: object
    AnnotationList_data_inner:
      example:
        owner:
          avatarHref: avatarHref
          name: name
        allowDelete: true
        color: color
        created: created
        type: type
        props:
          comments:
            count: 0
            href: href
            enabled: true
        fragmentHref: fragmentHref
        top: 6
        left: 5
        width: 1
        modified: modified
        text: text
        href: href
        allowUpdate: true
        height: 5
      properties:
        allowUpdate:
          type: boolean
        owner:
          $ref: '#/components/schemas/Annotation_owner'
        color:
          type: string
        modified:
          type: string
        props:
          $ref: '#/components/schemas/Annotation_props'
        type:
          type: string
        text:
          type: string
        top:
          type: integer
        allowDelete:
          type: boolean
        href:
          type: string
        width:
          type: integer
        left:
          type: integer
        created:
          type: string
        height:
          type: integer
        fragmentHref:
          type: string
      type: object
    APIDescriptor_services:
      example:
        rendition_request: rendition_request
        search: search
        login: login
      properties:
        login:
          type: string
        search:
          type: string
        rendition_request:
          type: string
      type: object
    FullAPIDescriptor_appearance:
      example:
        favicon: favicon
        loginLogo: loginLogo
        mobileLogo: mobileLogo
        homepageImage: homepageImage
        mainLogo: mainLogo
        customCss: customCss
      properties:
        loginLogo:
          type: string
        mainLogo:
          type: string
        mobileLogo:
          type: string
        customCss:
          type: string
        homepageImage:
          type: string
        favicon:
          type: string
      type: object
    FullAPIDescriptor_order_views:
      example:
        history: history
        cart: cart
      properties:
        cart:
          type: string
        history:
          type: string
      type: object
    FullAPIDescriptor_order_admin_views:
      example:
        pending: pending
      properties:
        pending:
          type: string
      type: object
    FullAPIDescriptor_order_admin:
      example:
        approved: approved
        rejected: rejected
        pending: pending
        history: history
        views:
          pending: pending
      properties:
        history:
          type: string
        pending:
          type: string
        approved:
          type: string
        rejected:
          type: string
        views:
          $ref: '#/components/schemas/FullAPIDescriptor_order_admin_views'
      type: object
    FullAPIDescriptor_order:
      example:
        admin:
          approved: approved
          rejected: rejected
          pending: pending
          history: history
          views:
            pending: pending
        history: history
        config: config
        views:
          history: history
          cart: cart
        cart: cart
      properties:
        views:
          $ref: '#/components/schemas/FullAPIDescriptor_order_views'
        config:
          type: string
        cart:
          type: string
        history:
          type: string
        admin:
          $ref: '#/components/schemas/FullAPIDescriptor_order_admin'
      type: object
    FullAPIDescriptor_permissions_albums:
      example:
        showOnHomepage: true
        shareWithGuests: true
        create: true
        comment: true
        addAssets: true
      properties:
        create:
          type: boolean
        comment:
          type: boolean
        shareWithGuests:
          type: boolean
        showOnHomepage:
          type: boolean
        addAssets:
          type: boolean
      type: object
    FullAPIDescriptor_permissions:
      example:
        albums:
          showOnHomepage: true
          shareWithGuests: true
          create: true
          comment: true
          addAssets: true
        showAdvancedBreadcrumb: true
        shareCropAndDownloadPresets: true
        delegateDownload: true
        hasAuditPermission: true
        canTogglePositionedMarkers: true
        canManageExports: true
        print: true
        allowTaxonomyEditing: true
        hasManageSettingsPermission: true
        allowShareBookmark: true
        hasAdvancedVideoControls: true
        moderateComments: true
        hasManageServicesPermission: true
        allowRetranscode: true
        canLinkInAdobeCC: true
        hasManageWorkflowsPermission: true
        hasManageArchivesPermission: true
      properties:
        delegateDownload:
          description: User has permission to share an album with download permissions
          type: boolean
        moderateComments:
          type: boolean
        canTogglePositionedMarkers:
          type: boolean
        canManageExports:
          type: boolean
        hasAdvancedVideoControls:
          type: boolean
        hasManageArchivesPermission:
          type: boolean
        hasManageServicesPermission:
          type: boolean
        hasManageSettingsPermission:
          type: boolean
        allowRetranscode:
          type: boolean
        showAdvancedBreadcrumb:
          type: boolean
        shareCropAndDownloadPresets:
          type: boolean
        print:
          type: boolean
        hasAuditPermission:
          type: boolean
        albums:
          $ref: '#/components/schemas/FullAPIDescriptor_permissions_albums'
        canLinkInAdobeCC:
          type: boolean
        allowTaxonomyEditing:
          description: User has permission to modify taxonomies
          type: boolean
        allowShareBookmark:
          type: boolean
        hasManageWorkflowsPermission:
          type: boolean
      type: object
    FullAPIDescriptor_security:
      example:
        allowFileSystemDestinations: true
      properties:
        allowFileSystemDestinations:
          type: boolean
      type: object
    FullAPIDescriptor_services_keepalive:
      example:
        interval: 0
        href: href
      properties:
        href:
          type: string
        interval:
          type: integer
      type: object
    FullAPIDescriptor_services:
      example:
        rendition_request: rendition_request
        logout: logout
        search: search
        keepalive:
          interval: 0
          href: href
        navigate_next: navigate_next
        retranscode: retranscode
        navigate_prev: navigate_prev
      properties:
        navigate_prev:
          type: string
        retranscode:
          type: string
        rendition_request:
          type: string
        keepalive:
          $ref: '#/components/schemas/FullAPIDescriptor_services_keepalive'
        logout:
          type: string
        search:
          type: string
        navigate_next:
          type: string
      type: object
    FullAPIDescriptor_upload:
      example:
        preserveMetadata: true
      properties:
        preserveMetadata:
          type: boolean
      type: object
    FullAPIDescriptor_user:
      example:
        firstName: firstName
        lastName: lastName
        isGuest: true
        userAvatarHref: userAvatarHref
        fullName: fullName
        href: href
        userName: userName
        userId: 6
        email: email
      properties:
        fullName:
          description: Full name of the user that the client is authenticated as
          type: string
        email:
          type: string
        isGuest:
          type: boolean
        href:
          description: URL of the user that the client is authenticated as
          type: string
        userName:
          description: User name of the user that the client is authenticated as
          type: string
        firstName:
          description: First name of the user that the client is authenticated as
          type: string
        lastName:
          description: Last name of the user that the client is authenticated as
          type: string
        userId:
          description: ID of the user that the client is authenticated as
          type: integer
        userAvatarHref:
          type: string
      type: object
    FullAPIDescriptor_userManagement:
      example:
        registeredUsersGroup: registeredUsersGroup
        userList: userList
        adminUser: adminUser
        everyoneGroup: everyoneGroup
        groupList: groupList
        siteOwner: siteOwner
        guestUser: guestUser
      properties:
        userList:
          type: string
        groupList:
          type: string
        guestUser:
          type: string
        adminUser:
          type: string
        everyoneGroup:
          type: string
        registeredUsersGroup:
          type: string
        siteOwner:
          type: string
      type: object
    FullAPIDescriptor_widgets_fwdt_views:
      example:
        install: install
      properties:
        install:
          type: string
      type: object
    FullAPIDescriptor_widgets_fwdt_services:
      example:
        edit: edit
        open: open
        crop: crop
      properties:
        open:
          type: string
        edit:
          type: string
        crop:
          type: string
      type: object
    FullAPIDescriptor_widgets_fwdt_win_installer:
      example:
        href: href
        version: version
      properties:
        version:
          type: string
        href:
          type: string
      type: object
    FullAPIDescriptor_widgets_fwdt_win:
      example:
        installer:
          href: href
          version: version
        minVersion: minVersion
      properties:
        installer:
          $ref: '#/components/schemas/FullAPIDescriptor_widgets_fwdt_win_installer'
        minVersion:
          type: string
      type: object
    FullAPIDescriptor_widgets_fwdt_osx:
      example:
        minVersion: minVersion
        installer:
          href: href
          version: version
      properties:
        minVersion:
          type: string
        installer:
          $ref: '#/components/schemas/FullAPIDescriptor_widgets_fwdt_win_installer'
      type: object
    FullAPIDescriptor_widgets_fwdt:
      example:
        osx:
          minVersion: minVersion
          installer:
            href: href
            version: version
        services:
          edit: edit
          open: open
          crop: crop
        win:
          installer:
            href: href
            version: version
          minVersion: minVersion
        views:
          install: install
      properties:
        views:
          $ref: '#/components/schemas/FullAPIDescriptor_widgets_fwdt_views'
        services:
          $ref: '#/components/schemas/FullAPIDescriptor_widgets_fwdt_services'
        win:
          $ref: '#/components/schemas/FullAPIDescriptor_widgets_fwdt_win'
        osx:
          $ref: '#/components/schemas/FullAPIDescriptor_widgets_fwdt_osx'
      type: object
    FullAPIDescriptor_widgets:
      example:
        fwdt:
          osx:
            minVersion: minVersion
            installer:
              href: href
              version: version
          services:
            edit: edit
            open: open
            crop: crop
          win:
            installer:
              href: href
              version: version
            minVersion: minVersion
          views:
            install: install
        selection: selection
      properties:
        selection:
          description: URL of the selection widget for CMS integration
          type: string
        fwdt:
          $ref: '#/components/schemas/FullAPIDescriptor_widgets_fwdt'
      type: object
    FullAPIDescriptor_views_subscription:
      example:
        siteCreatedDate: siteCreatedDate
        origin: origin
        state: state
      properties:
        siteCreatedDate:
          type: string
        state:
          type: string
        origin:
          type: string
      type: object
    FullAPIDescriptor_views:
      example:
        manage_exports: manage_exports
        manageInvitations: manageInvitations
        edit_taxonomy_item: edit_taxonomy_item
        upload: upload
        loggedOut: loggedOut
        admin_webhooks: admin_webhooks
        subscription:
          siteCreatedDate: siteCreatedDate
          origin: origin
          state: state
        manageConsentForms: manageConsentForms
        pro: pro
        signUpAdmin: signUpAdmin
        changePassword: changePassword
        createInvitations: createInvitations
        selection: selection
        manageSubscription: manageSubscription
      properties:
        manageInvitations:
          type: string
        changePassword:
          type: string
        manageSubscription:
          type: string
        pro:
          type: string
        manage_exports:
          type: string
        admin_webhooks:
          type: string
        edit_taxonomy_item:
          type: string
        createInvitations:
          type: string
        subscription:
          $ref: '#/components/schemas/FullAPIDescriptor_views_subscription'
        loggedOut:
          type: string
        upload:
          type: string
        selection:
          type: string
        signUpAdmin:
          type: string
        manageConsentForms:
          type: string
      type: object
    FullAPIDescriptor_apiFeatureLevels:
      example:
        consentFormsApiFeatureLevel: 5
      properties:
        consentFormsApiFeatureLevel:
          type: integer
      type: object
    Asset_ancestors_inner:
      example:
        data: data
        name: name
        href: href
      properties:
        name:
          type: string
        href:
          type: string
        data:
          type: string
      type: object
    Asset_attributes_imageattributes:
      description: "If present, contains information specific to image assets, such\
        \ as resolution and color space."
      example:
        colorspace: colorspace
        rotation: 5
        flipmirror: 1
        pixelheight: 0
        resolution: 6
        pixelwidth: 5
      properties:
        pixelheight:
          type: integer
        resolution:
          type: integer
        flipmirror:
          type: integer
        rotation:
          type: integer
        colorspace:
          type: string
        pixelwidth:
          type: integer
      type: object
    Asset_attributes:
      example:
        imageattributes:
          colorspace: colorspace
          rotation: 5
          flipmirror: 1
          pixelheight: 0
          resolution: 6
          pixelwidth: 5
      properties:
        imageattributes:
          $ref: '#/components/schemas/Asset_attributes_imageattributes'
      type: object
    Asset_builtinFields_inner:
      example:
        field: field
        value: value
        required: true
      properties:
        required:
          type: boolean
        value:
          type: string
        field:
          type: string
      type: object
    Asset_capabilities:
      example:
        printWithAnnotations: true
        print: true
        crop: true
      properties:
        printWithAnnotations:
          type: boolean
        crop:
          type: boolean
        print:
          type: boolean
      type: object
    Asset_metadataEditor:
      example:
        name: name
        href: href
      properties:
        name:
          description: Display name of the available metadata editor for this asset
          type: string
        href:
          description: |
            Links to metadata editor. URL of the metadata editor that is available for this asset.
            The metadata editor is usually defined by the metadata set associated with the archive to which the asset belongs.
            By sending a request to this URL, a client application can determine what fields are available for editing and other information for editing and validation of metadata input.
          type: string
      type: object
    Asset_previews_inner:
      example:
        square: true
        size: 1
        width: 5
        href: href
        height: 5
      properties:
        size:
          type: integer
        width:
          type: integer
        height:
          type: integer
        href:
          type: string
        square:
          type: boolean
      type: object
    Asset_props_shares:
      example:
        enabled: true
      properties:
        enabled:
          type: boolean
      type: object
    Asset_props:
      description: Common properties of this resource
      example:
        shares:
          enabled: true
        comments:
          enabled: true
        annotations:
          enabled: true
      properties:
        shares:
          $ref: '#/components/schemas/Asset_props_shares'
        comments:
          $ref: '#/components/schemas/Asset_props_shares'
        annotations:
          $ref: '#/components/schemas/Asset_props_shares'
      type: object
    Asset_quickRenditions_inner:
      example:
        square: true
        size: 1
        width: 1
        name: name
        href: href
        height: 1
      properties:
        size:
          type: integer
        width:
          type: integer
        height:
          type: integer
        href:
          type: string
        square:
          type: boolean
        name:
          type: string
      type: object
    Asset_renditions_inner:
      example:
        default: true
        original: true
        sizeFixed: true
        profile: profile
        width: 6
        description: description
        href: http://example.com/aeiou
        display_name: display_name
        height: 7
      properties:
        href:
          description: Rendition URL
          format: url
          type: string
        profile:
          type: string
        width:
          description: Width of the rendition in pixels (if applicable).
          type: integer
        description:
          description: Human-readable detailed description of the rendition.
          type: string
        height:
          description: Height of the rendition in pixels (if applicable).
          type: integer
        default:
          description: "If true, this rendition is the default rendition that should\
            \ be offered to users in a selection interface."
          type: boolean
        original:
          description: "If true, this rendition is the original asset file without\
            \ any processing applied."
          type: boolean
        sizeFixed:
          type: boolean
        display_name:
          description: Human readable display name of the rendition.
          type: string
      type: object
    Asset_thumbnailFields_label:
      example:
        value: value
      properties:
        value:
          type: string
      type: object
    Asset_thumbnailFields:
      example:
        secondLine:
          value: value
        label:
          value: value
        firstLine:
          value: value
      properties:
        label:
          $ref: '#/components/schemas/Asset_thumbnailFields_label'
        firstLine:
          $ref: '#/components/schemas/Asset_thumbnailFields_label'
        secondLine:
          $ref: '#/components/schemas/Asset_thumbnailFields_label'
      type: object
    Previews_inner:
      properties:
        square:
          description: Specifies whether the preview image retains its original proportions
            (false) or is cropped to a square (true).
          type: boolean
        size:
          description: |
            Size of the preview image (maximum of width and height).
            Can be used for selecting the appropriate preview image based on factors such as screen resolution or the size of the context where the preview image should be rendered.
          type: integer
        width:
          description: Display width of the preview image in pixels
          type: integer
        height:
          description: Display height of the preview image in pixels
          type: integer
        href:
          description: URL for requesting the preview image.
          type: string
      type: object
    ActionRequest_assets_inner:
      properties:
        href:
          type: string
      type: object
    MetadataEditRequest_job_metadata_inner:
      properties:
        field:
          type: integer
        value:
          type: string
      type: object
    TaskStatus_job_result_inner_changed_builtinFields_inner:
      properties:
        field:
          type: string
        value:
          type: string
      type: object
    TaskStatus_job_result_inner:
      properties:
        changed-builtinFields:
          items:
            $ref: '#/components/schemas/TaskStatus_job_result_inner_changed_builtinFields_inner'
          type: array
        changed-fields:
          items:
            $ref: '#/components/schemas/MetadataEditRequest_job_metadata_inner'
          type: array
        href:
          type: string
        done:
          type: boolean
        changed-thumbnailFields:
          items:
            $ref: '#/components/schemas/TaskStatus_job_result_inner_changed_builtinFields_inner'
          type: array
      type: object
    TaskStatus_job:
      properties:
        status:
          description: Tells you if the job is 'pending' or 'done'
          type: string
        result:
          items:
            $ref: '#/components/schemas/TaskStatus_job_result_inner'
          type: array
      type: object
    TaskStatus_task:
      properties:
        status:
          type: string
        created:
          type: string
        modified:
          type: string
        href:
          type: string
        user:
          type: integer
        type:
          type: string
        id:
          type: string
      type: object
    Collection_alt_orders_inner_asc_urlComponents_inner:
      example:
        value: value
        key: key
      properties:
        value:
          type: string
        key:
          type: string
      type: object
    Collection_alt_orders_inner_asc:
      example:
        data: data
        urlComponents:
        - value: value
          key: key
        - value: value
          key: key
        href: href
      properties:
        data:
          type: string
        urlComponents:
          items:
            $ref: '#/components/schemas/Collection_alt_orders_inner_asc_urlComponents_inner'
          type: array
        href:
          type: string
      type: object
    Collection_alt_orders_inner_desc_urlComponents_inner:
      example:
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    Collection_alt_orders_inner_desc:
      example:
        default: true
        data: data
        urlComponents:
        - value: value
          key: key
        - value: value
          key: key
        href: href
      properties:
        href:
          type: string
        data:
          type: string
        default:
          type: boolean
        urlComponents:
          items:
            $ref: '#/components/schemas/Collection_alt_orders_inner_desc_urlComponents_inner'
          type: array
      type: object
    Collection_alt_orders_inner:
      example:
        asc:
          data: data
          urlComponents:
          - value: value
            key: key
          - value: value
            key: key
          href: href
        name: name
        key: key
        desc:
          default: true
          data: data
          urlComponents:
          - value: value
            key: key
          - value: value
            key: key
          href: href
      properties:
        name:
          type: string
        key:
          type: string
        asc:
          $ref: '#/components/schemas/Collection_alt_orders_inner_asc'
        desc:
          $ref: '#/components/schemas/Collection_alt_orders_inner_desc'
      type: object
    Collection_clearSearch:
      description: clearSearch
      example:
        data: data
        href: href
      properties:
        href:
          description: href
          type: string
        data:
          description: data
          type: string
      type: object
    Collection_create_inner:
      example:
        href: href
        type: type
      properties:
        href:
          type: string
        type:
          type: string
      type: object
    Collection_metadataEditor:
      description: metadataEditor
      example:
        name: name
        href: href
      properties:
        name:
          description: Display name of the available metadata editor for assets in
            the collection
          type: string
        href:
          description: |
            URL of the metadata editor that is available for assets in the collection.
            The metadata editor is usually defined by the metadata view associated with the archive to which the collection belongs. By sending a request to this URL, a client application can determine what fields are available for editing and other information for editing and validation of metadata input.
          type: string
      type: object
    Collection_propertyValidations_inner:
      example:
        regex: regex
        min: 2
        max: 7
        name: name
      properties:
        min:
          type: integer
        max:
          type: integer
        regex:
          type: string
        name:
          type: string
      type: object
    Collection_props:
      description: Common properties of this resource.
      example:
        shares:
          enabled: true
        comments:
          enabled: true
        annotations:
          enabled: true
      properties:
        annotations:
          $ref: '#/components/schemas/Asset_props_shares'
        shares:
          $ref: '#/components/schemas/Asset_props_shares'
        comments:
          $ref: '#/components/schemas/Asset_props_shares'
      type: object
    CollectionInfo_clearSearch:
      example:
        data: data
        href: href
      properties:
        href:
          type: string
        data:
          type: string
      type: object
    CollectionInfo_metadataEditor:
      example:
        name: name
        href: href
      properties:
        name:
          description: Display name of the available metadata editor for assets in
            the collection
          type: string
        href:
          description: |
            URL of the metadata editor that is available for assets in the collection.
            The metadata editor is usually defined by the metadata view associated with the archive to which the collection belongs. By sending a request to this URL, a client application can determine what fields are available for editing and other information for editing and validation of metadata input.
          type: string
      type: object
    MetadataView_builtinFields_notes_field:
      example:
        multiline: true
        multi-instance: true
        max-size: 0
        data-type: data-type
        id: 6
        label: label
        validation: "{}"
      properties:
        multi-instance:
          description: true if field has zero or more values (bag field). false if
            field has exactly one value
          type: boolean
        max-size:
          description: Maximum length of a field of type text.
          type: integer
        multiline:
          description: "For fields of type text, indicates that input masks should\
            \ allow multi-line text input"
          type: boolean
        data-type:
          description: Type of allowed values of the field.
          type: string
        validation:
          type: object
        id:
          type: integer
        label:
          description: Localized human-readable display name of the metadata field
          type: string
      type: object
    MetadataView_builtinFields_notes:
      example:
        field:
          multiline: true
          multi-instance: true
          max-size: 0
          data-type: data-type
          id: 6
          label: label
          validation: "{}"
        taxonomy-only: true
        isWritable: true
        required: true
      properties:
        taxonomy-only:
          type: boolean
        isWritable:
          type: boolean
        required:
          type: boolean
        field:
          $ref: '#/components/schemas/MetadataView_builtinFields_notes_field'
      type: object
    MetadataView_builtinFields_tags_field:
      example:
        multiline: true
        multi-instance: true
        max-size: 5
        id: 1
        label: label
        data-type: data-type
        taxonomyHref: taxonomyHref
        validation: "{}"
      properties:
        id:
          type: integer
        taxonomyHref:
          description: |
            If not null, URL of the taxonomy root associated with this field. If null, then taxonomy is not enabled for this field.
          type: string
        label:
          type: string
        multi-instance:
          type: boolean
        max-size:
          type: integer
        multiline:
          type: boolean
        data-type:
          type: string
        validation:
          type: object
      type: object
    MetadataView_builtinFields_tags:
      description: Description of the built-in tags field
      example:
        field:
          multiline: true
          multi-instance: true
          max-size: 5
          id: 1
          label: label
          data-type: data-type
          taxonomyHref: taxonomyHref
          validation: "{}"
        taxonomy-only: true
        isWritable: true
        required: true
      properties:
        field:
          $ref: '#/components/schemas/MetadataView_builtinFields_tags_field'
        taxonomy-only:
          description: |
            true if input masks should only allow users to select values from a taxonomy associated with the field. false if users should be allowed to enter arbitrary values that conform with the remaining specifications
          type: boolean
        isWritable:
          description: true if the field may be edited in metadata update and upload
            requests. false if the field is read-only
          type: boolean
        required:
          description: |
            true if the field must have a non-empty value (or at least one value if multi-instance is true). false if the field may be empty
          type: boolean
      type: object
    MetadataView_builtinFields_status_field:
      example:
        multiline: true
        multi-instance: true
        max-size: 2
        data-type: data-type
        id: 5
        label: label
        validation: "{}"
      properties:
        multiline:
          type: boolean
        data-type:
          type: string
        validation:
          type: object
        id:
          type: integer
        label:
          type: string
        multi-instance:
          type: boolean
        max-size:
          type: integer
      type: object
    MetadataView_builtinFields_status:
      description: Description of the built-in status field
      example:
        field:
          multiline: true
          multi-instance: true
          max-size: 2
          data-type: data-type
          id: 5
          label: label
          validation: "{}"
        taxonomy-only: true
        isWritable: true
        required: true
      properties:
        taxonomy-only:
          type: boolean
        isWritable:
          type: boolean
        required:
          type: boolean
        field:
          $ref: '#/components/schemas/MetadataView_builtinFields_status_field'
      type: object
    MetadataView_builtinFields_rating_field:
      example:
        multiline: true
        max-size: 7
        multi-instance: true
        data-type: data-type
        id: 9
        label: label
        validation: "{}"
      properties:
        max-size:
          type: integer
        multiline:
          type: boolean
        data-type:
          type: string
        validation:
          type: object
        id:
          type: integer
        label:
          type: string
        multi-instance:
          type: boolean
      type: object
    MetadataView_builtinFields_rating:
      description: Description of the built-in rating field
      example:
        field:
          multiline: true
          max-size: 7
          multi-instance: true
          data-type: data-type
          id: 9
          label: label
          validation: "{}"
        taxonomy-only: true
        isWritable: true
        required: true
      properties:
        taxonomy-only:
          type: boolean
        isWritable:
          type: boolean
        required:
          type: boolean
        field:
          $ref: '#/components/schemas/MetadataView_builtinFields_rating_field'
      type: object
    MetadataView_builtinFields_description_field:
      example:
        multiline: true
        multi-instance: true
        max-size: 2
        data-type: data-type
        id: 3
        label: label
        validation: "{}"
      properties:
        data-type:
          type: string
        validation:
          type: object
        id:
          type: integer
        label:
          type: string
        multi-instance:
          type: boolean
        max-size:
          type: integer
        multiline:
          type: boolean
      type: object
    MetadataView_builtinFields_description:
      description: Description of the built-in description field
      example:
        field:
          multiline: true
          multi-instance: true
          max-size: 2
          data-type: data-type
          id: 3
          label: label
          validation: "{}"
        taxonomy-only: true
        isWritable: true
        required: true
      properties:
        taxonomy-only:
          type: boolean
        isWritable:
          type: boolean
        required:
          type: boolean
        field:
          $ref: '#/components/schemas/MetadataView_builtinFields_description_field'
      type: object
    MetadataView_builtinFields_title_field:
      example:
        multiline: true
        multi-instance: true
        max-size: 7
        id: 4
        label: label
        data-type: data-type
        validation: "{}"
      properties:
        id:
          type: integer
        label:
          type: string
        multi-instance:
          type: boolean
        max-size:
          type: integer
        multiline:
          type: boolean
        data-type:
          type: string
        validation:
          type: object
      type: object
    MetadataView_builtinFields_title:
      description: Description of the built-in title field
      example:
        field:
          multiline: true
          multi-instance: true
          max-size: 7
          id: 4
          label: label
          data-type: data-type
          validation: "{}"
        taxonomy-only: true
        isWritable: true
        required: true
      properties:
        taxonomy-only:
          type: boolean
        isWritable:
          type: boolean
        required:
          type: boolean
        field:
          $ref: '#/components/schemas/MetadataView_builtinFields_title_field'
      type: object
    MetadataView_builtinFields:
      description: "Describes metadata fields with special semantic roles, such as\
        \ the title or description of an asset."
      example:
        notes:
          field:
            multiline: true
            multi-instance: true
            max-size: 0
            data-type: data-type
            id: 6
            label: label
            validation: "{}"
          taxonomy-only: true
          isWritable: true
          required: true
        rating:
          field:
            multiline: true
            max-size: 7
            multi-instance: true
            data-type: data-type
            id: 9
            label: label
            validation: "{}"
          taxonomy-only: true
          isWritable: true
          required: true
        description:
          field:
            multiline: true
            multi-instance: true
            max-size: 2
            data-type: data-type
            id: 3
            label: label
            validation: "{}"
          taxonomy-only: true
          isWritable: true
          required: true
        title:
          field:
            multiline: true
            multi-instance: true
            max-size: 7
            id: 4
            label: label
            data-type: data-type
            validation: "{}"
          taxonomy-only: true
          isWritable: true
          required: true
        tags:
          field:
            multiline: true
            multi-instance: true
            max-size: 5
            id: 1
            label: label
            data-type: data-type
            taxonomyHref: taxonomyHref
            validation: "{}"
          taxonomy-only: true
          isWritable: true
          required: true
        status:
          field:
            multiline: true
            multi-instance: true
            max-size: 2
            data-type: data-type
            id: 5
            label: label
            validation: "{}"
          taxonomy-only: true
          isWritable: true
          required: true
      properties:
        notes:
          $ref: '#/components/schemas/MetadataView_builtinFields_notes'
        tags:
          $ref: '#/components/schemas/MetadataView_builtinFields_tags'
        status:
          $ref: '#/components/schemas/MetadataView_builtinFields_status'
        rating:
          $ref: '#/components/schemas/MetadataView_builtinFields_rating'
        description:
          $ref: '#/components/schemas/MetadataView_builtinFields_description'
        title:
          $ref: '#/components/schemas/MetadataView_builtinFields_title'
      type: object
    MetadataView_detailRegions_inner_fields_inner_field:
      example:
        multiline: true
        multi-instance: true
        max-size: 1
        data-type: data-type
        id: 1
        label: label
        taxonomyHref: taxonomyHref
        validation: "{}"
      properties:
        data-type:
          type: string
        validation:
          type: object
        id:
          type: integer
        taxonomyHref:
          type: string
        label:
          type: string
        multi-instance:
          type: boolean
        max-size:
          type: integer
        multiline:
          type: boolean
      type: object
    MetadataView_detailRegions_inner_fields_inner:
      example:
        field:
          multiline: true
          multi-instance: true
          max-size: 1
          data-type: data-type
          id: 1
          label: label
          taxonomyHref: taxonomyHref
          validation: "{}"
        taxonomy-only: true
        isWritable: true
        required: true
      properties:
        field:
          $ref: '#/components/schemas/MetadataView_detailRegions_inner_fields_inner_field'
        taxonomy-only:
          type: boolean
        isWritable:
          type: boolean
        required:
          type: boolean
      type: object
    MetadataView_detailRegions_inner:
      example:
        name: name
        fields:
        - field:
            multiline: true
            multi-instance: true
            max-size: 1
            data-type: data-type
            id: 1
            label: label
            taxonomyHref: taxonomyHref
            validation: "{}"
          taxonomy-only: true
          isWritable: true
          required: true
        - field:
            multiline: true
            multi-instance: true
            max-size: 1
            data-type: data-type
            id: 1
            label: label
            taxonomyHref: taxonomyHref
            validation: "{}"
          taxonomy-only: true
          isWritable: true
          required: true
      properties:
        fields:
          items:
            $ref: '#/components/schemas/MetadataView_detailRegions_inner_fields_inner'
          type: array
        name:
          type: string
      type: object
    MetadataView_thumbnailFields_secondLine:
      description: Description of the metadata field that provides the second line
        of the long description of a thumbnail
      example:
        valueStore: valueStore
        field:
          multiline: true
          multi-instance: true
          max-size: 2
          data-type: data-type
          id: 5
          label: label
          validation: "{}"
        taxonomy-only: true
        isWritable: true
        required: true
      properties:
        field:
          $ref: '#/components/schemas/MetadataView_builtinFields_status_field'
        valueStore:
          type: string
        taxonomy-only:
          type: boolean
        isWritable:
          type: boolean
        required:
          type: boolean
      type: object
    MetadataView_thumbnailFields_firstLine_field:
      example:
        multiline: true
        multi-instance: true
        max-size: 6
        data-type: data-type
        id: 1
        label: label
        taxonomyHref: taxonomyHref
        validation: "{}"
      properties:
        multiline:
          type: boolean
        data-type:
          type: string
        validation:
          type: object
        id:
          type: integer
        taxonomyHref:
          type: string
        label:
          type: string
        multi-instance:
          type: boolean
        max-size:
          type: integer
      type: object
    MetadataView_thumbnailFields_firstLine:
      description: Description of the metadata field that provides the first line
        of the long description of a thumbnail
      example:
        valueStore: valueStore
        field:
          multiline: true
          multi-instance: true
          max-size: 6
          data-type: data-type
          id: 1
          label: label
          taxonomyHref: taxonomyHref
          validation: "{}"
        taxonomy-only: true
        isWritable: true
        required: true
      properties:
        required:
          type: boolean
        field:
          $ref: '#/components/schemas/MetadataView_thumbnailFields_firstLine_field'
        valueStore:
          type: string
        taxonomy-only:
          type: boolean
        isWritable:
          type: boolean
      type: object
    MetadataView_thumbnailFields_label:
      description: Description of the metadata field that provides the short description
        of a thumbnail
      example:
        valueStore: valueStore
        taxonomy-only: true
        isWritable: true
        required: true
      properties:
        valueStore:
          type: string
        taxonomy-only:
          type: boolean
        isWritable:
          type: boolean
        required:
          type: boolean
      type: object
    MetadataView_thumbnailFields:
      description: Describes metadata fields that are shown in thumbnails
      example:
        secondLine:
          valueStore: valueStore
          field:
            multiline: true
            multi-instance: true
            max-size: 2
            data-type: data-type
            id: 5
            label: label
            validation: "{}"
          taxonomy-only: true
          isWritable: true
          required: true
        label:
          valueStore: valueStore
          taxonomy-only: true
          isWritable: true
          required: true
        firstLine:
          valueStore: valueStore
          field:
            multiline: true
            multi-instance: true
            max-size: 6
            data-type: data-type
            id: 1
            label: label
            taxonomyHref: taxonomyHref
            validation: "{}"
          taxonomy-only: true
          isWritable: true
          required: true
      properties:
        secondLine:
          $ref: '#/components/schemas/MetadataView_thumbnailFields_secondLine'
        firstLine:
          $ref: '#/components/schemas/MetadataView_thumbnailFields_firstLine'
        label:
          $ref: '#/components/schemas/MetadataView_thumbnailFields_label'
      type: object
    AssetLinkList_data_inner:
      example:
        href: href
      properties:
        href:
          description: the URL of the asset to add to the cart
          type: string
      type: object
    CartUpdate_orderItems_inner:
      example:
        rendition: rendition
      properties:
        rendition:
          description: Rendition URL of rendition to order. This also identifies the
            asset. The rendition URL can be obtained from an Asset representation.
          type: string
      type: object
    Order_orderItems_inner_rendition:
      example:
        name: name
        href: href
      properties:
        href:
          type: string
        name:
          type: string
      type: object
    Order_orderItems_inner:
      example:
        expired: true
        rendition:
          name: name
          href: href
        adminComment: adminComment
        asset: asset
      properties:
        expired:
          type: boolean
        adminComment:
          type: string
        asset:
          type: string
        rendition:
          $ref: '#/components/schemas/Order_orderItems_inner_rendition'
      type: object
    Order_owner_address:
      example:
        profession: profession
        lastName: lastName
        country: country
        zipCode: zipCode
        initial: initial
        city: city
        title: title
        firstName: firstName
        phone: phone
        organization: organization
        state: state
        businessType: businessType
        fax: fax
        email: email
        homepage: homepage
      properties:
        businessType:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        organization:
          type: string
        initial:
          type: string
        profession:
          type: string
        phone:
          type: string
        email:
          type: string
        title:
          type: string
        country:
          type: string
        fax:
          type: string
        zipCode:
          type: string
        city:
          type: string
        state:
          type: string
        homepage:
          type: string
      type: object
    Order_owner:
      example:
        address:
          profession: profession
          lastName: lastName
          country: country
          zipCode: zipCode
          initial: initial
          city: city
          title: title
          firstName: firstName
          phone: phone
          organization: organization
          state: state
          businessType: businessType
          fax: fax
          email: email
          homepage: homepage
        username: username
      properties:
        username:
          type: string
        address:
          $ref: '#/components/schemas/Order_owner_address'
      type: object
    OrderList_paging:
      example:
        last: last
        first: first
      properties:
        first:
          type: string
        last:
          type: string
      type: object
    OrderList_data_inner_orderItems_inner_rendition:
      description: Rendition that is ordered.
      example:
        download: download
        name: name
        href: href
      properties:
        download:
          description: |
            Download URL of the ordered rendition or null.
            If not null, then this rendition can be downloaded (usually in approved orders only). This is not a direct download URL. The URL does not accept any requests.
          type: string
        href:
          description: |
            Original URL of the ordered rendition.
            This is the same as the rendition attribute in a cart update or order update request. Can be used to match against renditions.href in an Asset representation.
          type: string
        name:
          description: Human-readable display name of the rendition.
          type: string
      type: object
    OrderList_data_inner_orderItems_inner:
      example:
        expires: expires
        expired: true
        rendition:
          download: download
          name: name
          href: href
        adminComment: adminComment
        asset: asset
      properties:
        expires:
          description: "Time when item expires, null if it never expires."
          type: string
        adminComment:
          description: Comment on this item by the administrator.
          type: string
        asset:
          description: Asset whose rendition is ordered
          type: string
        rendition:
          $ref: '#/components/schemas/OrderList_data_inner_orderItems_inner_rendition'
        expired:
          description: "true if item has expired, false otherwise"
          type: boolean
      type: object
    OrderList_data_inner_owner_address:
      example:
        profession: profession
        country: country
        zipCode: zipCode
        lastName: lastName
        city: city
        initial: initial
        title: title
        firstName: firstName
        phone: phone
        streetAddress:
        - Address line 1
        organization: organization
        state: state
        businessType: businessType
        fax: fax
        email: email
        homepage: homepage
      properties:
        homepage:
          type: string
        businessType:
          type: string
        firstName:
          type: string
        country:
          type: string
        zipCode:
          type: string
        phone:
          type: string
        state:
          type: string
        lastName:
          type: string
        organization:
          type: string
        city:
          type: string
        initial:
          type: string
        profession:
          type: string
        streetAddress:
          example:
          - Address line 1
          items: {}
          type: array
        title:
          type: string
        fax:
          type: string
        email:
          type: string
      type: object
    OrderList_data_inner_owner:
      description: |
        User representation of the customer that placed the order. Contains information such as the user's email address and user name.
      example:
        address:
          profession: profession
          country: country
          zipCode: zipCode
          lastName: lastName
          city: city
          initial: initial
          title: title
          firstName: firstName
          phone: phone
          streetAddress:
          - Address line 1
          organization: organization
          state: state
          businessType: businessType
          fax: fax
          email: email
          homepage: homepage
        username: username
      properties:
        username:
          type: string
        address:
          $ref: '#/components/schemas/OrderList_data_inner_owner_address'
      type: object
    OrderList_data_inner:
      example:
        owner:
          address:
            profession: profession
            country: country
            zipCode: zipCode
            lastName: lastName
            city: city
            initial: initial
            title: title
            firstName: firstName
            phone: phone
            streetAddress:
            - Address line 1
            organization: organization
            state: state
            businessType: businessType
            fax: fax
            email: email
            homepage: homepage
          username: username
        expires: expires
        userComment: userComment
        created: created
        orderReference: orderReference
        modified: modified
        adminComment: adminComment
        href: href
        state: "[\"pending - The order is waiting for administrator approval.\",\"\
          approved - The order has been approved.\",\"rejected - The order has been\
          \ rejected.\",\"expired - The order has expired.\",\"created - The order\
          \ has been created but not submitted yet.\",\"cart - the order is a customer's\
          \ personal shopping cart.\"]"
        orderItems:
        - expires: expires
          expired: true
          rendition:
            download: download
            name: name
            href: href
          adminComment: adminComment
          asset: asset
        - expires: expires
          expired: true
          rendition:
            download: download
            name: name
            href: href
          adminComment: adminComment
          asset: asset
      properties:
        orderItems:
          description: "Ordered items. Contains the renditions ordered by the customer,\
            \ but may also be modified by an administrator."
          items:
            $ref: '#/components/schemas/OrderList_data_inner_orderItems_inner'
          type: array
        adminComment:
          description: Comment on this order by the administrator.
          type: string
        href:
          description: URL of the order
          type: string
        userComment:
          description: |
            Comment on this order by the customer. A customer may add a comment when submitting an order or modifying the shopping cart.
          type: string
        owner:
          $ref: '#/components/schemas/OrderList_data_inner_owner'
        created:
          description: Time when order was created
          type: string
        orderReference:
          description: |
            A human-readable string that uniquely identifies the order on the site.
            May be shown in notifications and used for communication with users.
          type: string
        modified:
          description: Time when order was last modified
          type: string
        expires:
          description: |
            Time when order expires, null if it never expires.
            An administrator or API client may set an expiry time when approving an order.
          type: string
        state:
          description: "Current state of the order. Changes when an order is submitted,\
            \ approved or rejected."
          example: "[\"pending - The order is waiting for administrator approval.\"\
            ,\"approved - The order has been approved.\",\"rejected - The order has\
            \ been rejected.\",\"expired - The order has expired.\",\"created - The\
            \ order has been created but not submitted yet.\",\"cart - the order is\
            \ a customer's personal shopping cart.\"]"
          type: string
      type: object
    OrderUpdate_orderItems_inner:
      example:
        expires: expires
        rendition: rendition
        adminComment: adminComment
      properties:
        adminComment:
          description: Comment by the administrator on the order item
          type: string
        rendition:
          description: |
            Rendition URL of rendition to order. This also identifies the asset.
            The rendition URL can be obtained from an Asset representation.
          type: string
        expires:
          description: |
            Time when order item expires, null if it never expires.
            After the expiration time, the customer cannot download this rendition any more.
          type: string
      type: object
    UploadStatus_job:
      description: Job info
      example:
        result:
        - result
        - result
        status: status
      properties:
        status:
          description: |
            * pending - The task is queued for processing
            * inProgress - Processing is still in progress
            * done - Processing has finished, and a result is available
            * failed - Processing has failed, and a result is available
          type: string
        result:
          description: |
            Result of the background task. List of uploaded files, their status, and their location in FotoWeb.
          items:
            type: string
          type: array
      type: object
    UploadStatus_task:
      description: Task info
      example:
        created: created
        modified: modified
        type: type
      properties:
        created:
          description: Time when task was created. Date/time (ISO 8601 string)
          type: string
        modified:
          description: Time when task was modified. Date/time (ISO 8601 string)
          type: string
        type:
          description: For upload status this will always be upload
          type: string
      type: object
    PeopleList_data_inner:
      example:
        unique_name: unique_name
        href: href
        type: type
        display_name: display_name
      properties:
        type:
          type: string
        display_name:
          type: string
        unique_name:
          type: string
        href:
          type: string
      type: object
    PeopleList_paging:
      example:
        first: first
      properties:
        first:
          type: string
      type: object
    QuickRenditions_inner:
      properties:
        href:
          description: URL of the rendition image
          type: string
        square:
          description: "true if the image has equal width and height, false otherwise."
          type: boolean
        name:
          description: "Name of the quick rendition, as set in the configuration"
          type: string
        size:
          description: Size of the image. This is the maximum of its width and its
            height in pixels.
          type: integer
        width:
          description: Width of the image in pixels
          type: integer
        height:
          description: Height of the image in pixels
          type: integer
      type: object
  securitySchemes:
    FotoWareOAuth:
      description: "This API uses OAuth 2 with the clientCredentials grant flow. [More\
        \ info](https://api.example.com/docs/auth)"
      flows:
        implicit:
          authorizationUrl: /fotoweb/oauth2/authorize
          scopes:
            full_access: Full access to the API
      type: oauth2
    FotoWareAccessToken:
      bearerFormat: JWT
      scheme: bearer
      type: http

